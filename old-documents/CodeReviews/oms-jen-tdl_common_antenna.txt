CODE REVIEW NOTES

Reviewer: OMS
Author:   JEN
Date:     08/03/2006
Files:    PyApps/src/Trees/TDL_common.py
          PyApps/src/Trees/TDL_Antenna.py
    


      Major design issues
      ===================
    
* File naming scheme -- to many prefixes. Better to use packages.  I.e.
MG_JEN_xxx could be replaced by JEN.xxx. Same for TDL_Antenna, etc. I would
suggest creating package JEN and having JEN/Common in there. TDL_common.py is an
especially misleading name, because it's Jan's private tools, but the name
suggests too much globality.

* Use of the pp dict for all keyword args is VERY VERY naughty, because:

  * the declaration of a function is also its documentation (and used by tools
  like pydoc to generate docs), so you should list all parameters it uses, not
  bury them in the code where pp is parsed. Being verbose in your function
  declarations is well worth the effort (and will also force you to think about
  which things you need and which you don't).
  
  * If A calls B(**pp) which calls C(**pp) its almost impossible to keep track
  of which parameters are meant to be used by B and which are meant to be 
  passed on to C.
  
TDL_common issues:

  * TDL_common: "class Super" is a bad name because it's utterly nondescriptive,
  almost as bad as "class Class". 

  * class Super holds a lot of unrelated functionality. Consider splitting up
  into multiple bases, i.e. HistoryCollector, ErrorCollector, etc.

  * Super.type(): why not use standard type(x), str(type(x)) and
  type(x).__name__? Fighting the language here.
  
TDL_Antenna issues:

  * Same **pp nightmare.
  
  * I strongly disagree with your UNIQUAL COUNTER scheme. It feels like a cheap
  kludge around some bigger issue. You should be able to generate a unique
  nodename using the information at hand anyway! Perhaps you should store a
  default set of node qualifiers in the Antenna object (and pass in an optional
  extra set to functions that create subtrees)?
  
  Generally, if two different subtrees are to be created, there should be enough
  info on hand to provide unique qualifiers. Name conflicts can often be
  SYMPTOMS OF A TREE DESIGN PROBLEM. Your uniquals automatically eliminate all
  conflicts, and thus paper over the symptoms!

  The TDL qualifier scheme is meant to make all this behaviour unnecessary. If
  there's something deficient in TDL, it needs to be fixed, not kludged around.

  * setting initrec.cache_policy=100 ("magic number syndrome") all over the
  place is very bad. Fighting the system again! As soon as someone else builds a
  serious tree using your stuff, he's going to run out of memory in a
  spectacular way -- since all your nodes cheerfully override the system
  settings -- and then go around complaining that "MeqTrees use a huge amount of
  memory". Better leave cache_policy alone (and set the forest cache_policy=100
  in test jobs to cache everything) altogether. If you really must manipulate a
  node's cache like that, do it outside the class somehow! And what if I change
  the cache_policy definition? You will have 100 places to fix in your
  code...

  * plot_color, plot_style, etc: consider putting these into a separate PlotAttr
  class, and keeping an object of that class in Antenna. More flexible and
  future-proof. 
  
  * Antenna.clear(): instead of setting all these endless nodestub members to
  None here, consider using getattr(self,'attr',None) where you first use them
  instead. This way you don't have to maintain them in two places. Also,
  consider putting all these things into a separate sub-structure; this makes
  things like copy() easier to implement.
  
  * Antenna.calc_derived() is perhaps too generic a name.
  
  * leaf_xx() & friends: lots of cut-and-pasted code is never good. Consider
  reimplementing as a single generic function that could be called as
  leaf('xx'), etc. Same for all other leaf things.

  * Passing **pp to subtree_xxx() is useless and misleading (since the parameter
  is not used). In general, adding parameters "just in case" is a bad idea. If
  it's not used, throw it out.
  
  * Receptor.Receptor_calc_derived(): you seem to be fighting ionheritance here.
  Why not keep calling it calc_derived()? That's the whole point of OOP, yet you
  use it, then kludge around it. Same for Feed_calc_derived, etc.
  
  E.g. you probably wouldn't need to reimplement pos0() at all in subclasses if
  you weren't renaming calc_derived() for some reason...
  
  * Array.new_element(): consider renaming to add_element() since the name "new"
  usually implies a function that creates and returns a new thingy.


      Code issues
      ===========
      
TDL_Antenna:

  * Antenna.pos0: "(not new==None)" better said as "new is not None". Also more
  Pythonic. That whole if clause should be "if new or shift:" anyway.
  
  * Antenna.display(): you could probably unclutter a lot here by using the %
  operator (especially in the "%(name)" form)
  
  * Antenna.subtree_diff_voltage_beam(): creating a name via
  "name=xxx+str(i+1)":  why not use qualifiers?

  * Feed.nrcp(): caching self.__nrcp is premature optimization, why bother? No
  gain at all, and creates the opportunity for a mix-up.
  
  * Feed.dcoll_xy(): changing the plot style here is an unobvious side effect
  and should be avoided. There has to be a better place to do this
  (constructor?)

  

      Minor niggles
      =============
      
* TDL_common: no need to 'from TDL import *' at top since no TDL features are
used, this is pure Python.
      
* TDL_common: test clause is not self-contained, why get into NodeScopes and such?
