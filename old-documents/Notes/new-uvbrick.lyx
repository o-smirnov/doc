#LyX 1.4.3 created this file. For more info see http://www.lyx.org/
\lyxformat 245
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize default
\use_geometry false
\use_amsmath 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\end_header

\begin_body

\begin_layout Title
Towards a New UV-Brick
\end_layout

\begin_layout Author
O.
 Smirnov & R.
 Thomas
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The purpose of the UVBrick nodes is to provide MeqTrees with the capabilities
 to:
\end_layout

\begin_layout Itemize
predict visibilities from images
\end_layout

\begin_layout Itemize
apply image-plane effects using the Bhatnagar-Cornwell approach
\end_layout

\begin_layout Standard
This functionality should be implemented in terms of at least two node classes:
\end_layout

\begin_layout Itemize

\series bold
FFTBrick
\series default
, which does an FFT from a regular 
\begin_inset Formula $lm$
\end_inset

 grid (
\begin_inset Quotes eld
\end_inset

image brick
\begin_inset Quotes erd
\end_inset

) onto a regular 
\begin_inset Formula $uv$
\end_inset

 grid (
\begin_inset Quotes eld
\end_inset

visibility brick
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize

\series bold
UVInterpol
\series default
, which interpolates the visibility brick onto a per-baseline 
\begin_inset Formula $uv$
\end_inset

 track.
\end_layout

\begin_layout Standard
Operationally, we will have a single FFTBrick for each image, and many per-basel
ine UVInterpol's to interpolate it onto each baseline's 
\begin_inset Formula $uv$
\end_inset

 track.
 To apply image-plane effects, a separate FFTBrick per antenna will be required
 to turn each 
\begin_inset Quotes eld
\end_inset

image Jones
\begin_inset Quotes erd
\end_inset

 into a 
\begin_inset Quotes eld
\end_inset

convolution Jones
\begin_inset Quotes erd
\end_inset

 (see below).
\end_layout

\begin_layout Section
FFTBrick
\end_layout

\begin_layout Standard
The FFTBrick node has one input child --- the 
\emph on
image
\emph default
 brick.
 This can be a scalar quantity (e.g.
 single image, scalar Jones) or a tensor (brightness matrix, Jones matrix).
 The purpose of the FFTBrick is to effect an FFT of the input image.
 In the tensor case this is done independently element-by-element, so we
 will henceforth designate the input by 
\begin_inset Formula $B$
\end_inset

, with the implicit understanding that this may be a scalar quantity or
 a tensor (real or complex!) 
\end_layout

\begin_layout Standard
As a minimum, 
\begin_inset Formula $B$
\end_inset

 is a function of 
\begin_inset Formula $l,m$
\end_inset

, represented by a 2D array:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left\{ B_{ij}\right\} =\left\{ B(l_{i},m_{j})\right\} \]

\end_inset


\end_layout

\begin_layout Standard
We will henceforth simply write 
\begin_inset Formula $B(l,m)$
\end_inset

, with the implicit understanding that l,m represents a grid point 
\begin_inset Formula $l_{i},m_{j}$
\end_inset

.
 The 
\begin_inset Formula $lm$
\end_inset

 grid is supplied in the 
\series bold
cells
\series default
 field attached to the input image brick.
 We may safely assume the grid is regular, and fail otherwise (also fail
 if either the 
\begin_inset Formula $l$
\end_inset

 or 
\begin_inset Formula $m$
\end_inset

 axis is missing).
\end_layout

\begin_layout Standard
The result of the FFT is a 
\emph on
visibility brick
\emph default
, 
\begin_inset Formula $X$
\end_inset

, sampled on a regular 
\begin_inset Formula $uv$
\end_inset

 grid:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left\{ X_{ij}\right\} =\left\{ X(u_{i},v_{j})\right\} \]

\end_inset


\end_layout

\begin_layout Standard
The FFTBrick should form up a 
\begin_inset Formula $u$
\end_inset

 and 
\begin_inset Formula $v$
\end_inset

 axis in the output 
\series bold
cells
\series default
 field.
 Note that the units of the 
\begin_inset Formula $uv$
\end_inset

 axes are [proportional to] wavelengths (need to work this out exactly...)
 The ratio between the 
\begin_inset Formula $lm$
\end_inset

 cell size and the 
\begin_inset Formula $uv$
\end_inset

 cell size should be determined via parameter of the FFTBrick: this allows
 us to have a 
\begin_inset Quotes eld
\end_inset

generic
\begin_inset Quotes erd
\end_inset

 FFT that can be applied to other sets of axes.
 
\end_layout

\begin_layout Standard
The FFTBrick may pad the input image by a user-defined factor.
 If the image is padded by, e.g., a factor of 2, this means the output 
\begin_inset Formula $uv$
\end_inset

 grid has twice the number of points (in each dimension) of the input 
\begin_inset Formula $lm$
\end_inset

 grid.
 The cell size of the output grid should be adjusted accordingly.
\end_layout

\begin_layout Standard
The input brick 
\begin_inset Formula $B$
\end_inset

 may also be a [hyper]cube in, e.g., time and/or frequency:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\left\{ B_{ijkn}\right\} =\left\{ B(l_{i},m_{j},t_{k},\nu_{n})\right\} \]

\end_inset


\end_layout

\begin_layout Standard
in this case the FFT is performed separately on each time/frequency plane,
 and the output 
\begin_inset Formula $X$
\end_inset

 is also a hypercube with the same time/frequency grid as 
\begin_inset Formula $B$
\end_inset

.
\end_layout

\begin_layout Standard
To be completely generic, the FFT 
\begin_inset Quotes eld
\end_inset

input
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

output
\begin_inset Quotes erd
\end_inset

 axis pairs are optional parameters of the FFTBrick node, with the defaults
 being 
\begin_inset Formula $lm$
\end_inset

 and 
\begin_inset Formula $uv$
\end_inset

.
\end_layout

\begin_layout Subsection
Current status
\end_layout

\begin_layout Standard
The current FFTBrick implementation looks adequate, although it will need
 to be checked for consistency and hidden assumptions.
\end_layout

\begin_layout Section
UVInterpol
\end_layout

\begin_layout Standard
The purpose of a UVInterpol node is to interpolate a visibility brick onto
 a per-baseline 
\begin_inset Formula $uv$
\end_inset

 track.
 A UVInterpol has two inputs:
\end_layout

\begin_layout Itemize
A visibility brick, 
\begin_inset Formula $X$
\end_inset

.
 In the simple case this is a 2D array with only the 
\begin_inset Formula $uv$
\end_inset

 axes: 
\begin_inset Formula $\{ X(u,v)\}$
\end_inset

, but in general it may also have other axes, such as time and frequency:
 
\begin_inset Formula $\{ X(u,v,t,\nu\}$
\end_inset

.
 As will be seen below, the general case poses no additional complication.
\end_layout

\begin_layout Itemize
A uv-track, 
\begin_inset Formula $\vec{\mathbf{u}}$
\end_inset

.
 This is a two-vector of 
\begin_inset Formula $(\mathbf{u,v})$
\end_inset

.
 It will almost always have a time axis; it may be safely assumed that if
 
\begin_inset Formula $X$
\end_inset

 has a time axis, then the time gridding of 
\begin_inset Formula $X$
\end_inset

 is the same as that of 
\begin_inset Formula $\mathbf{uv}$
\end_inset

.
 The units are 
\series bold
meters,
\series default
 this is indicated by boldface here.
 It may be assumed that the uv-track has no other axes except time (although
 a frequency axis may, in principle, also be allowed...)
\end_layout

\begin_layout Standard
The output of the UVInterpol is a 
\begin_inset Quotes eld
\end_inset

resampled
\begin_inset Quotes erd
\end_inset

 visibility for the given uv track: 
\begin_inset Formula $W(t,\nu)$
\end_inset

.
 The frequency grid comes from the 
\series bold
cells
\series default
 field of the request, the time grid comes from the 
\series bold
cells
\series default
 of the uv track.
 
\end_layout

\begin_layout Standard
The UVInterpol should proceed as follows:
\end_layout

\begin_layout Enumerate
Convert the 
\begin_inset Formula $\mathbf{u}(t)$
\end_inset

, 
\begin_inset Formula $\mathbf{v}(t)$
\end_inset

 coordinates from meters into wavelengths: 
\begin_inset Formula $u(t,\nu)=\mathbf{u}(t)\nu/c$
\end_inset

, and the same for 
\begin_inset Formula $v$
\end_inset

.
 (This is trivial to do with VellsMath.) The 
\begin_inset Formula $u,v$
\end_inset

 values are then 2D arrays with axes of time and frequency.
 Note that we could easily support a frequency axis in the original 
\begin_inset Formula $\mathbf{u}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

, since it would be trivial to handle it at this stage.
\end_layout

\begin_layout Enumerate
Allocate an output array 
\begin_inset Formula $W$
\end_inset

, with one cell per each frequency/time point.
\end_layout

\begin_layout Enumerate
Compute each 
\begin_inset Formula $W(t,\nu)$
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
W(t,\nu)={\displaystyle \sum_{ij}X(u_{i},v_{j},t,\nu)N(u(t,\nu)-u_{i},v(t,\nu)-v_{j})}\label{eq:interpol}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where the sum is taken over all pixels 
\begin_inset Formula $ij$
\end_inset

 where the interpolation kernel 
\begin_inset Formula $N$
\end_inset

 is non-zero.
 Different kinds of interpolation kernels are possible, I will leave it
 to Rajat to investigate.
 Note that at this stage it is simple to accomodate a time/frequency dependence
 in the visibility brick 
\begin_inset Formula $X$
\end_inset

: we're looping over all times and frequencies anyway, so either we're using
 the same 
\begin_inset Formula $X$
\end_inset

 for all of them, or we're looking up the result in different time/frequency
 slices of 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\begin_layout Standard
Note that (as in the case of FFTBrick), 
\begin_inset Formula $X$
\end_inset

 may be a scalar or a tensor.
 In the tensor case, the same operation is repeated for all elements of
 the tensor.
 Since all tensor elements are sampled on the same 
\begin_inset Formula $uv[t\nu]$
\end_inset

 grid, it is possible to save a lot of computation by reusing the interpolation
 coefficients across tensor elements.
\end_layout

\begin_layout Subsection
Current status
\end_layout

\begin_layout Standard
The current UVInterpol is too convoluted for redemption, and doesn't quite
 seem to work right.
 It will be easier to do a clean reimplementation from scratch.
\end_layout

\begin_layout Section
Incorporating image-plane effects
\end_layout

\begin_layout Standard
In the presence of per-antenna image-plane effects (
\begin_inset Quotes eld
\end_inset

sky Jones
\begin_inset Quotes erd
\end_inset

) 
\begin_inset Formula $R_{p}$
\end_inset

 (where 
\begin_inset Formula $p$
\end_inset

 is an antenna index), the measurement equation gives us:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
W_{pq}=\intop\intop R_{p}BR_{q}^{*}K_{pq}dldm\]

\end_inset

where 
\begin_inset Formula $K$
\end_inset

 is the phase term (
\begin_inset Quotes eld
\end_inset

almost
\begin_inset Quotes erd
\end_inset

 an FT kernel).
 If 
\begin_inset Formula $X$
\end_inset

 is the FT of 
\begin_inset Formula $B$
\end_inset

, and 
\begin_inset Formula $S_{p}$
\end_inset

 is the FT of 
\begin_inset Formula $R_{p}$
\end_inset

, then in the visibility plane this corresponds to a convolution:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
W_{pq}=S_{p}\circ X\circ S_{q}^{*}\label{eq:convolve}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Note that for wide fields, the 
\begin_inset Formula $w$
\end_inset

-term needs to be taken into account.
 This can be treated as an image-plane effect of its own:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
N_{p}=\frac{1}{\sqrt{n}}e^{-\imath w_{p}(n-1)}\qquad\left(n=\sqrt{1-l^{2}-m^{2}}\right)\]

\end_inset


\end_layout

\begin_layout Standard
We can use the FFTBrick to convert each 
\begin_inset Quotes eld
\end_inset

sky-Jones
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $R_{p}$
\end_inset

 into its Fourier transform 
\begin_inset Formula $S_{p}$
\end_inset

 (for which I suggest the term 
\begin_inset Quotes eld
\end_inset

convolution Jones
\begin_inset Quotes erd
\end_inset

).
 The 
\begin_inset Formula $lm/uv$
\end_inset

 gridding may be (but need not) be the same as that of the input image.
 To apply the 
\begin_inset Formula $w$
\end_inset

-term, we will simply have a tree to work out 
\begin_inset Formula $N_{p}$
\end_inset

 and multiply it by other image-plane effects, thus deriving the complete
 
\begin_inset Formula $R_{p}$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Scalar sky-Jones
\end_layout

\begin_layout Standard
Note that for the moment we assume scalar image-plane effects.
 For full matrix image plane effects, the convolution above becomes a 
\begin_inset Quotes eld
\end_inset

convolve-and-matrix-multiply
\begin_inset Quotes erd
\end_inset

 operation, which is rather tiresome to write out and implement, so we can
 save it until later.
 It would be good for Rajat to keep the possibility in mind though as he
 works on the scalar implementation.
\end_layout

\begin_layout Subsection
Applying the sky-Jones during interpolation
\end_layout

\begin_layout Standard
Assuming a scalar sky-Jones, we can commute the terms in eq.
 
\begin_inset LatexCommand \eqref{eq:convolve}

\end_inset

: 
\begin_inset Formula $W_{pq}=X\circ S_{p}\circ S_{q}^{*}=X\circ S_{pq},$
\end_inset

 where 
\begin_inset Formula $S_{pq}=S_{p}\circ S_{q}^{*}$
\end_inset

.
\end_layout

\begin_layout Standard
Given a visibility brick 
\begin_inset Formula $X$
\end_inset

, and 
\begin_inset Formula $S_{pq}$
\end_inset

, the Bhatnagar approach essentially comes down to a modification of the
 interpolation kernel 
\begin_inset Formula $N$
\end_inset

 in eq.
 
\begin_inset LatexCommand \eqref{eq:interpol}

\end_inset

.
 Instead of using a standard kernel, we use the 
\begin_inset Formula $S_{pq}$
\end_inset

 convolution function.
 Assuming that the image-plane effects 
\begin_inset Formula $R_{p}$
\end_inset

 are smooth enough, 
\begin_inset Formula $S_{pq}$
\end_inset

 will be non-zero in a limited area around 0, so the convolution is computationa
lly tractable.
\end_layout

\begin_layout Subsection
Implementation details
\end_layout

\begin_layout Standard
This is essentially a special version of UVInterpol.
 At the moment I have no clear preference for whether this should be a separate
 node class, or an option of the UVInterpol class (i.e.
 optional 
\begin_inset Formula $S_{p}$
\end_inset

 and 
\begin_inset Formula $S_{q}$
\end_inset

 children).
\end_layout

\begin_layout Section
Gridding considerations
\end_layout

\begin_layout Standard
Equation 
\begin_inset LatexCommand \eqref{eq:interpol}

\end_inset

 will be somewhat tricky to implement.
 The 
\begin_inset Formula $N(u(t,\nu)-u_{i},v(t,\nu)-v_{j})$
\end_inset

 term is easy to calculate analytically if 
\begin_inset Formula $N$
\end_inset

 is a standard interpolation kernel.
 If, however, it represents a convolution function 
\begin_inset Formula $S_{pq}$
\end_inset

, then that function itself is defined on a discrete 
\begin_inset Formula $uv$
\end_inset

 grid.
 Each 
\begin_inset Formula $u(t,\nu)-u_{i},v(t,\nu)-v_{j}$
\end_inset

 point need not correspond to the grid, so getting its value will require
 an extra interpolation step (effectively convolving 
\begin_inset Formula $S_{pq}$
\end_inset

 with another standard interpolation kernel...)
\end_layout

\begin_layout Standard
(It would be interesting to see how Sanjay approaches this, has he described
 it anywhere?)
\end_layout

\begin_layout Standard
We mentioned above that the 
\begin_inset Formula $lm$
\end_inset

 grid on which we define our sky Jones terms need not be the same as the
 
\begin_inset Formula $lm$
\end_inset

 grid of the image.
 We may want to use a finer grid to cut down on interpolation errors, or
 a coarser grid to make things faster.
 In terms of implementation, assuming the same grids will not simplify matters
 anyway (interpolating 
\begin_inset Formula $X$
\end_inset

 and interpolating 
\begin_inset Formula $S_{pq}$
\end_inset

 being independent processes), so we may as well allow for different grids.
 
\end_layout

\begin_layout Subsection
Normalized coordinates?
\end_layout

\begin_layout Standard
The real complication (at least in terms of CPU cycles...) is that we have
 to interpolate along a different 
\begin_inset Formula $uv$
\end_inset

 track for every frequency, so the interpolation coefficients in eq.
 
\begin_inset LatexCommand \eqref{eq:interpol}

\end_inset

 have to be computed separately for every frequency plane.
 
\end_layout

\begin_layout Standard
For this reason it is tempting to use 
\begin_inset Quotes eld
\end_inset

normalized
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $uv$
\end_inset

 and 
\begin_inset Formula $lm$
\end_inset

 coordinates.
 Let's assume for a moment that the input image 
\begin_inset Formula $B$
\end_inset

 has a frequency axis, and that it uses a 
\begin_inset Quotes eld
\end_inset

normalized
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $\tilde{l}\tilde{m}$
\end_inset

 coordinate system for every frequency plane:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\tilde{l}=l\frac{\nu_{0}}{\nu},\quad\tilde{m}=m\frac{\nu_{0}}{\nu}\]

\end_inset

 
\end_layout

\begin_layout Standard
The image essentially 
\begin_inset Quotes eld
\end_inset

zooms in
\begin_inset Quotes erd
\end_inset

 (resolution increases) as we go to higher frequencies.
 After an FFT, the output 
\begin_inset Formula $\tilde{u}\tilde{v}$
\end_inset

 coordinates in the visibility brick are also 
\begin_inset Quotes eld
\end_inset

normalized
\begin_inset Quotes erd
\end_inset

; this means that in the UVInterpol node we don't need to apply the 
\begin_inset Formula $\nu/c$
\end_inset

 factor to 
\begin_inset Formula $uv$
\end_inset

 coordinates (only 
\begin_inset Formula $\nu_{0}/c$
\end_inset

, which is a constant), so the interpolation occurs 
\emph on
along the same uv track for every frequency plane
\emph default
.
 In eq.
 
\begin_inset LatexCommand \eqref{eq:interpol}

\end_inset

, we can then reuse the same set of coefficients for every frequency plane.
 This seems like a very important shortcut, at least in the case of image-plane
 effects!
\end_layout

\begin_layout Standard
The problem is, what if our image cube is specified in 
\begin_inset Quotes eld
\end_inset

regular
\begin_inset Quotes erd
\end_inset

 
\begin_inset Formula $lm$
\end_inset

 coordinates (or it doesn't have a frequency axis at all?) To get it into
 normalized coordinates, we'd have to resample the image brick 
\begin_inset Formula $B$
\end_inset

 for every frequency plane (or, alternatively, resample the visibility brick
 
\begin_inset Formula $X$
\end_inset

.) We'd then be trading off one interpolation operation for another.
 The relative costs are a bit difficult to work out right now --- is it
 cheaper to interpolate once per pixel per frequency per image, or once
 per timeslot per frequency per image per baseline? What's greater, 
\begin_inset Formula $N_{\textrm{pix}}$
\end_inset

, or 
\begin_inset Formula $N_{\textrm{times}}\times N_{\textrm{baselines}}$
\end_inset

?
\end_layout

\begin_layout Standard
On the other hand, if the image cubes are simulated to begin with (as is
 the case for the EOR project, and will be the case for SKADS), then it
 could be a trivial matter to simulate them in 
\begin_inset Quotes eld
\end_inset

normalized
\begin_inset Quotes erd
\end_inset

 coordinates to begin with.
 The LOFAR GSM could also store normalized-coordinate images.
 In this case we could obtain a huge performance boost!
\end_layout

\begin_layout Standard
It would therfore seem desirable that UVInterpol support both modes: normalized
 and unnormalized coordinates.
\end_layout

\end_body
\end_document
