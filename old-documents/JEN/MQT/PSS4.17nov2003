file: ../MeqTrees/PSS4.17nov2003


         Program for this week
	 =====================


I got my meqRippleSubtract tree working, complete with dummy LSM. It
will now be easy to make a meqRippleSimulate.

  -) Check whether the various Meq classes exist. 
     - MeqFreq (unit?)
     - us,vs,ws
     - HA!

  -) Check the automatic making of MeqParms.

  -) Select a suitable MS (2D, not too large)
  
  -) Get the RA,DEC of the field centre, and code this into the LSM
  
  -) Make the us,vs,ws MeqParms

  -) Fill the DATA column of the MS with simulated data, using the
  dummy LSM. RequestSequence? Make a map of the result.

  -) Subtract the same LSM from it, and look at the result at various
  stages. This implies pausing/stepping, and getting (and displaying)
  the result from selected nodes. Make a map of the result.


  



         List of official (Meq) Classes
         ==============================

  -) MeqSink

  -) MeqSpigot

  -) MeqParm

  -) MeqFreq (needed for LSM)  Hz
  -) MeqTime (MJD sec)
  -) MeqGreenwich SiderealTime (nt needed)

  -) MeqCondeq
  -) MeqConstr

  -) MeqFlagger

  -) MeqIntegrate

  -) MeqWsum

  ----------------------------------------

  -) MeqVells
     - Can be scalar or vector: automatic expansion 

  -) MeqCells
     - implicit MeqDomain...
     - regular freq channels? (efficient)
     - units (freq=Hz, time=sec(MJD))
     - other dimensions than time/freq 

  -) MeqDomain

  -) MeqRequest
  -) MeqRequestSequence (MeqSink)
  
  -) MeqResult 
     - multiple planes

  -) MeqSolution




         MeqParm
	 =======

  -) Node name vs parm name...

  -) Split into real/imag, if necessary:
     MeqParm[k=...][l=real]
     MeqParm[k=...][l=imag]

  -) Dynamic creation of (non-existing) MeqParms
     - need MEP table name (default)

  -) uvwparm <msname> <mepname> [check]
     - anything filled in for checl will do
     - one polc/hour, uses 2nd degr poly
     - deviation less than 0.02 (self-test)
     - parm names : MeqParm[k=u][s=34] etc
     - reference station is [s=1] 

  -) Default value at creation (type..)
     - defrec.default := <real scalar>

  -) Polc management




         Existing trees, and specific (meq) MeqExpr Classes
         =========================================

  -) MeqSink_XXYY: uv-data transfer:
     - meqFlagger (place-holder for MeqFlagger)
     - meqCopy
     - meqCompare

  -) blitz (tests blitz functions, and selftest)
     - each function requires work on the C++ side...
     - only implement the ones we really need

  -) LSM
     - Connection with GSM...



 

         Actual C++ MeqExpr node (object) generation
         ===========================================


  -) NB: We need some tools to interact with C++ nodes:
     - List of existing nodes
     - List of existing classes



         Running MeqTrees
         ================

  -) script for compiling new MeqExpr classes (done)

  -) jen gui for operating the system?

  -) Inspecting nodes from Glish works. We need more tools to look at
  the result.

  -) meqserver.gui() needs to be repaired.




         System issues
	 =============

  -) include 'MeqTreeBuilder.g' breaks Glish on lofar10 (stack parser
  exceeded!), but not on dop12 or dop23.  For the moment, we can work
  around it by creating MeqTree files on dop12 and copying them to
  lofar10. But it obviously needs to be fixed.





                               =================================
