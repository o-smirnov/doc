file: ../MeqTrees/PSS4.03nov2003

The following is a record of some of the things we discussed during
the last week. PLEASE read it carefully: it is the raw material of the
common language that we urgently need!


         Naming conventions
	 ==================

  -) A node name is just a string. It has the following structure:
            <classname>[q1=..][q2=..][q3=..][..]

  -) When creating a node, it is assumed that a class <classname>
  exists, either in the official library, or in a user-defined one.

  -) In order to avoid name-clashes, I propose that we use the
  following naming conventions:
     - MeqXyz for official classes (e.g. MeqParm, MeqSpigot)
     - meqAbcDef for user-defined (automatically generated)
       MeqExpr classes
     Thus, we have two name-spaces (Meq and meq), of which I will
     only use the latter in my automatically generated classes

  -) In the future, we might consider the use of other user namespaces
  instead of 'meq' (not Meq, of course) e.g. 'jen' or 'oms'...

  -) However, there is a problem with the fact that C++ automatically
  prepends classnames with the namespace 'Meq' (or 'meq', or 'jen'):

     -) Because children are identified by name, I absolutely have to
     use the full classnames during tree definition. Any other
     approach would be an infinite source of errors.

     -) I notice that, in the present scheme, the .h and .cc filenames
     do not have the namespace string (Meq), so their names differ
     from the nodenames that are used. This seems wrong in principle.

   We may think of the following solutions:

     1) We do not use the C++ 'namespace' command in the .h and .cc
     files, but I make sure that the first three letters of all
     classnames are legitimate (i.e. 'Meq', or 'meq', or 'jen')

     2) We use the namespace command, but I strip off the three first
     letters on the spot. This seems stupid...


  -) The qualifiers [][] distinguish different objects of the same
  class. Each has a [keyword=value] structure. The following letters 
  are used at present:
     - [s=..]:  station nr
     - [s1=..]: station nr (in an ifr)
     - [s2=..]: station nr (in an ifr)
     - [c=..]:  correlation (4 per ifr)
     - [p=..]:  polarisation (2 per station)
     - [q=..]:  LSM source component nr (German for source is 'quelle')
     - [k=..]:  MeqParm 'kind', e.g. MeqParm[k='u'][s=15]
                NB: The [k] qualifier is always the first
     - [other?]

   -) The order of the qualifiers is not important when specifying
   them (e.g. to select a subset). But the order is important in the
   node name-string, because nodes are recognised by them.

   -) If qualifier values are numbers it is possible to do arithmetic
   with them (I am considering to change to correlation nrs [1,2,3,4]
   rather than XX,XY etc). Therefore, I am not in favour of using
   station names like WSRT_RT0 etc. However, it is alsways possible to
   have an automatic translation in an instrument-specific tool.

 


         UVW-coordinates
	 ===============

  -) Initially, we will use GVD's current approach, where he has
  MeqParms for the (u,v,w) coordinates of each station
     - MeqParm[k=u][s=..]
     - MeqParm[k=v][s=..]
     - MeqParm[k=w][s=..]

  -) GVD derives the U,V,W MeqParms by fitting a time-polynomial to
  the u,v,w, coordinates in the input MS. This guarantees that the
  calculation is the same as in the Haystack simulated data.

  -) In the near future, we may also use classes MeqU, MeqV, MeqW.
  These will have one child (MeqUVW), which in its turn will have
  station coordinate MeqParms as children. For the moment, I have
  grudgingly agreed to the fact that MeqUVW is a somewhat special
  node, for efficiency reasons. In any case, the station position
  coordinates will be normal MeqParms, and it will be possible to
  solve for them in the usual way.

     -) OMS will submit a proposal for a multi-plane MeqResult in
     order to accomodate MeqUVW etc

  -) Note that all u,v,w, are per STATION, not ifr.


  -) JEN will adapt the DFT according to these two possibilities, and
  create a MeqExpr node 'shiftPhaseCentre'.

  -) It is not yet clear if we have to change (u,v,w) whenever we
  shift the phase centre to a new peeling source...

  -) The current JEN conversion from (RA,DEC,RA0,DEC0) to (l,m) is
  probably too simplistic....

  -) It may be possible to live without special nodes (RA0,DEC0) for
  the phase-centre(s) of uv-data. In that case, the (RA,DEC) of the
  peeling source that was subtracted last is the current phase centre
  of the (residual) uv-data used for imaging.

  -) We probably need (RA,DEC) nodes for peeling source [q=0], i.e. a
  artificial source with zer flux, at the position of the original
  phase centre (fringe-stopping centre) of the uv-data.




         Generating C++ (MeqExpr) classes automatically
	 ==============================================

  -) The tree generation system has the following steps:

     1) A parametrized tree is created and put into a .MeqTree file.
     The nodes have the correct classnames, but their qualifiers [..] 
     still have parameters in them: [s1='{s1}'] etc.

     2) The .cc and .h files of C++ MeqExpr classes may be generated
     from a parametrized (unexpanded) .MeqTree file. The classname
     is used, of course (qualifiers represent different intantiations)
     Classes that have no children get special treatment:

        a) If the classname is an official one (e.g. MeqSpigot), no
	new C++ class is generated. 

	b) Otherwise, the node is assumed to be a MeqParm (for which an
	official class exists). The node classname is converted to a
	qualifier:  abc[..] -> MeqParm[k='abc'][..]

     3) A MeqTree may be 'expanded', and put into a second .MeqTree
     file, with a name that is derived from the input file:
        predictSource_XXYY.MeqTree  ->  
        predictSource_XXYY_expanded.MeqTree

     4) Actual C++ nodes are generated from expanded .MeqTree files.

  -) Experimentation will **REALLY** profit from having a structure
  (directories, tools, name conventions) to generate new classes
  automatically from (unexpanded) .MeqTree files. We need this as
  early as possible.

  -) The latter includes a mechanism to create MeqParms...

  -) Do we need .getComplexArray() in this stage? It seems to be a
  source of problems....		    


         Actual C++ MeqExpr node (object) generation
         ===========================================

  -) Creating C++ nodes from a (expanded) MeqTree file goes fine. 

  -) NB: Why is 'meqnode()' not mqsv.meqnode()?
         Why is it not called .getDefrec(), as in the Handbook?

  -) NB: We need some tools to interact with C++ nodes:
     - List of existing nodes
     - List of existing classes



         Running MeqTrees
         ================

  -) A simple tree that transfers uv-data from one MS column to
  another by means of MeqSpigot/MeqSink combinations works fine.
  There are a number of small bugs to be repaired.

  -) Inspecting nodes from Glish works. We need more tools to look at
  the result.

  -) meqserver.gui() needs to be repaired.




         System issues
	 =============

  -) JEN's glish scripts are on dop12 (to make it easier to go back
  and forth to his home system via floppy). Since lofar10 can 'see'
  dop12, this is OK for testing. It is bit clumsy for checking in, but
  that does not happen too often.

  -) include 'MeqTreeBuilder.g' breaks Glish on lofar10 (stack parser
  exceeded!), but not on dop12 or dop23.  For the moment, we can work
  around it by creating MeqTree files on dop12 and copying them to
  lofar10. But it obviously needs to be fixed.







                               =================================
