file: ../MeqTrees/PSS4.16mar2004


         MeqForest execution (OMS)
	 =========================

  -) case-insensitive field-names....?

  -) clear all publishing (OMS will supply this function)

  -) flush MeqParms (memory)

  -) tabel locking (reset)




         MeqSolver (GVD)
	 ===============

  -) We discussed solving for growing domains. There are three
  operaions:

     -) Accumulate equations to the solution matrix. If the matrix
     exists already, check whether the spids are the same.

     -) Invert the solution matrix and update the relevant MeqParms.
     (if save_polcs, update the meptable too). 

     -) Clear the solution matrix. This forces a new one to be started
     next time.

  -) GVD has implemented this by supplying a Clear.Solver switch
  (default is T) and a num_steps parameter to the request:

     a) request.num_steps<0: As it was before: The process is
     controlled by solver.num_steps. Every step (iteration) consists
     of the accumulation of all equations from a .getResult() into a
     solution matrix. The latter is inverted each iteration, and the
     ('solvable polc' of the) relevant MeqParms are of course updated.
     The meptable is only updated when request.save_polc=T, or when
     MeqParm.auto_save=T. 
     
     b) request.num_steps>0: Overrides solver.num_steps, for this
     request only. The rest of the operation is the same.

     c) request.num_steps=0: Inhibits matrix inversion. The
     solver just accumulates the new batch of equations in the
     existing matrix.

  -) If the above is correct, I have the following questions:

     -) If we have more than one iterations (num_steps>1), this
     implies necessarily that the matrix is cleared each time , even
     if the request.Clear.Solver switch is F.

     -) What is the difference in operation between a) and b)? It
     seems to me, that the solver.num_steps is a relic of the past.
     It is perfectly adequate, and less confusing, if the solver gets
     its num_steps from the request (btw: I prefer num_iter). 

     -) NB: If we have growing domains (as will usually be the case),
     num_steps/num_iter will always be one, since the solution for
     incremental domains is implicitly iterative.

     -) What happens in c) if request.Clear.Solver=T?

  -) I have a cleaner alternative proposal:

     -) The solver has neither num_steps, nor a domain. (I am sorry to
     be constantly reducing the scope of the solver).

     -) The request has the following:

        -) .clear_matrix. Default value is T. If T, the matrix is
        cleared and redefined BEFORE accumulation.

        -) .invert_matrix (or .solve). Default is T. If T, the matrix
        is inverted after accumulation. 

        -) .num_steps (or rather .num_iter). Default value is one.
        Specifies the number of times that the SAME request is re-used
        by the solver to get better estimates. If >1, it overrides
        .clear_matrix and .invert_matrix, in the sense that the matrix
        has to be inverted and cleared each iteration).

        -) .save_polc. Default value is T. If T, updates the meptable
        whenever the solvable_polc is updated (NB: not .save_polcs!,
        there is only one solvable_polc per MeqParm instantiation).
     

  -) As GVD pointed out in his email: The solver does NOT care (or
  even know!!) about domains. It only has a solution matrix, a list of
  spids, a list of solvable MeqParms, and a list of nodes that can
  supply it with equations (MeqCondeqs etc).



         Growing domains
	 ===============

  -) It would be nice if the MeqParm could decide for itself whether
  the domain of its solvable polc has grown too large for the
  specified polynomial degree. It would then notify its solver, which
  would do 'somthing sensible' with the information.

  -) If a domain is getting too large for its polynomials degree, the
  update values for the higher-order coefficients will be larger than
  those for the lower-order ones. I will experiment a bit.



         Explicit switches vs implicit assumptions
	 =========================================

  -) OMS will make a list of all implicit assumptions (like the one
  above) in the system. We will then discuss the pros and cons of
  explicit switches and implicit assumptions.

  -) My own list of unwanted impliciticity (not complete):

     -) I now distinguish node-states by the presence of either
     'result' or 'cache_result' fields. I would prefer an 'type' field
     or something.

     -) The presence of a 'fail' field instead of a cells or
     something. I would prefer the cells field to be present always,
     but it could be a fail.

     -) The solver will only do a .getResult() to its children (and
     thus accumulate equations to the matrix) if the request contains
     a MeqCells object.


  -) An explicit switch makes clear the intent. The absence on some
  stuff that is needed to carry out this intent then leads to an
  error, so that the user knows that something is wrong.

  -) Implicit assumptions (like the presence of a cells field) may
  cause behaviour that was not intended, without any feedback.

  -) Explicit switches also make it easier to read requests etc, and
  to keep track of what is going on. Especially for users that do not
  know the arcane reasoning behind the assumptions, which might or
  might not be written down...


         MeqCells
	 ========

  -) OMS has written a proposal. GVD agrees in principle, but has some
  reservations:

     -) LOFAR subband selection: 40(80) MHz gets digitised, in
     contiguous chunks (subbands) of 256 kHz. Any subset of those
     subbands may be selected for further processing. 

     -) The selected subbands are split into 'channels' of 1 kHz (but
     other channelwidths are possible, down to 0.1 kHz). The channels
     of different subbands are on the same overall grid (?).
 
     -) So, we have a justification for the proposal to have cells
     that have multiple non-contigous ranges (subbands) of regular
     freq channels


  -) OMS has sent the Glish files that enshrine the new MeqCells and
  MeqDomain (meqtypes.g and meptool.g) to JEN, who has switched over.
  However, since the C++ system has not been upgraded yet, nothing
  works for the moment.


         MeqFlagSubtract/MeqIntegrate (OMS)
	 ==================================


  -) In addition to a simple flagger ( MeqFlagSubtract, see last
  week), OMS is thinking about a node that integrates the uv-data to
  larger cells. This has the following potential complications:
    
     -) Taking flags and weights into consideration.

     -) Remaining cells at the edges
     


         MeqDFT (GVD)
	 ============

  -) At this moment, a peeling source is predicted for its own flux
  centre, i.e. we assume that the uv-data has been shifted to this
  point.

  -) However, if we wish to take a few other (contaminating) sources
  into account, we have to shift their predictions to the position of
  the peeling source. (NB: we can still predict them at low (f,t)
  resolution, because we only need them approximately)

  -) GVD points out that, when we solve for the position of a peeling
  source, we do not want to shift the uv-data after each solution.
  Instead, we should have a small MeqDFT of the peeling source.
 
  -) Concluding, I propose that we ALWAYS have a MeqDFT node in the
  source predict branch, but that it should be intelligent enough to
  decide that it should do nothing (except passing on the result) if
  the position-shift is zero.
    


         GSM/LSM (OMS)
	 =============

  -) We should put outselves into a position to convert and use
  NEWSTAR source model (.MDL) files.

  -) AGB tells me that most of the sources for 3c84/300MHz are so
  extended that he uses CLEAN components. How are we going to deal
  with that? 

     -) Combine a group of CLEAN components into an extended
     Cat I component, and solve for its parameters?
 
     -) The Cat II prediction process: Combine all fainter components
     (CLEAN or otherwise) of a small region into a small map, anf FFT
     them together.
 
  -) In any case, most of the 3c84 sources are extended, while we can
  only deal with point sources. We should start thinking about trees
  that can handle slightly extended sources. Perhaps we can get away
  for the moment with the assumtion that the instrumental parameters
  are constant over the source.

  -) We will approach this in a step-wise fashion:

     -) OMS will convert MDL tables into Glish structure.

     -) OMS will convert the regular components into GSM/LSM
     components

     -) JEN will atempt to derive parametrised components from CLEAN
     components.

  -) Finding and updating GSM/LSM sources from residual maps has a
  lower priority for the moment. But 'closing the loop' remains an
  important goal.


----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------


         Some strategic points
         =====================

  -) GVD will keep the MeqSolver, and write specialised classes
        like MeqDFT and MeqUVW.


  -) The following is roughly in order of priority:
     - Domain/cells (OMS)
     - MeqParm (all)
     - Growing-domains experiment (JEN)
     - MeqDFT (GVD)
     - MeqFlagSubtract (OMS)
     - MDL -> Glish (OMS)
     - CLEAN comp -> extended sources (JEN)
     - Chained solvers (ripple-peeling).
     - Predicting extended sources.
     - PSS3 emulation.   (May)
       - Larger trees.
     - Deriving secondary MeqParms (beamshape, ion.screen)
     - Predicting and subtracting Cat II sources.
     - WSRT M.E.
     - Processing strategies (scripts)
     - Closing the loop:
       - GSM/LSM organisation (VO interaction)
       - Residual imaging (facets)
       - Updating the GSM from residual images (trees also) 
     - Writing our article...

  -) If we want a Python interface to the kernel in september, we
  should start relatively soon, because it will take some time for
  errors to die down. However, we want someone from outside our group
  to be the main user (and tester!) of this interface. A desirable 
  first application would be a tree browser (Nijmegen...?)

  -) JEN will ask WNB about further options for the AIPS++ solver.
  (adding/subtracting matrices etc). 




                               =================================
