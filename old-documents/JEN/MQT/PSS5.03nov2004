file: ../MeqTrees/PSS5.03nov2004


      ====================================================
      Input for PSS5 meeting, wednesday 03 nov 2004, 15:00     <---!!
      ====================================================

Participants:
  - RXA: Rob Assendorp
  - MAB: Michiel Brentjens
  - GVD: Ger van Diepen
  - RJN: Ronald Nijboer 
  - JEN: Jan Noordam
  - TAO: Tom Oosterloo
  - OMS: Oleg Smirnov
  - AGW: Tony Willis

  - HAH: Hanno Holties
  - KVS: Kjeld van der Schaaf
  - CMV: Marco de Vos



           Meeting schedule
	   ================

Wednesday 15:00, Multi-Media Room.

Please prepare by reading this thoroughly.


I have written a short report of our adventures at ADASS, plus a
summary of the new insights we have acquired. They will be distributed
tomorrow in a separate document, which will be addressed in after Nov
25th.

Everything we do in the next few weeks should be aimed at giving a
flawless demo of MeqTrees in action. I have split things out a bit,
and it is clear that there is a lot to do!



           ===================
           A water-hole system
           ===================
 
We need a processing/testing/demo environment should be set up in a
'neutral' area, to which all the members of the PSS group (and perhaps
outsiders!) have easy access. This means that we can all continue
using it after nov 25th, for learning/testing/demo etc. I propose to
contribute lots of canned forests to it, and others can contribute
data-sets etc. Lots of good things will emerge around this water-hole.

   -) Repositories:

      -) RXA: A range of (short) calibrator observations (various
      frequencies, some polarised)

      -) RXA: Some suitable 'science' MS's (spectral line)

      -) JEN: Canned forests, with recognisable names, for the various
      demo's. We want to demonstrate how canned forests automatically
      adapt themselves to the given MS, which may have missing ifrs or
      stations.


   -) Some kind of user interface that allows us to select a MS and a
   canned forest, which then do their thing together. 


In a later stage, we will add LSM's, and a GSM to this system.



      =================================================
      Part A: spigot2sink trees of increasing compexity
      =================================================


      ==========================================
      spigot2sink (1) Just uv-data visualisation
      ==========================================


   -) JEN: spigot2sink, with fixed views (nodes) that are visible and
   activated from the top of the browser

   -) AGW: Visualisation nodes (for data collection and for combining
   them):

      a) XX/YY and XY/YX in complex plane (2D)

      b) Spectra (3D)

   -) NB: Is there any way in which we can identify specific dots
   (e.g. outliers) by clicking on them in the plot?

   -) RJN: make an image of the raw data

   -) Question: How do we deal with different freq bands?


   -) General process monitoring and control:

      a) AGW: Activation and de-activation of data collection and data
      combining nodes by clicking on the browser.  Plots are generated
      by these nodes ONLY when activated.  Otherwise, they do not
      burden the system.

      b) RXA: Progress indicator widget (request-domains)

      c) RXA: Domain increment specification (for MeqSink request
      sequence): Use a Glish script?

      d) OMS: Debugger functionality: Breakpoint, pause, step, resume,
      endless loop (see below).  All these functions to be controlled
      from the browser.

      e) OMS: Settable time-delay between requests/iterations.


   -) Synchronisation: Since we use the publish-subscribe system, I
   imaginge that the events just pile up before the python visualiser,
   while the processing goes at normal (lightning?) speed. This is not
   desirable for an interactive mode, where presumably the user will
   want to react to what he sees. How do we synchronise?

   -) NB: Performance is an issue here! Ideally, the plot should
   refresh every second. The human eye cannot follow faster changes,
   but slower will excite rude remarks from the audience. Another
   issue is the response-speed of the browser while visualisation is
   active. Finally, we should demonstrate (somehow) that de-activated
   visunodes do no NOT burden the system in any way.




      ========================
      spigot2sink (2) Flagging
      ========================

Including its visualisation (before and after) and flag-statistics:

   -) JEN: canned spigot2sink forest

   -) (with MeqParm threshold?)

   -) OMS: proper treatment of flags

   -) RXA: Flag summary and statistics?




      ===================================
      spigot2sink (3) Bandpass estimation 
      ===================================

Just solve for a 5th-degree polynomial in the frequency direction.

   -) JEN: canned spigot2sink forest

   -) Spectrum visualisation before and after




      ======================================
      spigot2sink (4) Gain and phase selfcal 
      ======================================


On a bright calibrator, i.e. without LSM.  The 'model' is a 1 Jy point
source in the centre of the field, with a spectral index of -0.7 (?).

   -) JEN: spigot2sink forest, with multiple solvers (ReqSeq)

      a) Straightforward solution for XX/YY phase and gain per
      telescope.

      b) Redundant-baseline solution, followed by a solution for
      absolute gain and phase gradients (align).

   -) AGW: Condeq visualisation for all solvers. The simplest way is
   to have fixed views that show the XX and YY condeqs in the complex
   plane. This uses the same 2D visualisation nodes as above. More
   advanced viewers that show the convergence can be developed later.

   -) RXA: Show solver metrics 

   -) Subtract the 'model' from the corrected uv-data (NB: This is a
   demo of peeling, with one peeling source).

   -) RJN: Make an image of the residual uv-data



      ====================================
      spigot2sink (5) Polarisation selfcal 
      ====================================

On a bright polarized calibrator (3c286 has 10% U at 21cm).

   -) JEN: spigot2sink forest, with multiple solvers (ReqSeq)

   -) JEN: XX*YY - XY*YX = I^2 - (Q^2 + U^2 + V^2)
 


      =======================================
      spigot2sink (6) Manual MeqParm fiddling 
      =======================================


Changing the value(s) of MeqParm(s), while executing and visualising:

   -) Examples of its use:

      a) Fiddling the X/Y phase-zero difference and/or Faraday
      rotation, while visualising XY/YX, or solving for dipole errors.

      b) Fiddling StokesQ, while visualising XX/YX, or solving for
      dipole errors.

   -) OMS: Endless loop, in which the a particular node calculates a
   result for the same (current) request. If the node is a MeqSolver,
   this might be implemented by simply setting the number of
   iterations to infinite, but we need a more general mechanism for
   other nodes.

   -) RXA: An elementary MeqParm fiddling node (see below).





      =========================================
      Part B: Solving for LSM source parameters
      =========================================

Solving for LSM source parameters from residual images, using the
individual source MeqTrees that are stored in the LSM.  This is
stand-alone demo, within RJN's stand-alone environment.




      =================
      Part C: Documents
      =================


Upon reflection, I do not think that it is entirely optimal for Tony,
Rob and Ronald to write a single MeqDummies document together. It is
much more in keeping with the spirit of our locality paradigm, to ask
each to write up his own adventures, successes, tresholds, problems,
hopes and dreams, in his own words.  Of coure they can refer to each
others (evolving) documents, which must all be made available on our
web-page (!?).  I will ask the same from the other newcomers. I will
even write some documents myself, starting with this colection of PSS
meeting convocations.





===========================================================================
==== Appendix
===========================================================================



             Uses of MeqNodeGroup 
	     ====================

Users can access every single node individually, and interact with
it. However, most of the time he will want to interact with specific
(groups of) nodes, e.g. for visualisation or solving etc. Therefore,
the tree designer may use the MeqNodeGroup node to pre-define such
groups, which are then accessible as separate root nodes via the
browser.
 


             Canned forests
	     ==============

Generating complex trees will be an advanced topic for some time to
come. Moreover, the generation of a large forest from Glish or Python
will be slow. Therefore, we should offer the user a range of 'canned'
C++ forests for specific applications, which can be quickly loaded
from a file.

   -) Adapt itself to a given MS

      -) Check whether the forest represents a suitable M.E. for the
      observation?

      -) Non-available ifrs (spigot, sink, nodegroups). 

      -) Non-available stations: What does the solver do if there is
      no information about a solvable MeqParm? SVD.

   -) Adapt itself to a given LSM (peeling, Cat I/II)

   -) Replace specific nodes with other nodes/subtrees. This allows
   people like Sanjay to experiment with his own Cat II prediction
   node, without having to generate a complex tree himself.




           Manual fiddling, while solving
           ==============================

I would like to be able to halt the system (at a breakpoint), and then
re-execute a selected node with its current request, while I manually
fiddle the value of one or more MeqParms. For the moment we can just
re-execute once, but in the future we should offer automatic
repeating, possibly with a time-delay each time.

I have a particular experiment in mind, where I solve for dipole angle
errors and ellipticities, while fiddling the WSRT X/Y phase zero
difference (PZD). I have a hunch that it might be possible to solve
for these parameters with an unpolarised source. Whether this hunch is
true or not, the demo will blow them away, and they will be braying
for more.

The obvious candidate node for re-execution is a solver, of course,
but there is no reason why we should not offer this for all nodes.
It should be trivial to implement: Just allow Node.Execute without a
request. This will generate an error if the node does not have a
current request in its state. 

It should be possible to control this from the browser, just like
halt/resume/breakpoint etc. (What is the status here?). While we are
at it, we might implement the option of a time-delay of up to a second
between successive requests from the sink. We also need a request
monitor, which visualises the progress through time/freq land. 

The MeqParm value fiddler is a first step towards a full-scale MeqParm
visualiser and control tool. We can only think about the latter after
we have a better idea about MeqParm operation. What we need for this
experiment is a little widget that pops up when you click on a MeqParm
node in the browser, and that gives access to its 'current polc',
i.e. the one that it has in memory. For the moment, it should be
sufficient to only fiddle the value of its c00 coefficient.

It should be possible to fiddle the value of any MeqParm, irrespective
of whether they are solvable or not! 








                  ========================================




















