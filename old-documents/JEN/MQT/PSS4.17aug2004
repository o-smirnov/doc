file: ../MeqTrees/PSS4.17aug2004

News:

  -) Tony Willis: Will arrive on 7 sept
     TAO writes 'requirement document'

  -) RS recruits for PSS/WSRT/LFFE?

  -) SKA software task force: Conference in Dwingeloo in April 2005
                              "Wide-field imaging"



           uv-coordinates (GVD/OMS)
           ========================

I understand from OMS that he and GVD are now ready to provide us with
nodes that calculate u,v,w coordinates from the station positions in
the MS. For Haystack data and WSRT data. 

This is a big step towards the 'PSS4-tests' (repeats of PSS3 results)
that we want to conclude before the end of this months: solve for
Haystack source positions, fluxes and instrumental phase errors. The
latter is most interesting, because it has never been successful with
PSS3, despite herioc efforts to dig through the hand-generated
M.E. implementation.
 





           Tree-building status (JEN)
	   ==========================


The tree process goes in stages. An unexpanded spigot2sink tree (for
the successive subtraction of un unspecified number of peeling
sources, XY-correlation only) looks like:


  **********************
 @ ** Record: defrec :  ( <MeqSubTree>:  spigot2sink_subtract_peeling)
 @   - class               :  string[1] = 'MeqComposer'
 @   - name                :  string[1] = 'spigot2sink_subtract_peeling[s1={s1}][s2={s2}]'
 @   - children            :  record[1]
 @     - #1                  :  record[5]
 @       - class               :  string[1] = '.MeqSubTree'
 @       - name                :  string[1] = 'jen_restorePhaseCentre[s1={s1}][s2={s2}][c=XY]'
 @       - children            :  record[1]
 @         - #1                  :  record[5]
 @           - class               :  string[1] = '.MeqSubTree'
 @           - name                :  string[1] = 'peelingUnit_XY[q={q}][s1={s1}][s2={s2}]'
 @           - children            :  record[1]
 @             - #1                  :  record[6]
 @               - class               :  string[1] = 'MeqSelector'
 @               - name                :  string[1] = 'MeqSpigot[s1={s1}][s2={s2}][c=XY]'
 @               - children            :  record[1]
 @                 - #1                  :  record[9]
 @                   - class               :  string[1] = 'MeqSpigot'
 @                   - name                :  string[1] = 'MeqSpigot[s1={s1}][s2={s2}]'
 @                   - children            :  record[0]
 @                   - link_or_create      :  boolean[1] = T
 @                   - aux                 :  record[2]
 @                     - datatype            :  string[1] = 'complex'
 @                     - expr                :  boolean[1] = F
 @                   - input_col           :  string[1] = 'DATA'
 @                   - station_1_index     :  string[1] = '{s1}'
 @                   - station_2_index     :  string[1] = '{s2}'
 @                   - default             :  record[8]
 @               - link_or_create      :  boolean[1] = T
 @               - index               :  integer[1] = 2
 @               - aux                 :  record[2]
 @                 - datatype            :  boolean[1] = F
 @                 - expr                :  string[1] = '{#1}'
 @           - link_or_create      :  boolean[1] = T
 @           - aux                 :  record[3]
 @             - chain               :  string[1] = 'q'
 @             - datatype            :  boolean[1] = F
 @             - expr                :  string[1] = '{#1}'
 @       - link_or_create      :  boolean[1] = T
 @       - aux                 :  record[2]
 @         - datatype            :  boolean[1] = F
 @         - expr                :  string[1] = '{#1}'
 @   - link_or_create      :  boolean[1] = T
 @   - aux                 :  record[2]
 @     - datatype            :  boolean[1] = F
 @     - expr                :  string[1] = '{#1}'
  **********************


Note the following features:

   -) The MeqComposer root node has only one child (XY). It can have
   up to four. for all correlations.

   -) The correlation (XY) is a qualifier if all correlations use the
   same class (e.g. MeqSpigot[c=XY]). Otherwise, it is part of the
   class name (e.g. peelingUnit_XY).

   -) The station qualifiers [s1={s1}][s2={s2}] will get specific
   station numbers or names (they will be 'qualified') at C++ node
   creation time. Note that fields like 'station_1_index' etc (see
   MeqSpigot) will be filled in at the same time.

   -) If a node has a 'chain' field (see the node 'peelingUnit_XY'),
   it may be duplicated into a chain of copies of itself, with
   different qualifiers: [q=1], [q=45], [q=17], q=[3c84] etc. In the
   case of peeling, the number, order and names of the peeling sources
   are known in a later stage.

   -) The names (without qualifiers) of the .MeqSubTree nodes refer to
   .MeqSubTree files, which contain the relevant subtree defrecs. The
   recursive .expand() function reads those files and replaces the
   .MeqSubTree nodes with subtrees. If the .MeqSubTree node has
   children, like the example above), these are attached to a special
   node of the subtree with class .MeqSubTree_input.

   -) Since the MeqSpigot node deals with visibilities, its datatype
   is always complex. In a later stage, the datatype field of all
   nodes will be filled in. The rule is that a node is 'complex' when
   at least one of its children is complex. Complex MeqParms are
   automatically converted into a MeqToComplex node with the same
   name, with two MeqParm children with name prefixes real_ and imag_.
   NB: The C++ node generation does NOT use the datatype info.

   -) I have trees for the 'modes' simulation, subtraction, and
   solving, each with a version for peeling and 'classicSelfcal'.

   -) I have a simple version of a three-source LSM, which provides
   one or more subtrees for the various sources. This is roughly in
   line with the GSM/LSM discussion below.


Finally, I have made another step towards the fully automatic
generation of MeqTrees: The function that generates .h/.cc files for
user-defined nodes (with possibly very complicated, but correct math
expressions) also generates a new Makefile.am file with all the
class-names. 







           GSM/LSM/MEPtable (TAO/JEN)
	   ==========================


TAO and JEN have discussed the matter, and have come to some new
insights:

   1) The Global Source/Sky Model (GSM) contains the following
   components:

      a) A regular MeqTree MEP-table for the source parameters with
      names like UCD_StokesQ[q=2345]). Each parameter can have one or
      more funklets (formerly: polc). One funklet per table row.

        - Note that the parameter name has a unique source qualifier
        [q=2345]. This can be a string too: [q=3C84]. Perhaps the
        qualifier value should ALWAYS be a string, even if it is
        numeric.

        - Another format may eventually be selected for storing
        funklets in a GSM, but in this stage it seems easiest to use
        the MeqTree MEP table format.

      b) A table of source images (4D cubes: RA, DEC, freq, pol).
      Nothing more will be said about them at this point.

      c) A MeqTree list, which associates each tree name with a tree
      type in (d). At this moment, I can see the need for 1-4 trees
      per source: 
         - GSM_StokesI[q=xyz]
         - GSM_StokesQ[q=xyz]
         - GSM_StokesU[q=xyz]
         - GSM_StokesV[q=xyz]
      These are standard names. which may be used in user-defined
      MeqTrees (e.g. see predictVis.g).

      d) A MeqTree repository of 'unqualified' subtrees. It contains
      one copy of each possible type, in the form of a hierarchical
      record.  These records must be translatable to Glish or Python
      records, for inclusion into larger trees. Their nodenames are
      unqualified [q={q}], and their leaves (MeqParms) refer to source
      parameters UCD_StokesQ[q={q}] in the MEP table. Their root nodes
      are named GSM_StokesQ[q={q}] etc.


    NB: The subtrees stored in the GSM may refer to nodes like MeqUVW
    that are not defined in the GSM, but which are expected to be
    available in the C++ node repository. The situation will arise
    when predicting for weakly extended sources, and even more for
    sources that are so extended that instrumental effects are no
    longer constant over them. All this requires some extra thought.




    2) The Local Source/Sky Model (LSM) is an ordered subset of the
    GSM (usually in order of flux, for peeling). It contains the
    relevant subsets of the GSM components a,b,c,d (see above). In
    addition, it has an interface that allows us to get the following:

      -) An ordered list of LSM source qualifier values [q=xyz]. This
      is used to generate peeling trees with the correct number of
      peeling stages.

      -) A Glish/Python subtree defrec named e.g. GSM_StokesU[q=xyz].
      When such a request is made, the tree name is found in the
      MeqTree list (c), which allows us to obtain the relevant
      unqualified tree from the MeqTree repository (d). The node names
      are then 'qualified' ([q={q}] -> [q=xyz]).

      -) Current values for named UCD source parameters. 


    NB: I expect that RJN will interface with the LSM when updating
    Cat II sources from residual images. First of all to know at which
    position sources have been subtracted. But I suspect that he will
    be able to make good use of the source subtrees to solve for
    source parameters....






++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Some stuff left from last time.....




         Development of Oleg's Python widget(s)
	 ======================================

   -) This is the 'official' one, which is always available with the
   kernel, and is guaranteed to work always. It has limited
   functionality.

   -) NB: User's should be encouraged to develop their own!

   -) Allow plugin's for inspecting specific nodes (e.g. MeqParms)

   -) Get subsets of nodes by regex names

   -) 2D/3D plots of vells, possibly in a clipboard mosaic.

   -) Pictorial Tree Browser 

   -) Interrogate a node with a given domain/cells. Gui for specifying
   a request.




         GSM source models in the form of images 
	 =======================================

For the reduction of 3C84, we need to be able to deal with complex
extended sources. In addition, we would like to use calibrator models
in image form, as produced by GMRT/VLA. Both require that we implement
source models in the form of gridded images from the start. 

  -) FFT a source image, assuming that it is in the field centre.
  Store the result, and make it available to multiple meqnodes, each
  of which gets values for a its current (u,v,[w]) values (f,t).

  -) CLEAN a residual image, to obtain a source image model.

  -) Import source images from elsewhere (including NEWSTAR CLEAN
  components).

  -) Also: Collect parametrised models of (Cat II) sources within a
  given sky patch into an image, and predict.


                      ============================================





























