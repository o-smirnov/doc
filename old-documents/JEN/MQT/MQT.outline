file: .../lofar/PSS/MQT.outline


Outline of the MeqTree program
==============================
J.E. Noordam, feb 2005


        The MeqTree module
	==================

  -) Urgently needed: A package that can implement an arbitrary
  Measurement Equation (M.E.), and solve for arbitrary subsets of its
  parameters. The MeqTree module is one way to achieve this.

  -) The MeqTree kernel contains 'forests' of trees (graphs, really)
  that consist of nodes. The latter calculate values for the cells of
  a domain, which is usually a rectangle in freq-time space. Whenever
  a node receives a request, it passes it to its children and waits
  for the results. It then combines these into a result of its own.
  Most nodes perform mathematical operations, but there are special
  nodes for generic operations like solving, flagging etc. Leaf nodes
  have no children, but use other information to satisfy requests.
  Examples are spigot nodes that access data, or parm nodes that
  represent M.E. parameters. A forest may have many thousands of
  nodes.

  -) The MeqTree kernel must be interfaced with other modules to form
  a reduction package. At this moment, it interfaces with AIPS++,
  which offers sufficient functionality.

  -) Some MeqTree features are listed in the appendix.



        Application to radio aperture synthesis
	=======================================

  -) The MeqTree module can implement the highly complex Measurement
  Equations that are required by the new generation of giant radio
  telescopes. It can also implement better M.E.'s for the existing
  telescopes.

  -) Boundary condition: It will be a great challenge to handle the
  very large data volume from LOFAR and other new radio telescopes
  (SKA, ALMA). Some new ideas are needed to achieve this.

     1) Peeling: Reduces processing by a large factor (3-4 orders of
     magnitude) by tackling the sources/patches one-by-one, after
     shifting the phase centre to their position. The latter allows
     prediction at a very much lower (f,t) resolution.

        -) NB: Forms of peeling have been attempted by experienced
        radio astronomers in the existing packages. It clearly works
        very well, but is very painful since these packages have not
        been designed for it.

     2) Subtracting the many sources of the Local Sky Model (LSM)
     without knowing their individual details. Since this operation
     will probably be the real bottleneck (rather than selfcal), any
     gains in efficiency here will be important.

        -) NB: This involves interpolation of 'uv-bricks'. It turns
        out that similar tricks can be used to do selfcal without an
        LSM (exploiting 'weak' redundancy), eliminating contamination
        by other sources when peeling, transient detection, EoR
        detection, etc.
  
     3) Other ideas....?


  -) Ionospheric model. If there is not enough S/N to solve for
  individual telescope phases, there may be enough to solve for a
  single phase gradient over the array.  A 'minimum' ionospheric model
  does not concern itself with the internal structure of the
  ionosphere, but only describes its effect on the observations with
  the minimum nr of parameters. These will include the station
  positions and the viewing direction, and perhaps the TID velocity
  and direction.






========================================================================

  Some MeqTree features:

     -) The kernel is policy-free, in the sense that it does not know
     anything about the application.

     -) At present, it interfaces with the scripting languages GLish
     and Python.

     -) Reuse: The kernel interfaces with other modules, especially
     those of AIPS++ (tables, imaging, images, measures, glish).

     -) M.E. parameters are always functions of freq and time, even if
     they are not. They are stored in the form of zero or more polcs,
     i.e. sets of polynomial coefficients with a certain validity
     domain. These coefficients are the real M.E. parameters, since
     they are the ones that are solved for. Other functions than
     polynomials (e.g. gaussians) are supported too.

        -) This approach makes maximum use of the inherent continuity
        of many parameters in frequency and/or time.

     -) Canned forests. The current C++ forest may be saved (including
     its current state!) in a binary file, and re-loaded into the
     kernel at a later time. It may also be sent to another user
     somewhere else in the world.

     -) Adaptability: A canned forest is usually designed for a
     particular type of observations with a particular telescope. But
     it can be designed in such a way that it will automatically adapt
     to a given data-set (which may have missing telescopes) and a
     given Sky Model.

     -) User interaction is possible with each node, either from the
     MeqTree browser, or from a script or command-line. Thus, the
     state of any node may be inspected (e.g. visualised) and
     modified. To facilitate this, MeqTree execution may be paused,
     stepped and resumed.

     -) Visualisation. Every node may be inspected, or it may be made
     to publish each new result. Special data-collection nodes may be
     used to design problem-specific views into a tree. Especially
     useful is the 'condeq-whatcher', which monitors the input and
     output of solvers in a policy-free way.

     -) Modularity: Because all nodes have the same simple interface,
     and the kernel interface and operation will not change a lot,
     multiple people can make contributions, without getting in each
     others way. Users may create their own node-classes, browser
     plugins, canned forests, MeqParm tools (using AIPS++ tables),
     control scripts, etc. They can also exchange such things among
     them. Successful examples of such a mode of operation are MatLab,
     Python, Linux.

     -) Locality: A node is only aware of its children, and the
     (sequence of) requests it gets from its parents.

     -) Self-optimisation: A node can dynamically adjust its caching
     strategy to optimise the product of memory use and processing.
     A subtree may also duplicate itself to avoid request clashes.


The MeqTree module is used to develop prototype algorithms, which will
ultimately be re-implemented on LOFAR machines, using LOFAR software
technology. The (policy-free) MeqTree module will continue to lead an
independent existence for the WSRT and other existing telescopes. It
may also be used for other applications (e.g. the new generation of
optical instruments).



                    ===============================================
