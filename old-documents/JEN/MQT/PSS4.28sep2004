file: ../MeqTrees/PSS4.28sep2004


      ==================================================
      Input for PSS4 meeting, tuesday 28 sep 2004, 13:15
      ==================================================



            Things are heating up
	    =====================

The long years (literally!) of PSS preparation are coming to a head.
On the positive side, we have a small enough team of the right people
(the result of a little bit of foresight, and a lot of luck). Our
MeqTree paradigm also appears to be holding up well in practice,
i.e. we seem to be successful in thinking up solutions in priciple for
a wide range of processing issues.  But there is a lot to do before
the end of the year, and we will have a continuing number of
spectators....


    
            PSS Open Day
	    ============


The PSS Open Day will be held on Thursday 30 Sept 2004.  Dwingeloo,
Colloquium Room Invitations have been sent by Michiel van Haarlem.

Draft program:

  10:30: Arrival, coffee

  10:45: Jan Noordam: Setting the stage

  11:15: Oleg Smirnov: The PSS Kernel (+ demo)

  12:30: Lunch

  13:15: Tony Willis: Visualization

  13:45: Ger van Diepen: The PSS3/PSS4 tests

  14:00: Ronald Nijboer: Residual Images

  14:30: Tom Oosterloo: peeling

  14:45: Hanno Holties/Tom Oosterloo: The WSRT/LFFE program

  15:15: Michiel Brentjens: The 3C84 challenge  

  15:30: Tea and discussion

  15:45: Taxi leaves for Hoogeveen station


Motto: "De enige stijlvorm die beklijft is de Herhaling"
                                 (H.W. van de Hulst)



	   PSS3/PSS4
	   =========

There has been great progress last week. GVD will report on this on
thursday, and produce his written log. Next week we will try the phase
solution, and after that we will declare PSS4 finished.


           Visualisation (AGW)
	   ===================

AGW will implement a simple 'demonstration' tree, with a single
MeqSolver, MeqCondeq. On the one side of the latter will be a subtree
that adds (MeqAdd) a MeqFreq and a MeqTime. This guarantees a result
that changes in freq and time. On the other side there will be a
solvable MeqParm with a (2x2) polc default value. The input request to
the solver will need a domain of at least 2x2 cells, of course. This
tree will be VERY useful to demonstrate the working of the kernel!

Update of Tony's list of priorities:

  -) First of all we want to be able to plot the vellsets in a node
  state/result record, as part of the browser. A simple color-coded
  plot is sufficient in this stage. Tony will ask Michiel B for his
  scheme to plot the real and imaginary parts of complex numbers as
  different colors.

  -) Basic Request Editor. Invoked by clicking on a node. It pops up
  with its current request values as defaults. After editing the
  request, the node may be re-executed. (NB: It is basic in the sense
  that this first version can only deal with regular cells. Tony will
  upgrade it to general cells when in Penticton).

  -) A 'Condeq Watcher', which somehow presents the results of all
  Condeqs attached to a specific solver, and their convergence (or
  lack thereof) towards zero with successive iterations. Entirely
  policy-free.

NB: Oleg is adding new features to his browser every day. I am very
pleased....



           Writing custom MeqNode classes
	   ==============================

The MeqKernel has a set of built-in node classes (with names starting
with Meq). In addition, it is already possible to generate .h/.cc
files for customised MeqFunc classes with different math expressions.
I would like to pioneer the next 'step towards freeedom', i.e. the
writing of customised node classes by a savvy user like MAB. He plans
to write a mab_flagger class, which works on isolated snippets
(i.e. it calculates its threshold from the snippet data itself).
Obviously, the threshold will become lower as more flux is peeled
away, and more RFI is flagged away. OPtionally, he will write a
version that also has MeqUVW as children, so it can take the baseline
length into account.

Oleg will provide Michiel (and Tony) with an .h/.cc example/template.



           Bringing in the new RS people
	   =============================

We have agreed that the RS people that will take over from Tony must
have read and understood(!) Oleg's PSS document before Tony returns in
November. 

RJN will join the WSRT 'self-help group, and help them to produce
images from MS's in AIPS++. HH will look into the organisational
aspects (hardware as well as a designated program manager) of a
display system above the coffee machine.


           GSM/LSM
	   =======

For the moment, JEN will do the LSM (in Glish). It interfaces with the
kernel, the residual images (RJN) and the GSM (TAO).

TAO will concentrate on the step-wise development of the WSRT GSM.
This includes the ability to pull subsets out for the LSM.

One of the issues is the difference between GSM and LSM.



           Predicting (groups of) Cat II sources    
	   =====================================

The scheme is still on JEN's whiteboard. It has raised the issue of
generalising the domain dimensions (beyond just freq and time), and
what is the best moment to implement it if desirable (We do have a
working sytem to deliver!).



	   Computing power.
	   ================

Now that we are moving towards a real (WSRT) system, we should start
thinking about the kind of machines that will be needed. A quick
(but conservatve) calculation for WSRT:

  - 91 ifrs times 4 -> ~ 400 corrs
  - 10 Cat I sources per field, with 30(?) nodes per 'peeling subtree'  
  - 1 Cat II patches per field, with 30(?) nodes per 'peeling subtree' 
  - A total of 400*(10+1)*30 = 132.000 nodes

OMS tells me that lofar10 (memory) may be able to handle 60.000 nodes.
Hew also tells me that it will take him a minimum of 3-4 weeks to
adapt OctoPussy to work on a cluster. In the meantime, there are new
nodes to design, and the execise of the PSS system on real data will
also require attention.....

   


                      ==================================




























