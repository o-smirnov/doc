
Hi Tony,

First of all: Harvey is back on monday, so I will drive him into a
corner then.

I am glad to see that you have launched into the new task with your
usual pre-war commitment. However, after discussions with Oleg and a
walk in the woods, I think we are thinking along slightly different
tracks.

What I had in mind is simply a hierarchy of 'data-primitives' that can
be plotted separately, or combined into a single plot. Each visunode
class would do its own specific thing: gathering data and information
from its children, and using this to generate its own set of
primitives in a record. If one or more chilren of a visunode are
themselves visunodes, it would just combine the plot-records of their
children, and attach their own primitives to the combined plot-record.
I endeavoured to illustrate this in the example plot-record that I
sketched in my wednesday mail.

The only two things we need, in my opinion, are a system of such
primitives, and a list of the visunode types we need now and later.
For the former, my simple proposal would probably suffice, but I agree
with Oleg that a little search on the web will produce many examples
of systems that are much more complete, and much better thought out.
Let's only try to adopt a reasonably mature one, that is being used
extensively. If such a system uses XML is OK with me in principle, as
long as it produces a data-record that can be displayed (and browsed
with the browser, of course).

I assume that your remarks about 'health' and 'explore' groups of
visnodes would come under the heading of visnode types. I am not sure
that we need to make that distinction here. The user can decide which
visunodes he wants to run continuously, and the rest would just sit
there and wait to be invoked via the browser. 

Perhaps you mean that a 'health' node also takes some warning action
like ringing a bell (which is just another plot-primitive by the way,
just like a change of color of the display if something is wrong). 
However, this would make it more than just a visualisation node, since
it would require it to have a set of rules by which it could decide
that something is wrong, which be implemented in a policy-free way,
just like the flagger. This is aninteresting thought, which I will
mull over during the weekend. 

In any case, I am really interested in having some simple visunodes by
next wednesday, using the simplest set of primitives that you can
rapidly absorb. We need them for our demo on nov 25, and we need to
get some experience. If we do not like them, we can always write a new
set, and throw away the old ones. This is the great thing about our
system, where all functions are localised in nodes with a uniform
interface, which can easily be replaced. (Only Oleg is required to
maintain overall consistency, which is a big struggle for the poor
chap).

What about it? Could you

 - Scour the net to find a suitable set of primitives.

 - Make a list of visunode types that you think we need now.

 - Experiment with displaying the plot-record from its state-record
 outside the Kernel.

 - Have something we can look at by next wednesday?

Cheers,
Jan


 



========================================================================
From: Tony Willis <Tony.Willis@nrc-cnrc.gc.ca>
To: noordam@astron.nl, <smirnov@astron.nl>
Subject: thoughts on visualization
Date: Thu, 14 Oct 2004 15:42:56 -0700 (PDT)

Some thoughts ....

Firstly I would divide visualization into two groups, call them 'health'
and 'explore'. Health components would essentially tell us if the system is 
healthy - in our case, 'healthy' presumably means that solutions to the
systems of matrix equations are getting better with each iteration. I
think that the system should be continuously displaying 'health' even
if nothing else as a positive feedback to the user that something is
going on. Basically I see the 'health' parameters as things like
the mean and RMS of a Condeq vells array - the mean should be going toward 
zero and the RMS should be getting smaller as iterations progress, correct?
I imagine that Oleg can think of other 'health' parameters - the aips++
fitting functions must be returning various parameters, statistics, etc.

In our simple Condeq watcher with say 8 children, the 'health' display
would just be a simple 1-D plot of mean and RMS error for each node. 
I certainly don't see the 'health' display as showing enormous numbers
of 2-D plots etc.

In my opinion some kind of health display should always be up and running.
I suspect we probably want/need to do some considerable custom programming
of the 'health' display since its very specific to this application.
Jan / Oleg - any more detailed thoughts as to what the 'health' display
might show?

If the health display indicates that some solution node is misbehaving
then we enter the 'explore' mode to find out whats going. The basic idea
would be just that the user clicks on the 'health' display at the location
of the plot value with bad RMS etc - causing a corresponding visualization
node to start processing / gathering data for a detailed 'exploration' 
display of the 'bad' nodes contents.

Oleg wrote:
> A Result object is also a DataRecord, so you could add a rider
> sub-record and populate it with any data structure you deem suitable,
> and have it automagically appear in Python-land with no further effort.
> I would say laying out the data structure is the cirtical part here.
> Essentially, you're designing a hierarchical language to describe data
> displays -- and this had to have been addressed before. So we should
> definitely research exisiting software, at least for inspiration. Jan's
> proposed record staructure is a start, but we need to give this more
> thought. I would especially pay attention to keeping "data" and "plot
> attributes" distinct and orthogonal.

There's a freely available hierarchical language for describing anything - XML.
Jan's proposed data display record structure (or similar thing) is
certainly describable in XML. The visualization node could encode the
display parameters in XML and, if we wanted, insert at the appropriate 
spot XML from child nodes, etc. The raw data to be plotted 
could be directly included
in the XML if we did base64 encoding, or probably better, since Oleg
already has a transport layer, we just have the XML contain a reference
to the appropriate node containing the binary data. An XML parser
in the browser extracts the XML plotting specification and translates
the plotting specs into a format that HippoDraw or ROOT could understand, 
gets the binary data, and sends plotting specification and data to be
plotted to the appropriate package. There are certainly enough Python
packages around for extracting specifications from XML etc. Since
most of this work involves plotting of standard data structures such
as vectors and arrays I hope we can make maximal use of external
packages such as HippoDraw and Python to do the plotting. If python
performance becomes an issue here, then we could look at creating
compiled C++ clients - this is possible with both HippoDraw and ROOT.

(Of course, while scouring the Net for information relating to
hierarchical displays, designs, etc, I came across another very
nice visualization package called Matpack.
see http://www1.physik.tu-muenchen.de/~gammel/matpack/

However, this package does not contain any python interface. It might
well be useful if we decided C++ display clients were needed. One
thing I noticed is that it has a really nice way of plotting complex
arrays (better than the Brentjens method). By the way, unfortunately,
I have concluded that HippoDraw cannot digest the Brentjens method in
any present off-the-shelf 'Hippo' Display. I will have to discuss this
with the developer.
 
A lot of work has been done in the area of hierarchical data displays
particularly in the area of Geographical Information Systems (GIS) 
(as one can see from e.g. Web 'map' programs where you can zoom in
to see increasing amounts of detail). I'm not yet sure how much of this
is useful to us (and whether or not ideas from GIS could be interfaced
into Oleg's system). But anyway a useful starting point seems to be 

http://www.geoinfo.tuwien.ac.at/publications/formerPersonnel/timpf/diss/ch1/chapter_1.htm

and succeeding chapters.

Anyway, I think I shall go and spend some time reading through the Condeq.cc
code.

Cheers

Tony

___________
Tony Willis
National Research Council   Tony.Willis@nrc-cnrc.gc.ca
Box 248                     (250)493-2277
Penticton, BC  V2A 6J9      fax: 493-7767
Government of Canada        Gouvernement du Canada
