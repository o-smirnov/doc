file: ../PSS/MQT.28sep2005


      ==============================================================
      Input for MeqTree (MQT) meeting,  wednesday 28 sep 2005, 15:30  
      ==============================================================

Participants:
  - RXA:  Rob Assendorp
  - GVD:  Ger van Diepen
  - MXM:  Maaijke Mevius
  - RJN:  Ronald Nijboer 
  - JEN:  Jan Noordam
  - TAO:  Tom Oosterloo
  - OMS:  Oleg Smirnov
  - AGW:  Tony Willis
  - SBY:  Sarod Yatawatta
  - SvdT: Bas van der Tol

For information:
  - MAB:  Michiel Brentjens
  - WNB:  Wim Brouw
  - AGB:  Ger de Bruyn
  - MvH:  Michiel van Haarlem
  - HAH:  Hanno Holties
  - PXK:  Paul Kemper
  - JXR:  John Romein
  - KvdS: Kjeld van der Schaaf



           Meeting schedule
	   ================

Wednesday 15:30, Multi-Media Room.

Please prepare by reading this thoroughly.



           ================
           Topics this week
	   ================

 - ADASS

   - Posters (3)

   - Demo's (OMS)


 - CDR: The latest (16 Nov?)

   - We must convince beforehand

   - Operational: WSRT cps (calibrator reduction)

     - Bugzilla entries have been assigned to the WSRT_cps milestone

   - Demonstrated: 3c343 and beyond

     - pointing drifts (AGB)

     - slightly extended source?

     - LSM with extended sources (SBY/RJN)

   - WHAT (SBY/JEN)

   - Active: the elite inner circle

 - WSRT preparations for MeqTree (RXA)

 - MeqDataCollect (AGW)

   - Flagger 

     - when blinking, change the color range...

     - ignore flags when calculating color range

   - Visualising spectra: what is what (i.e. which ifr?)

     - When combining corrs, strange things happen....

     - axis labelling (1D, 2D)  

   - Unwanted zooming when releasing middle button (very irritating)

   - Where is the second (white) cross-section?


 - MeqHistoryCollect nodes (AGW)

   - urgent (strong selling point for operational system)

   - status 

   - related topic: flag report


 - LSM (Sarod will demo his latest embellishments)

   - we should be getting close to a MG_JEN_peel.py

 - WHAT (Sarod will explain)

   - Stand-alone

   - Combined with WSRT








       =================
       Processing speed:
       =================

After accuracy, speed is the strongest seller! Conversely, if MeqTrees
are percieved to be slow, nobody will even look at all the wonders we
have to offer. We now have a system in which things work pretty
nicely, but I only want to offer it for serious use after a first
round of removing bottlenecks. Fortunately, there is a lot we can do:

   - Profiler (OMS): very useful!
  
   - Tree optimalisation (strippers, means)

   - Use last solution as starting point for the next

     - Can get away with many fewer iterations (1)

     - Built into MeqParm (MXM)

     - More MeqParm intelligence?

   - Tiled solutions:

     - Requires inversion of block-diagonal matrix (MAB)

     - More solver intelligence (policy-free, of course)

   - Re-sampling (especially in freq direction): (SBY)

     - special case first, general later

     - links with uvbrick and patch composer

   - NB: When comparing with other packages:

     - MeqTree can do the entire frequ band, provided we put in the
       correct instrumental/source model (SI, 17 MHz, etc) 

     - Others can do one freq channel at a time

   - Use optimised build (factor of 2?)

   - The new machines (already present)

   - Parallelisation (OMS, january)

   - Tool for mass-disabling of groups of nodes (?)

     - For instance visualisation

   - More localised intelligence (so that the optimal solution is
   reached more quickly, without all kinds of user interaction)

     - Flagging (at various levels)

     - Ignoring ifrs whose condeq results are too wild?

     - Etc

   - NB: What can we visualise in order to create a strong impression
     of speed?





       =================
       MG_JEN_cps series
       =================


file: .../LOFAR/Timba/WH/contrib/JEN/MG_JEN_cps.txt

       Some considerations for an operational system for 
       WSRT calibrator (cps) reduction
       J.E.Noordam, Maaijke Mevius, 26 sept 2005


We propose to provide a basic series of MG_JEN_cps_XYZJones.py scripts:

 - MG_JEN_cps_BJones.py              bandpass estimation
 - MG_JEN_cps_GJones.py              complex gain estimation
 - MG_JEN_cps_GDJones.py             complex gain and polarisation leakage
 - MG_JEN_cps_GIJones.py             complex gain ionospheric phase (MIM)
 - MG_JEN_cps_EJones.py              primary beamshape estimation
                                     (this could include pointing!)
 - MG_JEN_cps_inspect.py             inspection
 - MG_JEN_cps_tsys.py                apply Tsys
 - MG_JEN_cps_flag.py                basic flagging 
 - etc

Obviously, the WSRT operations group should 

Such scripts may be run in two modes:

   1) From the browser. The user may edit the script, especially the
   record of cps_ctrl parameters at the top. 

   2) From the command-line (or a pipeline control script), specifying
   non-default values for the cps_ctrl parameters. NB: It should also
   be possible to give a record of parameter values....


Here is an example of such a list of control parameters:

   # Some alternatives:
   # punit = 'unpol'
   # punit = '3c147'
   # punit = 'RMtest'
   # punit = 'QUV'
   # punit = 'QU'
   # punit =  'SItest'

       MG = record(script_name='MG_JEN_cps_BJones.py,
                   last_changed='d27sep2005',
	           stations=range(7),       # specify the (subset of) stations to be u
                   punit='unpol',           # name of calibrator source
                   parmtable='cal_BJones',  # name of MeqParm table
                   fdeg_Breal=3,            # degree of freq polynomial
                   fdeg_Bimag=3,
                   tdeg_Breal=0,            # degree of time polynomial
                   tdeg_Bimag=0,
                   num_iter=3,              # number of solver iterations per snippet
                   flag_before=False,       # If True, insert a flagger before solving
                   flag_after=False,        # If True, insert a flagger after solving
                   visu_rawdata=True,       # If True, insert built-in view(s) 
                   visu_solver=True,        # If True, insert built-in view(s) 
                   visu_corrected=True,     # If True, insert built-in view(s)
                   trace=False)             # If True, produce progress messages  


  MG.stream_control = record(ms_name='D1.MS',
                             data_column_name='DATA',
	                     tile_size=1,
                             channel_start_index=10,  # ignore the first 10 channels
                             channel_end_index=50,    # NB: use -10 here? (OMS...)
                             output_col='RESIDUALS')


An important issue is the naming of MeqParm tables. This must be done
in such a way that the user needs to specify as little as possible,
while still allowing full flexibility. We propose the following
scheme:

  1) The MeqParms of each type of Jones matrix (XJones) will be
  associated to a MeqParm table with the name: 'cps_XJones.mep'
  This name is specified in the cps_ctrl parameters. The prefix
  cps_ marks it as a table with calibrator values.

    a) Since the parmtable name does not have a path, the system
    assume that it is in the current directory. So, if the script is
    executed on a calibrator observation (MS) in a (hypothetical) WSRT
    calibration-directory, its resulting funklets would be added to
    the existing parmtable, which contains the XJones results over a
    long period. Results for different times and freq-bands would be
    automatically distinguished by their validity domains. Such
    parmtables could be used by the observatory to study the long-term
    behaviour of the instrument.

    b) If the script is executed on a calibrator observation (MS) in a
    'project' sub-directory, its results would be written in a local
    XJones parmtable in that directory. This parmtable would contain
    the results from all XJones calibrations, which may be before,
    after and during the science observation. 

    c) Assuming that the science MS is in the same directory, the
    script that reduces it and wishes to take calibrator values into
    account, can simply refer to such cps_XJones parmtables. If they
    are not available, an empty table will be created, and the system
    will use the default funklets for the specific MeqParms.



NB: The default is that, when solving for a new snippet (domain), a
MeqParm will first look whether it has a relevant funklet in its
parmtable. If not, it will use its current funklet, assuming that this
represents the solution of the last snippet, and is thus a good
starting value (this allows num_iter to be small, even as low as
1). In the last resort, the MeqParm will use its default value as
starting value.

NB: However, if something has gone wrong, and the script is run again,
it will start from the corrputed MeqParm values in the parmtable.
There should be an easy way to remove it....


NB: Although it is certainly possible to re-use socalled 'canned
forests', they have been largely superseded by TDL. We will assume the
latter.
 






     ================================================================
     Towards operational use of MeqTrees in WSRT calibrator reduction. 
     ================================================================

This is an important element of the process to get our stuff
excersized, understood and coveted. 

   -) We need a MINIMUM basic but useful book-keeping system around
   the use of Meqtrees for reduction 'projects' (see below). It should
   allow the independent use of MeqTrees, but also have an interface
   that allows embedding into overall observatory systems.

   -) JEN has made available a set of TDL scripts for WSRT calibrator
   reduction trees. More are easily produced (and edited!).

   -) Proto-LSM with WSRT calibrator sources 
 
   -) System temperature. Getting info from MS

   -) Bandpass. Caused some trouble before...

   -) Flagging.... 
   
   -) Memory nodes needed (OMS)
 
   -) Speed....

   -) The group in Westerbork will take steps to make sure that
   MeqTrees can run there (AIPS++ version etc). In the mean-time, they
   can be used in Dwingeloo.






       ===========================
       MG script management (SvdT)
       ===========================

 - Testing environment

   - Demo of MG_JEN_testall.py

   - Towards a TDL_testall.py script that calls all MG_XYZ_testall.py

     - (may not be necessary)

   - What should we do with the result?

   - Standalone use of the kernel (i.e. without browser)


 - MG script overview (BvdT)

   - demo of his beginning of a website

   - JEN email 25 sept

   - rules for machine-readable MG script information 
     (keywords, detailed description, etc)








                    =====================================
                    =====================================






















