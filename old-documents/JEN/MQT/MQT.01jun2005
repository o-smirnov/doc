file: ../PSS/MQT.01jun2005


      ==============================================================
      Input for MeqTree (MQT) meeting,  wednesday 01 june 2005, 15:30  
      ==============================================================

Participants:
  - RXA: Rob Assendorp
  - GVD: Ger van Diepen
  - MXM: Maaijke Mevius
  - RJN: Ronald Nijboer 
  - JEN: Jan Noordam
  - TAO: Tom Oosterloo
  - OMS: Oleg Smirnov
  - AGW: Tony Willis

For information:
  - MAB: Michiel Brentjens
  - WNB: Wim Brouw
  - AGB: Ger de Bruyn
  - MVH: Michiel van Haarlem
  - HAH: Hanno Holties
  - JXR: John Romein
  - KVS: Kjeld van der Schaaf
  - CMV: Marco de Vos



           Meeting schedule
	   ================

Wednesday 15:00, Multi-Media Room.

Please prepare by reading this thoroughly.



           ================
           Topics this week
	   ================

After our rather successful presentations on Calibration Day, we
boldly move forward again. I would like to discuss the following
general plan (which is already the result of various bilateral
discussions):


   -) Short-term technical improvements:

      -) OMS concentrates on the implementation of his Tiled Solution
      Scheme (TSS, we need a 3-letter acronym). He needs the help of
      MAB on the solver side, and MXM on the MeqParm side. 

      -) MAB will overhaul the MeqSolver. He will remove any remaining
      legacy code, implement improvements in the exchange with its
      condeqs, and make more use of the fitting metrics returned by
      WNB.

      -) MXM will overhaul the Funklet scale/offset scheme, and make
      it more robust (see below).

      -) RXA will streamline the MSinfo part of his Stream Control
      widget, and include more features (see also below).


   -) MeqTree-related presentations in the next few months:

      -) AGW feels that he will be able to give an interesting talk
      about his MeqTree-based CLAR work at the SKA wide-field-imaging
      workshop (WFI) in Dwingeloo at the end of June.

      -) We should aim to give an informal demo at the WFI, perhaps
      along the lines of Calibration Day.

      -) JEN will discuss the principles of LOFAR calibration and
      imaging, and his Minimum Ionospheric Model (MIM) at the WFI, but
      will not stress 'implementation details' like MeqTrees.

    
   -) Towards operational use of MeqTrees in WSRT calibrator
   reduction. This is an important element of the process to get our
   stuff excersized, understood and coveted. 

      -) We need a MINIMUM basic but useful book-keeping system around
      the use of Meqtrees for reduction 'projects' (see below). It
      should allow the independent use of MeqTrees, but also have an
      interface that allows embedding into overall observatory
      systems.

      -) JEN has made available a set of WSRT calibrator reduction
      trees. More are easily produced.

      -) Proto-LSM  with WSRT calibrator sources (RJN/MXM/JEN)
 
      -) The group in Westerbork will take steps to make sure that
      MeqTrees can run there (AIPS++ version etc). In the mean-time,
      they can be used in Dwingeloo.


   -) MAB will continue to get the most out of the 343 field, mostly
   by taking the 20-30 fainter sources into account.

      -) It would still be nice to have MAB's standalone uv-data
      visualiser somehow available from the meqbrowser...


   -) Our next focus object will be Abell963. The field is similar to
   the 343 field in the sense that it contains mostly point sources.
   But it also has a slightly extended double (on the flank of the
   primary beam), which is an easier start into the prediction of
   extended sources than M81/82.

      -) TAO will ask MAB for his 343 reduction script as a starting
      point for his own tree-building efforts. TDL. Since we do not
      yet have the TDL, his trees will be for 2-3 built-in sources.

      -) In many ways, Abell963 is ideal for the exercsizing of LSM and
      uvbricks, so RJN will work closely with TAO. 

      -) TAO will be on holiday during July, while RJN will be away in
      September. Ideally, RJN should get the LSM and uvbricks ready
      for (limited) use during July.

      -) OMS has made the Kview visualisation program available on
      the lofar9/10 machines....
 

   -) OMS will start implementing the Python Tree Definition Language
   (TDL) on July 1st. 

      -) When we have TDL, meqforets can be generated automalitacally
      from a given LSM. The latter must be able to supply a list of
      Cat I source names (in order of apparent flux), and the names of
      a mosaic of Cat II patches. The connection will be by means of
      the 6 (and only 6!) standard node-names:

          -) StokesI[q=<name>]
          -) StokesQ[q=<name>]
          -) StokesU[q=<name>]
          -) StokesV[q=<name>]
          -) RA[q=<name>]
          -) Dec[q=<name>]

      Each of these nodes has its own mini-tree connection with
      MeqParms in the internal LSM mep-table, or with uvbrick nodes.


   -) 




       ==============================
       RobustnessRobustnessRobustness
       ==============================


This is one of the big drivers of MeqTree, and one of the features that
distinguish us from the competition.

Principles:

  -) Intelligent default action

  -) Clear reporting when something is wrong

  -) Useful messages about what is wrong


Subjects:

  -) Funklet/domain scale and offset (see below)

  -) Parm_groups (see below)
   
  -) User-specification of TSS

  -) MeqSolver use of fitting metrics



       ===============================
       Funklet/domain scale and offset
       ===============================
       
It is VERY fortunate that I did not try to give my Calibration Day
demo with realistic (large, 10^9) values for freq and time. A long
time ago we decided to rescale our coordinates in order to avoid these
kinds of problems, but obviously we need to sharpen this up a bit.
(NB: I do not understand why MAB did not run into trouble here....).

The symptoms are the following:

  -) Refusal to solve for higher-order coeff with large (10^9)
  time/freq coordinate values numbers.  Interesting in itself, since
  it produces a low-order solution, while the matrix rank collapses.

  -) The problem appears to be with non-zero offsets (non-unity scale
  seems to work OK). Solving errors are of order 1e-5 for offsets of
  10 or so, and much larger for offsets of 10^9.

First of all: I DO NOT UNDERSTAND why the offset/scale values should
affect the solving behaviour at all!! Unless the funklet coeff are
constantly converted between their values in the two coordinate
frames: the ACTUAL one with the large numbers, and the REDUCED one
(e.g. -1,1).

Whatever the situation, I think we should aim for the following:

    -) Always use reduced domain coordinate values (N-dim!).
    Preferably between -1 and 1, but slightly different if necessary
    (zero-size domain, growing domain). This keeps the coeff values
    small, and easily interpreted (and compared).

    -) I assume: reduced = (actual-offset) * scale

    -) A domain has actual coordinates. So: Nothing needs to change in the
    present definition of the domain.

    -) A funklet has a validity domain, and two vectors of offset and
    scale factors that define its reduced frame w.r.t. its validity
    domain. The funklet coeff values are valid for its reduced
    coordinates. So: Nothing needs to change in the present definition
    of the funklet.

    -) The funklet coeff values are NEVER converted to the actual
    coordinate frame. I cannot think of a single reason to do this.

    -) When specifing funklet coeff values, they should be accompanied
    by a validity domain with actual coordinates, AND a set of offset
    and scale values that define the reduced frame for which the given
    coeff are valid. Thus, it is NEVER needed to convert funklet coeff
    values from actual to reduced frame. So: the current meq.polc()
    function keeps the same interface, but its working might be
    slightly different....`

    -) So, funklet coeff values ONLY need to be converted between
    reduced coordinate frames, which should always involve small
    numbers.


    -) The process of solving for improved values of funklet coeff
    should NOT require conversion to/from actual coordinates.

       -) 


    -) The actual coordinate values are needed when:

       -) things are displayed 

       -) multiple domains have to be related to each other
       (inter/extrapolation, merging, copying etc). The best way to do
       this is to express them into a 'common set' of reduced
       coordinates, and to convert the coeff values accordingly.


I assume that we have a general (and well-tested) scheme for
converting funklet coeff values from one coordinate frame to another? 
One dimension is easy, and I have one (in Glish) for two
dimensions. But we need a n-dim one, for our generalised domain
scheme. Obviously, we need a different scheme for each type of
funklet. (NB: I do not care whether such a scheme is efficient or
not. I am sure it can be optimised eventually. The most important
thing is to get a robust scheme in place.)

Principle: Should be automatically optimal, always (robust).
 




If we forbid the actual specification of funklet coeff (except c00) by
the user, we NEVER have to convert the coeff to the values they would
have for the actual coordinate values.


    -) However: At this moment, the default of the meq.polc() function
    is: offset=[0,0] and scale=[1,1]. Note the 2D assumption. So
    perhaps the only change we need is a change of default behaviour:
    If not specified, the offset and scale are chosen such that the
    reduced coordinates run between (-1,1) for the given domain.

    -) I DO NOT UNDERSTAND why the offset/scale values should affect
    the solving behaviour at all!!


Thinking through the various cases:

    -) Funklets are used ONLY in MeqParms (we may have been
    wrong-footed by the earlier idea that they might play a role in
    other MeqNodes as well).

    -) User-specification of a funklet: They must be accompanied with
    a validity domain with actual coordinates, and a set of reduced
    coordinates for which the given coeff are valid. 

    -) In this scheme, there is no difference between a Polc and a
    PolcLog funklet. They both have reduced coordinates.

    -) Calculating MeqParm vells value for a given domain: Requires
    the calculation of reduced coordinate values in the frame of the
    available funklet(s) for the requested domain.

       -) NB: This point is likely to cause the argument that it costs
       more time if the coeff have to be reframed first. This is a
       spurious argument, since it is a very small operation to
       calculate the reduced coordinates of the requested domain in
       the frame of the available funklet domain, using the actual
       coordinates of both. The coeff do NOT have to be converted!!

       -) It will be efficient to define the coeff of all the
       available funklets of a particular MeqParms in the same reduced
       coordinate frame. There should be a raid way to determine that
       the frames of two funklets are the same (like the request id).

    -) Growing domains: Start with (-1,1), and extend to (-1,2),
    (-1,3) etc, which does not require a change of coordinate frame,
    while the coordinate values remain reasonable. Alternatively, we
    might start with a first domain of (-0.1,0.1) or (-1,-0.9).

    -) Perturbed values: Since the coeff values will have 'reasonable'
    magnitudes (-10,10), the perturbed values are more likely to be of
    reasonable magnitude. We might even tailor them for the various
    orders of t,f....

    -) Updating MeqParm coeff values: Does not depend on coordinate
    frame.

NB: On a related subject: Memory nodes could be a kind of MeqParms,
where the accumulated results of a node are stored in a table....






       ===========================
       MeqParm table naming policy
       ===========================

Before offering canned trees for operational use, we must define the
simplest possible book-keeping scheme

Step-wise development, driven by experience. The minimum level that we
offer must deal with calibrator observations, and using their MeqParm
results as initial values for 'science' observations.


  -) A 'project' resides in a sub-directory. It comprises:

     -) MS (multiple?)

     -) MeqParm table (for instrumental MeqParms)

     -) LSM

     -) Project file (can be inspected from the browser)

        - Contains processing history and other information

        - Automatically updated

     -) Images etc

  -) A calibrator observation is a project 

  -) After starting the browser, starting the kernel and loading a
  canned forest, the user uses the Stream Control to select an MS.

  -) A NEW instrumental MeqParm table is created, with a name built up
  from the following elements:

     -) MS name

     -) MS time-domain (from MS)

     -) forest_function (from forest state record)

  -) If one or more input MeqParm tables are specified, they are
  merged into the new MeqParm table, to serve as initial values.

  -) NB: The source parameters reside in a separate MeqParm table
  inside the LSM. It is not possible to use it before we have the Tree
  Definiton Language (TDL).


















	===============
        The 343 project
	===============


We have a map! And it looks very good.



	===============
        The CPS project
	===============


The CPS project limits itself to Central Point Sources (CPS) because
they do not require the complexity of an LSM or peeling, while still
being potentially interesting for WSRT operations (provided they offer
functionality that is better or more convenient than existing). 

An OPERATIONAL set of canned CPS trees for reduction of WSRT
calibrator observations must have the following features:

  1) Stream control tool (RXA): This allows the user to select a tree,
  and associate it with a MS. It also allows the modification of the
  sensible defaults of a few parameters like (freq,time) tile-size,
  ifr selection (TaQL), MS columns to be used for I/O, etc. 

      a) The stream control tool should also allow the user to specify
      what to do with the results. E.g. make a map of the residual
      uv-data, or display the estimated MeqParm values.... 

      b) OMS has smoothed the path for RXA by providing some templates
      to work on.

  2) Bookmarks (OMS) in the forest state record, which define the
  placement of the state of various nodes on one or more browser
  pages. This saves a lot of clicking, and considerably lowers the
  threshold.

  3) MeqParm fiddler (MXM). This is being polished into a remarkably
  useful tool.

  4) A set of canned trees (JEN) for the various sources, for various
  operations. There will be trees to do these operations separately,
  but also trees where these operations are cascaded. JEN is busily
  rewriting to accomodate tensor nodes, which are thoroughly tested in
  the process. The following operations can be distinguished:

     -) Predefined source models for 10-20 popular calibrator sources.
     They should have frequency-dependent S.I. so that they are valid
     for all WSRT frequencies (RJN).

        a) We discussed various ways how the same tree might be used
        with different calibrator sources. The parameters of the
        latter would be in a table (a step towards a LSM).

     -) Simple flagging (with equalisation over all 4 corrs).

        a) AIPS++ has the possibility (built by OMS) to give a summary
        of all the flags....

     -) Visual inspection (using the browser/fiddler).

     -) Bandpass calibration.

        a) Is it possible to specify the central part of the band in
        the forest state record? This is useful for trees that are
        specially for bandpass calibration. How are these bandpass
        parameter values transferred to other trees?

     -) Tsys application (requires obtaining info from MS)

        a) At this moment, the trees automatically reads the telescope
        positions from the MS, using the OMS Python script. This
        works, but must be fully tested. To read Tsys info, a special
        bit of C++ must be written, and another Python script. How
        important is this?

     -) Solving for phase/gain

     -) Solving for dang, dell, PZD, Faraday rotation (RM). This is
     where we can really provide some value. The ideal is to provide a
     single tree for doing the entire WSRT calibration in one pass, on
     a SINGLE calibrator source. 

     -) Subtraction of the CPS calibrator source

     -) Correction of the (residual) uv-data

     -) Inspection of the result(s).

  4) Some tools for inspecting (summaries of) the estimated MeqParm
  values, and to dispose of them (MXM). Astronomers like to look at
  plots as a function of time and freq. RXA will show MXM some PLUVO
  plots, as an example of what will be needed in the future.

  5) Supporting documents. I am thinking about an explanation of
  polarisation calibration (i.e. what the plots mean). MAB could do
  the same for the 343 project. We should also put stuff on our wiki
  page.









                    =====================================
                    =====================================






















