file: ../MeqTrees/PSS5.13oct2004


      ====================================================
      Input for PSS5 meeting, wednesday 13 oct 2004, 15:00     <---!!
      ====================================================

Participants:
  - RXA: Rob Assendorp
  - MAB: Michiel Brentjens
  - GVD: Ger van Diepen
  - HAH: Hanno Holties
  - RJN: Ronald Nijboer 
  - JEN: Jan Noordam
  - TAO: Tom Oosterloo
  - OMS: Oleg Smirnov
  - AGW: Tony Willis



           Meeting schedule
	   ================

Wednesday 15:00, Multi-Media Room


	   Computing power.
	   ================

OMS has ordered more memory for lofar9/10. Both will be filled up to
the maximum of 3.5 Gb. 

HAH will look into filling up one of the RSW cluster nodes to 16 Gb.
This will be OK for WSRT 3c84, while we think about implementing PSS
on the full cluster. OMS will look into compilation etc (64-bit mode),
and will get access to the cluster for compiling and building of PSS
for all the present users. The latter will speed up the generation of
new trees if they require the production of custom node classes.


           PSS3,4,5
	   ========

OMS has demonstrated the phase solution (which did not run away in
PSS4). This officially ends PSS4, only one month later than planned.

There is a growing suspicion that the source positions in the Haystack
MS are wrong. This would almost vertainly have been spotted earlier
(and saved a lot of work) if we had been working with more than one
freq channel and time slot. RJN will make a map (sorry, image) and
help to clear this up. 


	   Generalisation of domain dimensions (OMS)
	   =========================================

Will be finished by now... Ho do we test it?


	   Liaison between PSS and LOFAR S.E.
	   ==================================

Two ways: GVD as part of PSS group, RJN participates in meetings of
the LOFAR S.E. group.

What is needed for making restrictive implementation decisions, and
when should these be taken?



           The next PSS Open Day (25 nov)
	   ==============================

Not everyone has indicated his availablity yet.

The emphasis will be very much on showing trees in action, and mych
less on their internal details. 



           Minimizing the number of nodes
	   ==============================

There has been some concern about the rapid increase of the number of
MeqNodes, which rapidly increases whenever we try to do something
meaningful.

Fortunately, our wonderful paradigm seems to offer natural answers for
any problem that we encounter. While reading an article about Quantum
Loop Gravity in the scientific journal 'Kijk' I figured out the rules
for combining nodes into 'bigger' ones automatically:

 -) They must all be math nodes (including MeqAdd etc)

 -) They must all have exactly the same qualifiers: 
    [s1=23][s2=127][q='3c85']

Experiments with the (smallish) LSM trees for source prediction
produced encouraging results: A reduction of up to 50% (18 to 8 nodes
for StokesQ in the presence of a non-zero SI and RM).

So the recommended procedure is to set up 'understandable' trees with
many nodes, and then to combine them automatically by
applying the above rules. It will result in a few nodes with
absolutely horrifying math expressions (and many children), but since
these are automatically generated we can make sure that they are
correct (I test this by evaluating the tree with fake leaf values
before and after minimization, and the results should be identical).

My conjecture is that this procedure generates an 'optimum' tree,
i.e. one in which re-use of cached results is optimised.

NB: User class names: When several nodes are combined into a single
one, this should be reflected in the class name. In any case, generate
a new system, with new user class definitions, for each new tree
(should be fast).

  
           Visualisation (AGW)
	   ===================

I talked to Tony by phone when testing the videocon thingy, and of
course we drifted into visualisation.

First of all we decided that it is nice to be able to display a vells
in a browser panel, but if that proves difficult we will settle for
display on a separate canvas for the time being. This is a mode that
usually offers more possibilities in any case, so perhaps we should
reconsider the importance of panel display at some point. However, it
remains vital that display is controlled from the browser!

Secondly, we hit upon the concept of (a hierarchy of) 'visualisation
nodes'. These would specialised nodes that collect the results from
their children, and turn these into some kind of generic plot-records
that can be plotted by hippodraw etc.

Normally, such nodes would be inactive, but when the user clicks on
them with the browser, they start displaying themselves. Thus, they do
not slow down the system when not used.

The main advantages of such a scheme are:

  -) Speed: The calculations are done in C++, and not in a scripting
  language. Moreover, the results from its children are not passed by
  the publishing system, but directly between nodes. This is an
  important consideration for nodes that may have thousands of
  children.

  -) Simplicity of interface: The user does not have to specify the
  nodes that are to be visualised by a particular visnode, because
  this is defined at tree design time by specifying its children.
  
This is a very effective scheme to offer the user a number of fixed
views, which are tailored to what the tree-builder thinks is most
useful to look at. Of course the user will still have all the more
general-purpose ways to visualise the result/state of arbitrary nodes,
but I suspect that most users will be fully satisfied with canned
views that they know and love. In practice, they will ask for more of
such views to be available in their trees.

We could think of a hierarchy of such nodes, in which they pass on the
plot-records to other visualisation nodes, to be displayed together
(but with different colors or styles, say). I imagine that Oleg's
rider system is up to that.

Obviously, we want any number of such visualisation nodes to be
displaying themselves simultaneously, in separate plots on a single
canvas. 

For some more details, see the appendix below.



	   Residual images (RJN) 
	   =====================

RJN is setting up his own corner for developing tools for analysing
residual (facet) images, especially updating LSM sources. Should be
independent of uv-plane processing.

    -) Figure out whether it is possible to do Hogbom CLEAN with a
    dummy MS.

    -) Ask OMS for a MeqKernel system, and start playing with the
    simple trees that AGW used. 

    -) Get into a position where he can use JEN's LSM object. This
    requires checking in JEN's Glish modules into LOFAR system.

For the moment, RJN and RXA are struggling with making an image from a
WSRT MS. It is remarkable that this should be a problem at all....


           Local Sky Model (LSM)
	   =====================

While TAO is working on the WSRT GSM, JEN will implement a
place-holder LSM. It contains the following elements: 


    -) A list of parametrized sources. 

    -) A MeqParm (MEP?) table

    -) A number of internal organising (mapping) vectors:

       - Pointing to Cat I/II sources. The dividing line is flexible.
       Any Cat II source that causes trouble may be upgraded to Cat I.
       (NB: The reverse is not always true, since Cat I sources may
       lie outside the field-of-view).

       - Relation between Cat II sources and predict patches. This is
       used in collecting Cat II sources into a temporary image.

       - Relation between Cat I/II sources and facet images (which
       will be stored in separate image files). This is used in the
       RJN source update process.

       - 

    -) Predict trees per source: RA, DEC, StokesI,Q,U,V.....
    Point sources, extended sources, large sources

    -) Solve trees per source: the math relation between source
    parameters in the MeqParm table and (residual) image values.

    -) A collection of 4D images (with CLEAN components). (what about
    beam attenuation?)

    -) Temporary 4D images (CLEAN components) for Cat II prediction,
    and for use in the Cat II update loop. 


NB: Find out how AIPS++ images are stored after making a Glish image
object.



           WSRT inspection pipeline
	   ========================

On average, RXA can spend half his time on 'off-line tools'. However,
in order to get over the first treshold, he will spend most of his
time on 'getting into' PSS, in Dwingeloo. He has been playing
succesfully with AGW's MeqDummy trees, putting in new nodes, and
plotting the solver convergence by catching the published results from
the condeq in successive iterations.

RXA will now implement the spigot2sink tree that was outlined in last
week's convocation, and connect it to an MS. After that, he will
insert a simple flagger, and look for ways to display the result.

As soon as AGW has produced his visunodes, we will be able to offer
various 'standard views' of the uv-data. Some examples:

  -) Spectra of all the XX or YY corrs, in order of baseline length,
  separated by an (automatic) offset in the vertical direction.
  Alternativel, this could be a 3D plot.

  -) Delays (Suggestion of TAO. How do we calculate these?).

  -) All XX (red dots) and YY (blue dots) cells values from all ifrs,
  in the complex plane.  For a calibrator source, this tells the whole
  phase/gain story. We could consider two separate nodes for the XX
  and YY, which can be displayed separately, but which are also the
  children of a node that combines the two into a single plot, with
  different colors.

  -) Idem for all XY (magenta dots) and YX (purple dots). For a
  polarised calibrator with appreciable StokesU (e.g. 3c286@21cm) this
  tells the whole instrumental story (dipole angle errors, dipole
  ellipticities, X/Y phase-zero-difference, etc).

  -) Condeq-watcher. This has all the condeqs of a particular solver
  as its children. It could simply plot all their cells values in the
  complex plane, perhaps with different colors for the different
  condeqs (could be 20.000). 

  -) Convergence watcher: Another kind of condeq-watcher, which would
  look at the rms and mean values for successive iterations. Less
  urgent, since we will usually only do one iteration.

  -) Whatever...


In the meantime, it will be easy to implement a simple version of
selfcal trees for the standard WSRT calibrators (3c1147, 3c286, etc).
This has the advantage that it does not require an LSM, but only a
subtree for a single source (prediction trees for all 3C sources are
now available in JEN's LSM-generation object). In conjunction with
visualisation this might be popular for rapid trouble-shoooting and
'inregelen' of the WSRT, including the X/Y phase-zero difference'.

Finally: Re-tapering of the LFFE spectra. The 1D FFT node proves to be
a little more c0omplicated than we first thought, especially because
the result has a different domain than the request. Nevertheless, it
is a good exercise for our precious paradigm.



========================================================================
========================================================================
Appendix: Some elaborations on the above
========================================================================



------------------------------------------------------------------------
A plot-record for visualisation would consist of a record of records:

  rr.plot_type    '2D'
  rr.title:       string
  rr.x/y/zlabel:  string
  rr.x/y/zunit:   string
  rr.legend:      multi-line string (optional)
  rr.background:  color, default=white
  rr.foreground:  color, default=black
  rr.plobject:    record of one or more plobjects to be plotted
     #1:          record
        .type           'data2D'
        .xx:            coord vector                  (real)
        .yy:            data vector                   (real)
        .aux:           record (auxiliary plotting info)
          .color:         optional (default=black)     
          .style:         point-style, line-style (if connected), default=...
          .size:          size of points, thickness of lines (default=1)
          .legend:        (optional) one-line contribution to overall legend
          .label:         (optional) string vector: label(s) for data-points
     #2:          record
        .type           'data3D'
        .xx:            coord vector                  (real, optional)
        .yy:            coord vector                  (real)
        .zz:            data vector                   (real)
        .aux:           record (auxiliary plotting info)
     #3:          record
        .type           'circle'
        .xc:            x-coord of centre
        .yc:            y-coord
        .radius:        cricle radius
        .aux:           record (auxiliary plotting info)
     #4:          record
        .type           'axes'
        .xc:            x-coord of origin 
        .yc:            y-coord of origin
        .aux:           record (auxiliary plotting info)


Remarks:

-) The overall legend is a combination of the individual dataset
legends (in the same color, of course)

-) The aux record has the same fields for all types of plobjects

-) Note that the 'data3D' plobject is inconsistent with the
'plot_type' of the plot-record. Therefore it gets ignored, with an
error message in the legend of the plot.



This kind of record supports a hierarchy of visualisation nodes. Such
a node first turns the vells of its 'regular' children (if any) into a
data-record with one or more plobjects. It then combines this with the
data-records of any visunode children into a single data-record with
all the plobjects that are compatible with each other.

NB: I discussed all this with Tony when we were testing the videocon,
and he has kindly agreed to endeavour to implement the C++ visunodes,
and the display of the resulting plot-records (outside the MeqKernel).
The first thing we need is a paper design that outlines exactly what
kind of visunodes we need, and in what order. I certainly hope that
they will be fully operational by half november.





                      ==================================




























