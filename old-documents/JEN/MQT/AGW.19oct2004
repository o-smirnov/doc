file: AGW.19oct2004


Hi Tony,

I will wait for your iteration on the deliverables. Harvey was rather
amused by your bureaucratic problems, and I imagine he will stroke
Peter a little.

About the other thing: How I wish we were sitting in one room to
thresh this out (I hope that you have ordered your ticket by now).

Oleg and I are both of the opinion that introducing XML into nodes
would be counter-productive. XML is a very portable way to create
records of inhomogeneous data, so in principle it is a Good Thing.
However, we already have a system of records in the kernel, which is
translated seamlessly into Glish and Python, and neatly displayed in
the browser. Introducing XML would carry the extra baggage of putting
together XML strings (with a loss of data precision?) and putting an
XML parser into the browser. If, on the contrary, we follow Oleg's
suggestion to collect only data (i.e. no plot-infomation yet) into the
state-records of these nodes, it should be really trivial to produce
an initial set of them in a few days.

Can you live with that? I positively encourage you to demonstrate that
we are wrong when you are the first external member of our global PSS
community, but not in this first iteration.

As I said yesterday, we should concentrate on the following nodes.

  -) individual uv-data values per cell, real vs imag

  -) spectra (real and imag)

  -) combiner node 

Since the C++ classes are 'trivial', most of the work should be in the
browser plugin, which displays the collected data continuously.

Let us discuss it further at the videocon. You are on the program.
Cheers,
Jan








































=========================================================================

I talked to Harvey. He will take up the flights-issue with Peter, and
probably say that Peter should pay for it for the moment, and that we
will reimburse when we judge that the deliverables have been delivered
(see also below). In the meantime, Harvey suggests that, by all means,
you should book your trip now to get a good deal. 

As to deliverables: The workplan that you produced is deemed to be a
bit vague. What we need is a clear set of deliverables that we van
declare delivered at the end. The reason is administrative: He has to
leave a paper trail of monies spent (on LOFAR etc) so that we cannot
be accused of juggling some numbers to get more 'matching funds' from
elsewhere. The life of our leaders has really become complicated! 

So let us define some deliverables. What about:

 1) Write visualisation plugin for the MeqTree browser:

   a) Display in a browser panel (hippoDraw)              done

   b) Display on a separate canvas (hippo/root)           done


 2) Write MeqTree beginners manual

   a) First version                                       done

   b) Second version

   c) Third version


 3) Write some simple (but cascadable) C++ node classes for collecting
 data for visualisation:

   a) For plotting uv-data points in the complex plane

   b) For plotting spectra

  
 4) Write a plugin for the browser that displays such data.


 5) Design a more general system of such cascadable data collection
 nodes, which can be used for more than just visualisation.


 6) Help design and commision an operational environment to reduce
 observations with a selection of 'canned' forests and processing
 scripts.


 7) Export the PSS system to Penticton, and develop a convenient way
 to exchange trees and scripts between two (or more) sites.


This is just a start. I want to talk about the other stuff before I
have to go home, so I leave it to you to do the next iteration.



----------------------------------------------------------------------
    Visualisation nodes
----------------------------------------------------------------------

I think I was a bit hasty last friday (here we run into the limits of
transatlantic communication). On the one hand I would like to think a
little and produce a nice design first. But on the other hand I would
really like to have a few working nodes for our demo on nov 25th,
which means that we need a first version next week. So I propose that
we settle for a few kludgy nodes now, and then discuss a second
iteration when you are back here. The advantage of our lovely system
is that we can keep our kludges very localised, so that they are easy
to replace.

What we are really talking about is data-collection nodes that attach
a plot-record to the state-record. They are cascadable in the sense
that a MeqVisuCombine node takes the plot-records from its children,
and combines them into a single one. The state-record is obtained by (or
published to) the browser, which then invokes the correct plugin to
display the plot-record (Oleg tells me that the browser already does
different things depending in the class of the node from which the
state-record comes).

So let's do something very simple, based on the plot-record example
that I produced last week. I propose the following data-collection
nodes:

  -) class MeqVisuRealImag: reads the values of all the cells of the
  unperturbed vells of all its children (may be many). It pust the
  real parts into the xx-vector, and the imaginary parts into the
  yy-vector. (I need this one for the point-source calibration demo)

  -) class MeqVisuRealSpectra: reads the freq-spectra from its
  children, and puts the the real values into a 2D array. (I need that
  one for the spectral-line demo).





 into the
  following plot-record:

     rr.plot_type    '2D'
     rr.title:       string
     rr.xlabel:      string
     rr.ylabel:      string
     rr.legend:      multi-line string (optional)
     rr.background:  color, default=white
     rr.foreground:  color, default=black
     rr.plobject:    record of one or more plobjects to be plotted
        #1:          record
           .type           'data2D'
           .xx:            real(v)
           .yy:            imag(v)
           .aux:           record (auxiliary plotting info)
             .color:         optional (default=black)     
             .style:         point-style, line-style (if connected), default=...
             .size:          size of points, thickness of lines (default=1)
             .legend:        (optional) one-line contribution to overall legend
             .label:         (optional) string vector: label(s) for data-points

















------------------------------------------------------------------------
A plot-record for visualisation would consist of a record of records:

  rr.plot_type    '2D'
  rr.title:       string
  rr.x/y/zlabel:  string
  rr.x/y/zunit:   string
  rr.legend:      multi-line string (optional)
  rr.background:  color, default=white
  rr.foreground:  color, default=black
  rr.plobject:    record of one or more plobjects to be plotted
     #1:          record
        .type           'data2D'
        .xx:            coord vector                  (real)
        .yy:            data vector                   (real)
        .aux:           record (auxiliary plotting info)
          .color:         optional (default=black)     
          .style:         point-style, line-style (if connected), default=...
          .size:          size of points, thickness of lines (default=1)
          .legend:        (optional) one-line contribution to overall legend
          .label:         (optional) string vector: label(s) for data-points
     #2:          record
        .type           'data3D'
        .xx:            coord vector                  (real, optional)
        .yy:            coord vector                  (real)
        .zz:            data vector                   (real)
        .aux:           record (auxiliary plotting info)
     #3:          record
        .type           'circle'
        .xc:            x-coord of centre
        .yc:            y-coord
        .radius:        cricle radius
        .aux:           record (auxiliary plotting info)
     #4:          record
        .type           'axes'
        .xc:            x-coord of origin 
        .yc:            y-coord of origin
        .aux:           record (auxiliary plotting info)



























