file: ../MeqTrees/PSS4.13jan2004


NB: This input document is a bit chaotic. Let us go through it
together.


         Problems encountered
	 ====================

  -) OMS: Often the first Node.Execute fails, but the second succeeds
     (This is a very annoying bug)

  -) OMS: Solving seems to work, but when I do getState() after
  solving I (often) get fail on MeqCondeq...


  -) GVD: We need spid_index in MeqSolver result (just like in
  MeqCondeq)

  -) GVD/OMS: We must review the structure of the state-records.
  It could be more consistent (e.g. use of 'vellsets', etc)

     - GVD: Should the result from MeqSolver be more recognizable?
     (Now I look at presence of 'result' field (rather than
     'cache-result')

     - In general, should we assign a 'type' to a state-record, and
     define the structure of the result-record? At this moment I am
     constantly checking whether some fields exist (e.g. error/fail).
     This is an important interface issue....

     -) Allowing multiple vellsets in a state-record has complicated
     things. It had better be worth it.


  -) GVD/MAB: Problems with PSS3 solution of inonspheric phase (source
  flux and position goes OK). MAB will check the hard-coded M.E. to
  see whether a conj() is missing...

  -) MAB/JEN: Absolute or relative ionospheric phase? I.e. is phase
  tracking (and phase locking) necessary? Apparent position....

  -) After solving, the caches are empty. How can I follow what happens
  this way...? Subscribe, e.g. to condeq caches?

  -) In general, I want to avoid perverse couplings in the request. So
  updating MeqParms via a request for predict is wrong. We must
  develop a language for Job Descriptions...


         Standard tests and demos
	 ========================

  -) Keep others informed. Best way of progress reporting.

  -) Keep team members fully involved.

  -) Reduce number of development iterations.

  -) Layered approach?


         MeqConstraint and MeqWSum
	 =========================

  -) JEN/GVD: I can make a simple phase-zero MeqConstraint (i.e. one
  that forces the sum of the phases to zero) from a MeqCondeq and a
  MeqAdd. This is sufficient for the moment.

  -) Variable nr of children (OK for MeqAdd)

  -) Setting the state (e.g. weights) of MeqWsum


         Comparing MeqCondeq children
	 ============================

  -) This is a very powerful, and universal, diagnostic. It is almost
  everything we want to know.... See mirror trees
 

         Mirror trees
	 ============

  -) Instead of repeating PSS3 experiments, this is sufficient and
  completely general.... Procedure...

  -) Make a diagram


         Large trees
	 ===========

  - Time it takes to expand/create them (Glish/C++)

  - Will we run out of (Glish) memory?


         Trees to be made
	 ================

  -) Demo trees (polynomial etc)

  -) WSRT M.E.

  -) Chained solvers (rippling tree)

  -) Deriving and using secondary MeqParms


         MeqParm access fro Glish
	 ========================

  -) Not necessary to set them from Glish?

  -) Domains


         Request (job) sequences
	 =======================

  -) MeqSink generated Domains from MeqSErver events?


         Closing the loop
	 ================

  -) Making images (from MS subsets?). 
 
  -) Finding and updating sources from residual images

  -) GSM/LSM (and VO discussion!)



         AIPS++ developments
         ===================

  -) Cornwell w-projection


         Goals for this quarter (2003Q4)
	 ===============================

  -) Fill the DATA column of the MS with simulated data, using the
  dummy LSM. Make a map of the result.

  -) Subtract the same LSM from it, and look at the result at various
  stages. This implies pausing/stepping, and getting (and displaying)
  the result from selected nodes. Make a map of the result.

  -) Solving (GVD): repeat the PSS3 results.


         Goals for next quarter(2004Q1)
	 ==============================

  -) WSRT reduction of 3C245 (?): Bright point-like sources that need
  individual beamshapes. 3c84 has too much extended structure that we
  cannot yet handle.

  -) Haystack simulated data?

  -) VLA 74 MHz (Joe Lazio)?


         The actual status
	 =================

  -) OMS has written a document: "MeqTree C++ interfaces and data
  structures". This will be checked in, and both GVD and he will keep
  it uptodate.

  -) JEN will experiment with the time it takes to create larger
  MeqForests. The expectation is that this will soon become a
  bottleneck. We will deal with that in two ways:

     -) OMS will make MeqForests persistent, in the sense that they
     can be stored and retrieved (as a whole) from a file.

     -) At some point, the expansion will be implemented in C++.

  -) OMS will build in a first performance-measure: each node will
  keep track of how often it has had a request, and how often it has
  been able to use its cached result. These numbers must be accessible
  from Glish.

  -) GVD will think about an optimised MeqDFT class, keeping in mind
  that a different one might be needed for extended sources.

  -) JEN has a number of trees, and some tools to manipulate them.
 
  -) MeqTreeBuilder does not yet work on lofar10....






                               =================================
