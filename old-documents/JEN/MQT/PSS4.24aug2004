file: ../MeqTrees/PSS4.24aug2004


      ==================================================
      Input for PSS4 meeting, tuesday 24 aug 2004, 10:30
      ==================================================



           Tony Willis
	   ===========

Things are lookig well, and we hope that Tony will join us around Sept
7th, initially for 4-5 weeks. We have promised our bosses that we will
produce a slightly more tangible description of deliverables for him.


           RJN: the next step...
	   =====================

Ronald is back from holiday. He has more or less finished his
introduction to AIS++/C++/imaging/deconvolution/image-analysis, and is
now ready for the next step. He will come prepared with some
suggestions.



           uv-coordinates and DFT
           ======================

We are getting there, but I am still a bit confused as to what works
and what does not. I believe that we can read uvw coordinates form the
MS for both Haystack and WSRT, and that we can reproduce the correct
values from the WSRT 'station' positions, but not for Haystack. Is
that correct?

I have a MeqDFT subtree based on the MeqPointSourceDFT class for
source q, and stations s1/s2. Note the following:

    -) RA0/DEC0 are the coordinates of the pointing centre. However, I
    assume that these children of MeqLMN really represent the current
    phase centre....
 
    -) X,Y,Z[s={s}] are the station position MeqParm names in the MEP
    table. I would like slightly more unique names, like station_X..
    The same applies to the array centre coordinates X_0, Y_0, Z_0



@     - #2                  :  record[5]
 @       - class               :  string[1] = 'MeqPointSourceDFT'
 @       - name                :  string[1] = 'MeqPointSourceDFT[q={q}][s1={s1}][s2={s2}]'
 @       - children            :  record[3]
 @         - #1                  :  record[5]
 @           - class               :  string[1] = 'MeqStatPointSourceDFT'
 @           - name                :  string[1] = 'MeqStatPointSourceDFT[q={q}][s={s1}]'
 @           - children            :  record[2]
 @             - #1                  :  record[5]
 @               - class               :  string[1] = 'MeqLMN'
 @               - name                :  string[1] = 'MeqLMN[q={q}]'
 @               - children            :  record[4]
 @                 - #1                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'RA0'
 @                   - children            :  record[0]
 @                 - #2                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'DEC0'
 @                   - children            :  record[0]
 @                 - #3                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'RA[q={q}]'
 @                   - children            :  record[0]
 @                 - #4                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'DEC[q={q}]'
 @                   - children            :  record[0]
 @             - #2                  :  record[5]
 @               - class               :  string[1] = 'MeqUVW'
 @               - name                :  string[1] = 'MeqUVW[q={q}][s={s}]'
 @               - children            :  record[8]
 @                 - #1                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'RA0'
 @                   - children            :  record[0]
 @                 - #2                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'DEC0'
 @                   - children            :  record[0]
 @                 - #3                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'X[s={s}]'
 @                   - children            :  record[0]
 @                 - #4                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'Y[s={s}]'
 @                   - children            :  record[0]
 @                 - #5                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'Z[s={s}]'
 @                   - children            :  record[0]
 @                 - #6                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'X_0'
 @                   - children            :  record[0]
 @                 - #7                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'Y_0'
 @                   - children            :  record[0]
 @                 - #8                  :  record[6]
 @                   - class               :  string[1] = 'MeqParm'
 @                   - name                :  string[1] = 'Z_0'
 @                   - children            :  record[0]
 @         - #2                  :  record[5]
 @           - class               :  string[1] = 'MeqStatPointSourceDFT'
 @           - name                :  string[1] = 'MeqStatPointSourceDFT[q={q}][s={s2}]'
 @           - children            :  record[2]
 @         ....etc....
 @



I reproduce some of the DFT issues that I disdussed with OMS and GVD
last week:

    -) The word DFT is a bit of a misnomer. We are really talking
    about a phase factor that shifts the phase centre between nominal
    source positions. For peeling purposes, we want to have the
    'flattest' possible visibility function over a domain, so we need
    to include an additional instrumental phase factor (mostly due to
    the ionosphere) which moves the phase centre to the apparent
    position of the peeling source.

    -) There are three 'DFT' modes:

       1) Shift the uv-data at full (f,t) resolution. The current
       class is OK. We can multiply with ionophase separately. Note
       that the uv-data are integrated over the cell.

       2) KJones multiplication of the predicted (point) source
       visibility at full (f,t) resolution. This is done for classic
       selfcal. We assume that the (f,t) resolution is high enough, so
       that the visibilities of all sources, even those at the edge of
       the field, are linear over a cell. In that case, integration
       over a cell reduces to a multiplication by df*dt.

       3) KJones at low (f,t) resolution. This is done when estimating
       the contribution of contaminating sources to the predicted
       visibility, while the phase centre is on the peeling source.
       The visibility function of a source is a sine-wave, whose
       period depends on the distance to the phase centre, and whose
       phase ALSO depends on the ionospheric phase. It is possible to
       do this analytically (ignoring the slight curvature of the wave
       crests in (f,t) space), but we have to apply the ionospheric
       phase BEFORE integration. 

    -) We agree that integration over a cell is a function of the
    MeqPointSourceDFT class. This means that its station-based
    children need children for the station-based instrumental phase.

    -) There is one consolation: the accuracy for estimating the
    contribution of contaminating sources does not have to be more
    than about 10%.


    -) Some extra questions raised by GVD (who will investigate):

       a) Do we accumulate an error if we shift the phase centre from
       peeling source to peeling source (rather than first going back
       to the pointing centre each time).

       b) Do we accumulate an error when calculating DFT by
       'incremental' multiplications over 4000 freq channels?





  
       Solving for Haystack source parameters (OMS)
       ============================================

OMS has been testing PSS4 solving with Haystack data. The flux goes
fine, but the source positions seem to be less accurate (6 decimals vs
10, even when solving for all sources simultaneously) than what GVD
gor with PSS3.....

We have not yet begun solving for instrumental phase.

NB: Before long, we need more tools for measuring convergence, and for
plotting the vells data of a node.
 

       LSM (JEN)
       =========

JEN has created a Glish MeqLSM object that can be asked for subtrees
for individual sources:

     defrec := lsm.get ('GSM_StokesQ[q=3c84]') 

Although the node names are standard (I,Q,U,V,RA,DEC), the underlying
trees may be quite different. The subtrees represent the simplest case
of image-plane values for the phase centre. They are then multiplied
with the 4x4 Stokes matrix to produce XX, XY, YX, YY values, corrupted
with instrumental effects (Jones matrices), and possibly phase-shifted
by a DFT phase factor.

The sources in the lsm object are assumed to be in the 'correct' order
for peeling(...). The object also has functions that give the sequence
of sources. This is used in 'chaining' the correct number and order of
'peelingUnits' in a tree (see PSS4.17aug2004).


       Procedure for automatic tree generation
       =======================================


I am working towards the following procedure for the generation of
complex MeqForests (for some of the concepts, reread what I wrote last
week for PSS4.17aug2004):


    0) I assume the existence of a repository of 'prototype' trees,
    which are designed to do some specific processing. Examples are
    'spigot2sink' trees for simulation, solving, subtracting, both for
    peeling and for classic selfcal, for WSRT, LOFAR, GMRT, EVN, CLAR,
    etc. I have a nice system to generate these things, and I expect
    instititional users of the MeqTree Kernel to develop this
    capability.

    1) For a particular job, an unexpanded, unchained prototype tree
       is obtained from a .MeqSubTree file in the repository:

         include 'MeqSubTree.g';
         mqst := MeqSubTree(); 
         mqst.restore (MeqSubTree_filename);

    2) I then assume that the existence of a suitable Local Source
       Model object lsm. See description above.
 
         include 'MeqLSM.g';
         lsm := MeqLSM(); 
         lsm.restore (LSM_filename);


    3) The lsm object is used to 'chain' the prototype tree:

         mqst.chain (lsm=lsm);

       This replace 'unqualified' placeholder nodes like 
         peelingUnit[q={q}][s1={s1}][s2={s2}]
       with a chain of 'semi-qualified' placeholder nodes like 
         peelingUnit[q=xxx][s1={s1}][s2={s2}]
         peelingUnit[q=yyy][s1={s1}][s2={s2}]
       i.e. the chain has as many links as there are sources in the lsm.


    4) The chained tree has information about all the classes, so it
       can be used to automatically generate .h and .cc files for the
       user-defined MeqExpr classes. The Makefile.am is updated, and
       a new system is installed with 'make aids' and 'make install',
       ready for C++ node generation.

         mqst.generate_hcc (make=T);


    5) The chained tree is now 'expanded', in the sense that all
       placeholder nodes that refer to .MeqSubTree files are replaced 
       by the contents of these files. Whenever possible, the new 
       subtrees are qualified, i.e. their [q={q}] qualifiers are 
       replaced by the relevant values [q=xxx] etc.

         mqst.expand (lsm=lsm);


    6) Actual C++ nodes are generated for all ifrs. This is done by
       qualifying a copy of the expanded prototype tree for each
       combination of stations s1/s2 (it is assumed that this info
       is obtained from a MS): 

         include 'MeqServer.g';
	 mqsv := MeqServer();                           # MeqTree kernel
         include 'MeqNodef.g';
         mqd := MeqNodef();                             # helper object
         for (i in [1:nifrs]) {
	     qual := [s1=s1[i], s2=s2[i]];              # qualifier record
	     defrec := mqst.defrec();                   # get a copy of the
	     defrec := mqd.qualify (defrec, qual=qual); 
	     mqd.generate_MeqNode (defrec, mqsv=mqsv); 
	 }


Thta's it! Note that, after providing the prototype tree the lsm and
the MS, no more user interaction is needed to generate the MeqForest.
This includes the generation of user-defined MeqExpr trees, which may
have horribly complicated expressions. The only drawback is that the
subsequent 'make' operation takes a little time, but that is
preferable to error-prone book-keeping of which classes exist already,
and which ones might have changed.



       Directory structure for testing
       ===============================

My own directory structure on lofar10 is a total mess. I would like to
set up some system where we can store repeatable tests, which can be
run (automatically) each time we modify the kernel or have other
bright ideas. Suggestions? Perhaps Tony can help...


                      =============================




























