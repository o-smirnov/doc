file: ../MeqTrees/PSS4.10nov2003


         MeqParm
	 =======

  -) Node name vs parm name...

  -) Split into real/imag, if necessary:
     MeqParm[k=...][l=real]
     MeqParm[k=...][l=imag]

  -) Dynamic creation of (non-existing) MeqParms
     - need MEP table name (default)

  -) uvwparm <msname> <mepname> [check]
     - anything filled in for checl will do
     - one polc/hour, uses 2nd degr poly
     - deviation less than 0.02 (self-test)
     - parm names : MeqParm[k=u][s=34] etc
     - reference station is [s=1] 

  -) Default value at creation (type..)
     - defrec.default := <real scalar>

  -) Polc management





         List of official (Meq) Classes
         ==============================

  -) MeqSink

  -) MeqSpigot

  -) MeqParm

  -) MeqFreq (needed for LSM)  Hz
  -) MeqTime (MJD sec)
  -) MeqGreenwich SiderealTime (nt needed)

  -) MeqCondeq
  -) MeqConstr

  -) MeqFlagger

  -) MeqIntegrate

  -) MeqWsum

  ----------------------------------------

  -) MeqVells
     - Can be scalar or vector: automatic expansion 

  -) MeqCells
     - implicit MeqDomain...
     - regular freq channels? (efficient)
     - units (freq=Hz, time=sec(MJD))
     - other dimensions than time/freq 

  -) MeqDomain

  -) MeqRequest
  -) MeqRequestSequence (MeqSink)
  
  -) MeqResult 
     - multiple planes

  -) MeqSolution


         Existing trees, and specific (meq) MeqExpr Classes
         =========================================

  -) MeqSink_XXYY: uv-data transfer:
     - meqFlagger (place-holder for MeqFlagger)
     - meqCopy
     - meqCompare

  -) blitz (tests blitz functions, and selftest)
     - each function requires work on the C++ side...
     - only implement the ones we really need

  -) LSM
     - Connection with GSM...



 

         Generating C++ (MeqExpr) classes automatically
	 ==============================================

  -) MeqExpr class selftest function? Give resulting value.
     - better to make little test-trees for each class
     - and test them with test-meqparm values
     - see whether the result is the same as in Glish


         Actual C++ MeqExpr node (object) generation
         ===========================================


  -) NB: Why is 'meqnode()' not mqsv.meqnode()?
         Why is it not called .getDefrec(), as in the Handbook?

  -) NB: We need some tools to interact with C++ nodes:
     - List of existing nodes
     - List of existing classes



         Running MeqTrees
         ================

  -) script for compiling new MeqExpr classes

  -) jen gui for operating the system?

  -) Inspecting nodes from Glish works. We need more tools to look at
  the result.

  -) meqserver.gui() needs to be repaired.




         Naming conventions
	 ==================

  -) Up to now, a nodename consisted to a classname followed by zero
  or more qualifiers enclosed in square brackets. Actual experience
  with MeqParm and MeqSelector nodes has suggested that the coupling
  between nodename and classname should be less strong.

     -) nodes without children (assume MeqParms):
  
        node xyz[..][..]  ->  MeqParm[k=xyz][l=real/imag][..][..]

        node xyz[..][..]  ->  MeqParm        xyz[..][..]
        node xyz[..][..]  ->  meqToComplex   xyz[..][..]    (placeholder)
        node xyz[..][..]  ->  MeqToComplex   xyz[..][..]    (order of children?)
        node xyz[..][..]  ->  MeqParm        xyz[l=real/imag][..][..]

	One of the great advantages is that such nodes keep their
        name, so we do not have to change child names throughout the trees

        NB: Define complex MeqParms as a subtree in one defrec? 

     -) Nodes that produce MeqResults with multiple 'planes':

        node meqU[..][..]  ->  MeqSelector   meqUVW[..][..]       [n=1]
        node meqV[..][..]  ->  MeqSelector   meqUVW[..][..]       [n=2]
        node meqW[..][..]  ->  MeqSelector   meqUVW[..][..]       [n=3]

	meqUVW has child MeqUVW ('official class'), which has children....!?

        node meqXX[..][..]  ->  MeqSelector   meqSpigot[..][..]       [n=1]
        node meqRR[..][..]  ->  MeqSelector   meqSpigot[..][..]       [n=1]
        node meqXY[..][..]  ->  MeqSelector   meqSpigot[..][..]       [n=2]
        node meqYX[..][..]  ->  MeqSelector   meqSpigot[..][..]       [n=3]
        node meqYY[..][..]  ->  MeqSelector   meqSpigot[..][..]       [n=4]


  -) The qualifiers [][] distinguish different objects of the same
  class. Each has a [keyword=value] structure. The following letters 
  are used at present:
     - [s=..]:   station nr
     - [s1=..]:  station nr (in an ifr)
     - [s2=..]:  station nr (in an ifr)
     - [c=..]:   correlation (4 per ifr)
     - [p=..]:   polarisation (2 per station)
     - [q=..]:   LSM source component nr (German for source is 'quelle')
     - [k=..]:   MeqParm 'kind', e.g. MeqParm[k='u'][s=15]
                 NB: The [k] qualifier is always the first
     - [l=imag]: Real/imag part (MeqParms are real)
     - [other?]


  -) Official classes: MeqXyz

  -) Automatically generated MeqExpr classes:
     - usually: meqXyz
     - possible: jenXyz (etc)

  -) Are square brackets the best choice for qualifiers?





         System issues
	 =============

  -) include 'MeqTreeBuilder.g' breaks Glish on lofar10 (stack parser
  exceeded!), but not on dop12 or dop23.  For the moment, we can work
  around it by creating MeqTree files on dop12 and copying them to
  lofar10. But it obviously needs to be fixed.




----------------------------------------------------------------------

         UVW-coordinates
	 ===============

  -) Initially, we will use GVD's current approach, where he has
  MeqParms for the (u,v,w) coordinates of each station
     - MeqParm[k=u][s=..]
     - MeqParm[k=v][s=..]
     - MeqParm[k=w][s=..]

  -) GVD derives the U,V,W MeqParms by fitting a time-polynomial to
  the u,v,w, coordinates in the input MS. This guarantees that the
  calculation is the same as in the Haystack simulated data.

  -) In the near future, we may also use classes MeqU, MeqV, MeqW.
  These will have one child (MeqUVW), which in its turn will have
  station coordinate MeqParms as children. For the moment, I have
  grudgingly agreed to the fact that MeqUVW is a somewhat special
  node, for efficiency reasons. In any case, the station position
  coordinates will be normal MeqParms, and it will be possible to
  solve for them in the usual way.

     -) OMS will submit a proposal for a multi-plane MeqResult in
     order to accomodate MeqUVW etc

  -) Note that all u,v,w, are per STATION, not ifr.


  -) JEN will adapt the DFT according to these two possibilities, and
  create a MeqExpr node 'shiftPhaseCentre'.

  -) It is not yet clear if we have to change (u,v,w) whenever we
  shift the phase centre to a new peeling source...

  -) The current JEN conversion from (RA,DEC,RA0,DEC0) to (l,m) is
  probably too simplistic....

  -) It may be possible to live without special nodes (RA0,DEC0) for
  the phase-centre(s) of uv-data. In that case, the (RA,DEC) of the
  peeling source that was subtracted last is the current phase centre
  of the (residual) uv-data used for imaging.

  -) We probably need (RA,DEC) nodes for peeling source [q=0], i.e. a
  artificial source with zer flux, at the position of the original
  phase centre (fringe-stopping centre) of the uv-data.






                               =================================
