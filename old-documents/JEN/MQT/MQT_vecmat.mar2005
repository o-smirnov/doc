file: ../lofar/PSS/MQT_vecmat.mar2005

Just to make sure that we have the same picture:


# Create/fill matrices:

 - MeqVector            MeqComposer: n scalar children 
 - MeqMatrix            MeqComposer: 
                        - nxm children         
                        - m MeqVector children -> nxm matrix
 - MeqTensor            ... later? ...

NB: At this moment, a child may be defined as a record or a string
(node-name). It should be simple to extend this to numeric values.
Internally, this would be treated as the equivalent of a MeqConstant,
and that is what one would get out when extracting such an element.


# Extract individual elements (or submatrices):

 - MeqSelector          extract a specific element [i,j,k]
                        (or even sub-matrix [ii,jj]?)



# Some special matrices for convenience (and consistency):

 - MeqDiagonalMatrix    n children -> nxn matrix
 - MeqUnitMatrix        specify how?
 - MeqRotationMatrix    2x2:  cos() sin() 
                             -sin() cos()

 - MeqSpigot            is a 4-element MeqVector
 - MeqSink              takes a 4-element MeqVector

 - MeqStokesMatrixLinear     linear polarisation        
 - MeqStokesMatrixCircular   circular polarisation        



# Vector/matrix operations are mostly extensions of existing
# MeqMath node classes (unary and binary):

 - MeqMultiply          scalar/vector/matrix multiplication
                        depending on children
 - MeqInvert            matrix inversion (very powerful!)
 - MeqTranspose         trivial for scalars
 - MeqDirectProduct     trivial for scalars
 - MeqDotProduct        vectors only?
 - MeqCrossProduct      vectors only?

 - MeqRotate            vector, by a given angle


NB: Once you have generated a few examples, perhaps our Math Master 
can implement (and test!) most of these node classes (and other ones)


                      ==========================================
