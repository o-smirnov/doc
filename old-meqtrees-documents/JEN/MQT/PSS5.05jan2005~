file: ../PSS/PSS5.29dec2004


      ====================================================
      Input for PSS5 meeting, wednesday 29 dec 2004, 15:00     <---!!
      ====================================================

Participants:
  - RXA: Rob Assendorp
  - GVD: Ger van Diepen
  - RJN: Ronald Nijboer 
  - JEN: Jan Noordam
  - TAO: Tom Oosterloo
  - OMS: Oleg Smirnov
  - AGW: Tony Willis

For information:
  - MAB: Michiel Brentjens
  - WNB: Wim Brouw
  - AGB: Ger de Bruyn
  - MVH: Michiel van Haarlem
  - HAH: Hanno Holties
  - JXR: John Romein
  - KVS: Kjeld van der Schaaf
  - CMV: Marco de Vos



           Meeting schedule
	   ================

Wednesday 15:00, Multi-Media Room.

Please prepare by reading this thoroughly.


	   ===========
           New recruit
	   ===========

Dr Maaijke Mevius has accepted the job, and will start around 1 Feb
2005. She will be full-time PSS, stationed in Dwingeloo, and will
concentrate on MeqParm issues (MeqParm table tools, and the class
itsef).

For the moment, she will share a room with Lars, in the former
library. After Algemene Zaken have moved to a lush portacabin in
Q12005, there will be more room for the PSS team in the main building
in Dwingeloo.  I hope that we can get a few rooms close together.



	   ===================================
	   A better name for the P[I]SS system
	   ===================================

I offer a bottle of Good Stuff for the winner of our new-name
competition. 

  - RXA: Jones Equation Nodes (JEN)               (rejected, of course)
  - RXA: Arbitrary Measurement Equation Nodes (AMEN)
  - RXA: Flexible Measurement Equation Solver (FlexMeqs)
  - RXA: Fleqs or Meqs
  - RXA: A logo, which my mailer could not reproduce.
  - RJN: SElfcal module for Solving Arbitrary M.E. (SESAME)
  - OMS: SecSy: Selfcal System 
  - GVD: FRAMES: Flexible Radio Astronomy M.E. Solver
  - GVD: FLAMES: idem, without radio
  - GVD: GAMES:  idem, with Generic i.s.o. Flexible
  - OMS: TIMBER: Trees for Interactive Modelling, Building, Evaluation
                 and Reduction
                 Can optionally be extended to TIMBERLAND via Large Astronomical Numeric 
                 Data (or something along those lines).
                 Timber Is a Model Building and Evaluation Resources
  - AGW: FIDO: FIx Data and Observations
  - JEN: Panther: (sleek, fast, versatile)
  - AGW: FRODO - Flexible Radiotelescope Observations Doctor and Organizer
  -      FRODO - Flexible Radiotelescope Observations DOctor
  - GVD: FAMES   Flexible Astronomical Measurement Equation Solver
         POFES   POlicy Free Equation Solver
         GAVES   Generic Astronomical Visualiser and Equation Solver
  - JEN: MeqTree (or MeqBoom, to give it a more Dutch flavour)


OMS: Here's a derived submission then: TIMBA (e.g. Trees for Interactive 
Model Building & Analysis). Why this is a good name:

(a) Easy to say, rolls off the tongue;
(b) Has an obvious phonetic connection to "timber" and thus trees;
(c) Has positive aesthetic connotations, being apparently the name for 
the Cuban variant of salsa music:

http://en.wikipedia.org/wiki/Timba

<<<Also different from salsa is the frequent shift from major 
<http://en.wikipedia.org/wiki/Major_key> to minor 
<http://en.wikipedia.org/wiki/Minor_scale> keys (and vice versa), the 
highly complex rhythmic arrangements (often based on santería 
<http://en.wikipedia.org/wiki/Santer%EDa> or abakuá 
<http://en.wikipedia.org/w/wiki.phtml?title=Abaku%E1&action=edit> 
rhythms), the shifts in speed and the large number of orchestrated 
breaks, or ‘bloques’.>>>

<<<Though timba is considered to be a form of popular music, the 
technical mastery of timba is only possibly through highly trained 
musicians, who have solid backgrounds in classical music and jazz, as 
well as traditional Cuban music 
<http://en.wikipedia.org/wiki/Cuban_music>.>>>

<<<Though timba is not overly popular in the world-wide salsa scene 
(many dancers considering it to be difficult to dance), it has found a 
niche among a growing number of fans and has been influential amongst 
Cuban-American and European salsa musicians.>>>

Sounds just like a metaphor for our system, no? ;)

Cheers,
Oleg






GVD: Before deciding on a new name, it should be checked (via Google)
if it does not exist already. Also we must make sure it does not mean
something bad in, say, French or Spanish. For example, I noticed that
FLAMES is the name of a VLT instrument.  TIMBER is the name of an XML
data base system.

Anyone else? I want to change by January 1st 2005.





	   ===================
           Short-term emphasis
	   ===================

Three points:

    -) Robustness of the Kernel: Exercise, exercise, exercise...!
    NB: OMS will start a kernel bug/feature reporting system.

    -) Canned trees (without LSM, for the moment). See below.

    -) Water-hole. See below.


I want these three things to be in a workable state BEFORE the
Christmas holidays. This will allow me to generate and test most of
the canned forests for our focus program over Christmas, so that we
can start on real data (3c343) in the new year.
 


           ================
           Water-hole (RXA)
           ================


RXA will report on the status.




           =================
	   Streaming uv-data
           =================


Today Ger de Bruyn gave us a demo of the AIPS++ uv-data vieuwer. It is
possible to load significant amounts of uv-data into memory, and then
let it stream past in any dimensions that you select. He chose
frequency channel (horizontal) vs baseline (vertical) in some order,
and showed a movie along the time-axis. The data happily streamed
past, showing all kinds of interesting features that astronomers want
to see (this would be perfect for the coffee-machine monitor!).

Rene Vermeulen suggested that it should actually be combined with an
interactive flagger, where the user can fiddle the thresholds etc and
see what happens. 

I draw two conclusions from all this:

  1) AIPS++ is getting its act together, which is good for us because
     we will be leaning on them for some time to come.

  2) It is not often that you see astronomers salivating. When it
     happens, we should pay attention. 

We can do this too, including the interactive flagger (which the
AIPS++ setup will not easily allow, because they get their speed from
pre-loading the data, and doing any operations on it). Already we have
the concept of multiple built-in viewers (dataCollect nodes that
collect data from an arbitrary set of child nodes). We can have one of
these before and after a flagger, and allow the user to fiddle the
MeqParm (or the MeqConstant) that controls the flagger threshold(s)
etc. So our only concern here is speed, both Oleg's data streaming,
the publishing, and Tony's display of the result. Maybe we need
something extra, in addition to the wonderful stuff that Tony is
producing now. Let us discuss this at our next videocon next week,
Tony.



	 ======================
         Solver and supersolver
	 ======================


On another subject: Ger van Diepen and I had a discussion about
solvers and super-solvers. He will summarize this in a separate email.

Both these issues should find their way into Bugzilla, of course.







































	   ===================
           Visualisation: AGW:
	   ===================

Since this is probably going to be a 2-person videocon, I will use
this for fairly detailed feedback about the stuff that is available
now, and the directions in which we should move from here. After all,
these videocon invitations contain a substantial part of the project
memory. (Interested people should collect them).


First of all, I have been playing with stuff that Tony checked in on
monday. I have the following remarks. First the serious ones:

  -) MeqStdDev is indeed available, but is produces the WRONG result.
  I have a complex input array: MeqToComplex(MeqFreq, MeqTime). Since
  both the real and the imaginary parts vary over the domain, I expect
  the MeqStdDev result to have non-zero real and imaginary parts.
  However, the real part is zero. The imaginary part has the correct
  order of magnitude, but some checking is probably not a luxury.

  -) My browser got into a mode where, when I tried to visualise a
  cache-result of another node (not a dataCollect), the Hippo screen
  came up but immediately disappeared....? This ONLY seems to heppen
  if I have a Qwt plot in a panel. Some interaction with Qwt?


Obviously, the first one has to be repaired (and tested!), although I
cannot guarantee that I will attempt to update the system in Oleg's
absence. Of course I have lots of positive remarks also:

  -) I actually got a plot with crosses on it, using my own tree, and
  the attributes as described by Tony. A great moment.

  -) I showed it to our spear-point user (MAB), who immediately got
  the point and wants to use things asap. He suggested that we should
  have some way of fixing the scale in a plot, or including the
  origin. 

  -) I have become a little more proficient in manipulating panels on
  the browser. We still have to fine-tune a bit, but I think that this
  way of organising things has great potential.

  -) I love the feature where we can dissociate a plot from its
  browser panel, and put it into a separate window for all kinds of
  manipulations. What manipulations can we get here? Does that include
  a data-inspector like Hippo has?

  -) When I plot the dataCollect that contains the data_type='err',
  it does not plot anything....

  -) MeqMean produces a vellset ARRAY of the requested shape, with all
  the same values. I assume that this is what we agreed. I also
  checked whether it produced the correct number, and it did! However,
  the plotter cannot handle it when the vellset has multiple cells,
  but only a single number.


I will now develop a standard solver-unit, any number of which can be
plugged into the s2s tree. Each has two visualiser-units attached to
its input reqseq, one for watching the relevant condeqs, and another
one for visualising the values of the relevant meqparms.  The two
visualisers are versions of a standard visualisation unit that can be
used to plug nuil-in views into any point of the tree.  All
solver-units and visualiser units are easily accessible from the top
of the browser, where they can be (de-)activated at will.

At the videocon, I would like to discuss some philosophical issues, so
that Tony has something to ponder under the Christmas tree. Consider
the existing example, as described by Tony:


attrib_xx1 := [color="blue", plot_type= "errors", label="xx_data"];

mqs.meq('Create.Node',meq.node('MeqDataCollect','data1',children=child_str1,
        extra=[top_label=hiid("Visu"), attrib=attrib_xx1]));


attrib_err1 := [color="black", plot_type= "errors", data_type="err", label="err"];

mqs.meq('Create.Node',meq.node('MeqDataCollect','data3',children=child_str3,
	extra=[top_label=hiid("Visu"), attrib=attrib_err1]));



mqs.meq('Create.Node',meq.node('MeqDataCollect','concat',
	children="data1 data3", extra=[top_label=hiid("Visu")]))


So if you click on the node labelled 'concat', the plot tree will
create the proper plot layout etc for each node in the tree as it gets
processed.

If you click on the 'data3' node you will get an error message as you
can't plot errors without associated data.

If you click on the 'data1' node you will get an a plot of points with
no errors.


My main reaction is: It works (except for MeqStdDev), which is what I
need, so please do not change it until we agree to do so. However, I
have the following problems:

   -) It seems to me that the contributing dataCollect nodes should be
   standalone building blocks. They should not know ANYTHING about the
   kind of combined plots that they may be used for downstream.  Their
   attributes should ONLY contain information that allows them to be
   plotted by themselves. So: It is allowed to specify a (default)
   plot_type='realvsimag' like before, but no data_type='err', since
   that is not relevant here. 

   -) The concat node defines the combined plot, so its attribute
   record should specify which of its dataCollect children contains
   the mean values, and which contains the errors. Its attribute
   plot_type='errors' (or whatever) OVERRIDES the default plot_type in
   the children, since the latter are only relevant if these children
   are plotted by themselves.

   -) Obviously, the simplest way to combine the plot-records of two
   or more dataCollect nodes is to just specify them as children of
   another dataCollect node, without specifying any further attributes
   (the top_label=hiid('visu') is not needed because it is supplied as
   a default). Your Python script must be able to figure out whether
   to put things into a single plot, or in separate ones.

I think that Oleg's hierarchical plot-record scheme, which is already
implemented in the current dataConcat class is extremely powerful, and
we should fully exploit it. However, it took me a while before I
realised the implications, and I bet that there are some possibilities
that none of us have seen yet. As Oleg rather darkly put it:

-----------------------------------------------------------------------
> Although the mechanism should be more general -- from the visualizer's 
> point of view, you just have a plot-record containing the values to be 
> plotted, and another containing the errors (real and imaginary). The 
> top-level attrib record then specifies which is which. I.e., something 
> along the lines of:
> 
> visu = { value = [ {value = [  value=[<mean values>,...],... },
>                              { value=[<error values>,...],... } ],
>                     attrib = { plot_type=whatever, value_index=0,error_index=1} ]
> 
> The top-level attrib record (visu.attrib) then tells you to use value[0] 
> for the coordinates, and value[1] for the errors, while the sub-records 
> found in value[0] and value[1] contain the actual complex values. We 
> would then structure our DataConcats, Mean and StdDev nodes to produce 
> the expected visu record.
> 
> Note to Jan: value_index and error_index is 1-based in Glish, and 
> 0-based everywhere else.
 -----------------------------------------------------------------------

The best way to move forward is by playing: You (we) should construct
a series of dataCollect trees of increasing complexity and hierarchy,
and check with the browser how their plot-records come out at the
other end. This will then guide you in writing a clever Python script
that can unravel plot-records of fiendish complexity in an organised
sort of way, and ALWAYS produce one or more plots.

Obviously, we should pay lots of attention to labelling plots....

Let us discuss all this tomorrow.



 




                    =====================================
                    =====================================






















