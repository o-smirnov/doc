file: ../MeqTrees/PSS4.23mar2004


         MeqForest execution (OMS)
	 =========================

  -) clear all publishing (OMS will supply this function)

  -) flush MeqParms (memory)




         MeqSolver (GVD)
	 ===============

  -) GVD has 'broken open' the solver, in the sense that the various
  operations (clearing, accumulating, inverting) can now be done more
  or less separately. GVD and OMS have written down the new commands,
  and they will add them to the 'kernel manual'.

  -) JEN has tested the new solver, and it reproduces the behaviour
  that it had before. It will be exercised more vigorously in the next
  few days.

  -) JEN has requested two additional features: The possibility of
  specifying equation weights, and the possibility to specify an
  'update-gain-factor' smaller than unity.



         Growing domains
	 ===============

  -) JEN has experimented with the concept of 'growing domains' with
  his own solver. To recapitulate the idea:

     -) We want to process small chunks of data (e.g. 10 sec) at a
     time, for two reasons:

        1) In order to follow rapid variations of a MeqParm, we have
        to solve often.

        2) To minimize the total amount of data that is held in the
        (potentially large number of) MeqNodes.

     -) However, we want to maximise the signal/noise ratio of the
     solution by solving for polcs that have domains that are as large
     as possible. (The assumption is that MeqParms vary smoothly in
     time and freq).

     -) This is why we developed the idea to solve for polcs that are
     valid for increasingly large domains. The idea was not to clear
     the solution matrix after each 10 sec solution, but to continue
     accumulating equations in it. The matrix would be inverted from
     time to time to update the MeqParms, so that rapid variations
     would be followed. The hope was that the errors due to having
     pre-update, and thus 'wrong') equations in the matrix would
     average out as the domain grew.

  -) JEN's experiments show that the latter assumption may be too
  optimistic (there are pictures to illustrate this). It is possible
  that it is still more or less valid in many practical cases, but it
  seemed better to look for another solution. Fortunately, there seems
  to be one that is fully local to the MeqParm, and which retains the
  properties that we are looking for:

     -) A separate solution (polc) is made for each sub-domain
     (e.g. 10 sec), with a minimal polynomial degree (0-2 max).

     -) Each solution is used to update the 'overall' polc that is
     valid for the entire (growing) domain. 

     -) The overall polc is used to predict the values for the next
     sub-domain.




  -) Left from last time: It would be nice if the MeqParm could decide
  for itself whether the domain of its solvable polc has grown too
  large for the specified polynomial degree. It would then notify its
  solver, which would do 'somthing sensible' with the information.

     -) If a domain is getting too large for its polynomials degree,
     the update values for the higher-order coefficients will be
     larger than those for the lower-order ones. I will experiment a
     bit.



         Explicit switches vs implicit assumptions
	 =========================================

  -) OMS will make a list of all implicit assumptions (like the one
  above) in the system. We will then discuss the pros and cons of
  explicit switches and implicit assumptions.

  -) My own list of unwanted impliciticity (not complete):

     -) I now distinguish node-states by the presence of either
     'result' or 'cache_result' fields. I would prefer an 'type' field
     or something.

     -) The presence of a 'fail' field instead of a cells or
     something. I would prefer the cells field to be present always,
     but it could be a fail.

     -) The solver will only do a .getResult() to its children (and
     thus accumulate equations to the matrix) if the request contains
     a MeqCells object.


  -) An explicit switch makes clear the intent. The absence on some
  stuff that is needed to carry out this intent then leads to an
  error, so that the user knows that something is wrong.

  -) Implicit assumptions (like the presence of a cells field) may
  cause behaviour that was not intended, without any feedback.

  -) Explicit switches also make it easier to read requests etc, and
  to keep track of what is going on. Especially for users that do not
  know the arcane reasoning behind the assumptions, which might or
  might not be written down...


         MeqCells
	 ========

  -) OMS has written a proposal. GVD agrees in principle, but has some
  reservations:

     -) LOFAR subband selection: 40(80) MHz gets digitised, in
     contiguous chunks (subbands) of 256 kHz. Any subset of those
     subbands may be selected for further processing. 

     -) The selected subbands are split into 'channels' of 1 kHz (but
     other channelwidths are possible, down to 0.1 kHz). The channels
     of different subbands are on the same overall grid (?).
 
     -) So, we have a justification for the proposal to have cells
     that have multiple non-contigous ranges (subbands) of regular
     freq channels


  -) OMS has sent the Glish files that enshrine the new MeqCells and
  MeqDomain (meqtypes.g and meptool.g) to JEN, who has switched over.
  However, since the C++ system has not been upgraded yet, nothing
  works for the moment.


         MeqFlagSubtract/MeqIntegrate (OMS)
	 ==================================


  -) In addition to a simple flagger ( MeqFlagSubtract, see last
  week), OMS is thinking about a node that integrates the uv-data to
  larger cells. This has the following potential complications:
    
     -) Taking flags and weights into consideration.

     -) Remaining cells at the edges
     


         MeqDFT (GVD)
	 ============

  -) At this moment, a peeling source is predicted for its own flux
  centre, i.e. we assume that the uv-data has been shifted to this
  point.

  -) However, if we wish to take a few other (contaminating) sources
  into account, we have to shift their predictions to the position of
  the peeling source. (NB: we can still predict them at low (f,t)
  resolution, because we only need them approximately)

  -) GVD points out that, when we solve for the position of a peeling
  source, we do not want to shift the uv-data after each solution.
  Instead, we should have a small MeqDFT of the peeling source.
 
  -) Concluding, I propose that we ALWAYS have a MeqDFT node in the
  source predict branch, but that it should be intelligent enough to
  decide that it should do nothing (except passing on the result) if
  the position-shift is zero.
    


         GSM/LSM (OMS)
	 =============

  -) We should put outselves into a position to convert and use
  NEWSTAR source model (.MDL) files.

  -) AGB tells me that most of the sources for 3c84/300MHz are so
  extended that he uses CLEAN components. How are we going to deal
  with that? 

     -) Combine a group of CLEAN components into an extended
     Cat I component, and solve for its parameters?
 
     -) The Cat II prediction process: Combine all fainter components
     (CLEAN or otherwise) of a small region into a small map, anf FFT
     them together.
 
  -) In any case, most of the 3c84 sources are extended, while we can
  only deal with point sources. We should start thinking about trees
  that can handle slightly extended sources. Perhaps we can get away
  for the moment with the assumtion that the instrumental parameters
  are constant over the source.

  -) We will approach this in a step-wise fashion:

     -) OMS will convert MDL tables into Glish structure.

     -) OMS will convert the regular components into GSM/LSM
     components

     -) JEN will atempt to derive parametrised components from CLEAN
     components.

  -) Finding and updating GSM/LSM sources from residual maps has a
  lower priority for the moment. But 'closing the loop' remains an
  important goal.


----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------


         Some strategic points
         =====================

  -) GVD will keep the MeqSolver, and write specialised classes
        like MeqDFT and MeqUVW.


  -) The following is roughly in order of priority:
     - Domain/cells (OMS)
     - MeqParm (all)
     - Growing-domains experiment (JEN)
     - MeqDFT (GVD)
     - MeqFlagSubtract (OMS)
     - MDL -> Glish (OMS)
     - CLEAN comp -> extended sources (JEN)
     - Chained solvers (ripple-peeling).
     - Predicting extended sources.
     - PSS3 emulation.   (May)
       - Larger trees.
     - Deriving secondary MeqParms (beamshape, ion.screen)
     - Predicting and subtracting Cat II sources.
     - WSRT M.E.
     - Processing strategies (scripts)
     - Closing the loop:
       - GSM/LSM organisation (VO interaction)
       - Residual imaging (facets)
       - Updating the GSM from residual images (trees also) 
     - Writing our article...

  -) If we want a Python interface to the kernel in september, we
  should start relatively soon, because it will take some time for
  errors to die down. However, we want someone from outside our group
  to be the main user (and tester!) of this interface. A desirable 
  first application would be a tree browser (Nijmegen...?)

  -) JEN will ask WNB about further options for the AIPS++ solver.
  (adding/subtracting matrices etc). 




                               =================================
