file: ../PSS/PSS5.24nov2004


      ====================================================
      Input for PSS5 meeting, wednesday 24 nov 2004, 15:00     <---!!
      ====================================================

Participants:
  - RXA: Rob Assendorp
  - GVD: Ger van Diepen
  - RJN: Ronald Nijboer 
  - JEN: Jan Noordam
  - TAO: Tom Oosterloo
  - OMS: Oleg Smirnov
  - AGW: Tony Willis

For information:
  - MAB: Michiel Brentjens
  - AGB: Ger de Bruyn
  - MVH: Michiel van Haarlem
  - HAH: Hanno Holties
  - KVS: Kjeld van der Schaaf
  - CMV: Marco de Vos



           Meeting schedule
	   ================

Wednesday 15:00, Multi-Media Room.

Please prepare by reading this thoroughly.


           =======================
	   WSRT link
	   =======================

  -) scientist meeting (next wednesday)

  -) time-scales (LFFE)

  -) requirements (water-hole)

  -) what are the missing pieces?

     .....


  -) increased RXA

  -) new personnel (to do what?)



	   ================
           Team interaction
	   ================

  -) Writing node classes is too painful.

  -) But VITAL to spread the knowledge

     - just math 

     - interaction with result

     - interaction with rider

  -) OMS should teach by template (documentation later)

  -) Cookbooks then written by others
 
  -) Writing browser plugins (state-record, result, python)




	   =============================
           System Interdependence Issues
	   =============================

The PSS system makes use of various aspects of the LCS system
(e.g. sockets, arrays, build system, namespace etc) and the AIPS++
system (fitting, imaging, glish, tables etc). Since the BBS team is
not planning to use any of the PSS software directly, and we plan to
export the PSS system to Westerbork, Penticton and other places, we
have to consider the pros and cons of these interdependencies. OMS
will make a proposal in the next few weeks, which will then be
discussed.




           ================
           Water-hole (RXA)
           ================


RXA will unfold his plans. For reference: The following (evolving)
repositories are needed:

   -) RXA: A range of (short) calibrator observations (various
   frequencies, some polarised)

      - e.g. 10406700_S0_T0  (3c147, 21cm, 30 min)

      - and a simular one for 3c286 (21cm): polarised


   -) TAO: Some suitable 'science' MS's (e.g. spectral line). These
   could be pre-flagged.

   -) JEN: A range of canned C++ forests, in files.

   -) RJN: LSM's for specific objects.

In a later stage, a GSM could be added to this system.


























































===========================================================================
===========================================================================
===========================================================================
== Our focus program: Spigot2sink trees of increasing compexity ===========
===========================================================================


The following list of (canned) spigot2sink forests is just a start.
Their available number and complexity will rapidly increase.

We need a working example of a simple python interface (with
explanation) with which to execute a spigot2sink forest with a given
MS.


Finally, at the suggestion of GVD, I hereby include performance
testing as an explicit goal, both in speed and memory use. Speedwise,
this includes data-access (getting in and out of an MS), MeqParm
behaviour, and the identification of bottlenecks in specific nodes
(like CAt II prediction, or the full-resolution shift of the
phase-centre for peeling). Memorywise, it includes caching strategy,
and the minimisation of the number of nodes.



      ==========================================
      spigot2sink (1) Just uv-data visualisation
      ==========================================


   -) JEN: spigot2sink, with fixed views (nodes) that are visible and
   activated from the top of the browser

   -) AGW: Visualisation nodes (for data collection and for combining
   them). Tony has experimented with a system of XML config files,
   which can be referred to from the nodes. The default XML files may
   be costomised by the user, if required. The following nodes are
   urgently needed:

      a) Visibility data from groups of ifrs (e.g all XX) in the
      complex plane (2D). Rather than tranporting the values of all
      the cells, it is sufficient for the moment to transmit only the
      rms over the entire vells (ignoring flags, of course).

      b) Spectra (3D), real and imaginary parts. To increase speed, we
      might limit the number of ifrs per view (e.g. all combinations
      with a particular station/telescope).

   -) NB: Is there any way in which we can identify specific dots
   (e.g. outliers) by clicking on them in the plot? No.

   -) RJN: make an image of the raw data

   -) Question: How do we deal with different freq bands? (later)

   -) General process monitoring and control:

      a) OMS: Activation and de-activation of data collection and data
      combining nodes by clicking on the browser.  Plots are generated
      by these nodes ONLY when activated.  Otherwise, they do not
      burden the system. NB: This clickable (de-)activation will be
      made a property of ALL nodes, which will lead to intersting new
      applications (e.g. solvers).

      b) JEN: Progress indicator widget (request-domains)

      c) JEN: Domain increment specification (for MeqSink request
      sequence): Use a Glish script?

      d) OMS: Debugger functionality: Breakpoint, pause, step, resume.
      All these functions to be controlled from the browser. NB: Until
      we have parallel processing, a 'step' just executes a single
      node. When a breakpoint is set, the system will stop at the same
      point after resume, until the breakpoint is removed.

      e) JEN/OMS: Re-execute a given node with its current request.
      Possibly in an endless loop, while fiddling MeqParm(s) and
      visualizing. (This is done when the system is halted). Can be
      done from a Glish script (JEN), but would be much more
      convenient from the prowser (OMS).


   -) NB: Synchronisation: Since we use the publish-subscribe system,
   the events just pile up before the python visualiser, while the
   processing goes at normal (lightning?) speed. Often, it is better
   to operate in a step-by-step mode.



      ========================
      spigot2sink (2) Flagging
      ========================

Including its visualisation (before and after) and flag-statistics:

   -) JEN: canned spigot2sink forest
   (with MeqParm threshold, to be fiddled?)

   -) OMS: proper treatment of flags.

   -) AGW: Ignore flagged data when visualising

   -) RXA: Flag summary and statistics? Use AIPS++?



      ===================================
      spigot2sink (3) Bandpass estimation 
      ===================================

Just solve for a 5th-degree polynomial in the frequency direction.

   -) JEN: canned spigot2sink forest

   -) Spectrum visualisation before and after



      ======================================
      spigot2sink (4) Gain and phase selfcal 
      ======================================


On a bright calibrator, i.e. without LSM.  The 'model' is a 1 Jy point
source in the centre of the field, with a spectral index of -0.7 (?).

   -) JEN: spigot2sink forest, with multiple solvers. For the moment,
   only standard math nodes have been used.

      a) Straightforward solution for XX/YY phase and gain per
      telescope.

      b) Redundant-baseline solution, followed by a solution for
      absolute gain and phase gradients (align).

      c) Solvers may be (de-)activated via the browser.

   -) OMS: MeqParm in its current state is sufficient for calibrator
   selfcal (but for real reductio we need the new behaviour that we
   figured out at ADASS):

      a) Solve for one time-slot (1-2 min) at a time, save a separate
      polc per timeslot in the MeqParm table.

      b) When asked for values, it uses its available polcs somehow.


   -) AGW: Condeq visualisation for all solvers. The simplest way is
   to have fixed views that show the XX and YY condeqs in the complex
   plane. This uses the same 2D visualisation nodes as above. More
   advanced viewers that show the convergence can be developed later.

   -) JEN: Show solver metrics (use the browser)

   -) Subtract the 'model' from the corrected uv-data (NB: This is a
   demo of peeling, with one peeling source).

   -) RJN: Make an image of the residual uv-data


NB: While constructing these trees, I came to the conclusion that the
only way to include constraints in the solution seems to be to make a
pre-defined solver, i.e. one that is given both its children (condeqs)
and its solvable MeqParms at creation. It is still possible to change
its solvable MeqParms afterwards, but this is not the recommended way
of doing things. Rather, I foresee that there will be a multitude of
pre-defined solvers for different purposes, which can be activated and
de-activated at will. Such a solver is cheap (just one node), and does
not burden the system when de-activated. NB: The various solvers will
be visible at the top of the browser, just like the visualisers. 

As an upshot of this: Oleg, what should be the name of the defrec
field for the list solvable MeqParms when creating a solver?


      ====================================
      spigot2sink (5) Polarisation selfcal 
      ====================================

On a bright polarized calibrator (3c286 has 10% U at 21cm).

   -) JEN: spigot2sink forest, with multiple solvers (ReqSeq)

   -) JEN: XX*YY - XY*YX = I^2 - (Q^2 + U^2 + V^2)
 


      =======================================
      spigot2sink (6) Manual MeqParm fiddling 
      =======================================


Changing the value(s) of MeqParm(s), while executing and visualising:

   -) Examples of its use:

      a) Fiddling the X/Y phase-zero difference and/or Faraday
      rotation, while visualising XY/YX, or solving for dipole errors.

      b) Fiddling StokesQ, while visualising XX/YX, or solving for
      dipole errors.

   -) OMS: Start/stop an endless loop (from the browser), in which the
   a selected node calculates a result for the same (current) request.
   Obviously, this should only be possible when the system is halted,
   and be de-activated automatically when oparations are resumed.

   -) AGW: An elementary MeqParm fiddling widget, to be activated from
   the browser (plugin). Uses getState and setState funcions. For the
   moment, only allow one coefficient (c00) to be modified.

   -) AGW: Phased plan for MeqParm visualisation (eventually this must
   include the available polcs in the MeqParm table). To be activated
   from the browser (plugin).





=========================================================================
Other issues
=========================================================================


          ==============
          Canned forests
	  ==============

Generating complex trees will be an advanced topic for some time to
come. Moreover, the generation of a large forest from Glish or Python
will be slow. Therefore, we will offer the user a range of 'canned'
C++ forests for specific applications, which can be quickly loaded
from a file. A canned forest has the following properties:

   -) It will adapt itself to a given MS. In the case of the WSRT, it
   will be designed for the nominal number of stations (14) and
   correlations (4, linear):

      -) Check whether the forest represents a suitable M.E. for the
      observation?

      -) Non-available ifrs: If a spigot cannot find its data, it
      returns a FAIL, wich should be handled gracefully, e.g. by a
      solver.

      -) If a solver is asked to solve for MeqParm(s) for which there
      is not enough information (e.g. in case of a missing antenna),
      it should handle this gracefully by solving for the others
      (e.g. by SVD), and not updating the relevant MeqParms.

         GVD: A solvable parameter coefficient will only be added to
         the solver if the solver gets perturbed data for it. So it
         will never appear in the solver if there is no data for it
         (e.g. if a station is not part of the MS).

      -) Connection to MS info, e.g. station positions (for DFT and
      redundancy calibration) etc. Such info should be made available
      to the tree in regular nodes. How is that done? OMS suggestion:
      send up the data-stream header in the request rider via the
      sink, and let the relevant nodes look for their own information,
      using a field-specification (defrec.header_field_id = hiid).
      This is elegant, because it allows for time-variable info.

   -) The generation/filling of the parm table needed for the given MS
   and tree has to become part of the canned forest adaptation.

   -) It will adapt itself to a given LSM. For the moment this means
   that it will have a sufficient number of 'receptors' to which
   prediction trees for either Cat I or Cat II sources can be
   attached.

      -) Check whether the LSM and the MS overlap in the sky....

      -) Attach source prediction trees from the LSM to the successive
      peeling units. These are different for Cat I/II. Unused peeling
      units are shunted out, or even deleted. Qualifiers [q={q}] in
      the node-names of the peeling-units must be modified [q=xyz].

      -) Something similar must be done for non-peeling trees.
       

   -) It is possible to replace specific nodes/subtrees of a canned
   forest with other nodes/subtrees. This allows people like Sanjay to
   experiment with their own Cat II prediction node, without having to
   generate a complex tree himself.



   -) GVD: Is a distributed MeqForest still on your list?




         =====================
         Local Sky Model (LSM)
         =====================


Solving for LSM source parameters from residual images, using the
individual source MeqTrees that are stored in the LSM.  This is
stand-alone demo, within RJN's stand-alone environment. More details
are given in a separate document.














=====================================================================
=====================================================================
=====================================================================
=====================================================================
Appendix
=====================================================================


	  =========
          Documents 
	  =========

Here is a reminder of the subjects that each person is supposed to be
a specialist in, and that should be treated in his document(s):


  -) OMS:

     - Update of the Kernel document, especially the interface

     - Template(s) for writing node classes

     - Template(s) fro writing browser plugins

  -) JEN:

     - Grand overview and Vision

     - Building advanced trees

     - Cat II prediction

  -) AGW: 

     - Meqs for dummies

     - Guide to PSS visualisation

     - Dummies' guide to DMI 

  -) RJN:

     - Personal learning log

     - Guide to the LSM (parametrized sources and 4D images)

     - Updating LSM parameters from residual images

     - PSS algorithms for the BBS team

  -) RXA: 

     - Personal learning log

     - Executing spigot2sink forests (working example: python gui)

     - From PSS water-hole to WSRT pipeline

     - How to write and install math node classes (and beyond) 

  -) GVD:

     - Implementing PSS processing schemes in BBS







           ===========
           The program 
           ===========


For the benefit of those who have lost sight of the overall program of
the PSS group, here it is again:

  - nov 2004) Exercition of the basic tree operations, as described in
  the rest of this document.

  - nov 2004) Simuated data from Haystack: Central Point Source, but
  more than one freq channel and time slot.

  - dec 2004) Demonstration of peeling on 3c343/3c343.1 @21cm: two
  bright point sources of roughly equal flux, 40' apart, i.e. about
  the FWHM of the primary beam.  This includes more sophisticated
  MeqParm behaviour, both when solvable and otherwise. Also the use of
  a simple LSM, with two Cat I sources. Simple update from residual
  images.

  - jan 2005) Something intermediate before 3c84....

  - jan 2005) Demonstration of Cat II prediction on 3c84. This
  includes the application (and solving?) of image-plane effects over
  extended sources or patches, using the ideas we developed at the
  last ADASS.  Also the use of a more complicated LSM, with Cat II
  sources in the form of parametrised components, and in the form of
  images of CLEAN components. Update from residual images.

  - feb 2005) Demonstration of LFFE reduction, especially those cases
  where there is no bright source in the field. Since the latter do
  not have enough S/N per time-slot to solve for individual telescope
  errors, they require the transfer of MeqParm values derived from
  calibrator observations, and the solution for phase gradients only.

  - mar 2005) Inclusion of the WHAT station in WSRT/LFFE reduction.

  - etc...




           ==============
           OMS priorities
           ==============

Summary of OMS priorities, as agreed on 10 nov 2004. 

  1) (Before 15 nov) We want to test a lot of things on 'LSM-free'
     spigot2sink trees, working on (short) WSRT calibrator
     observations. We need the following kernel features for that:

     -) Activating arbitrarty nodes, via the browser, and via
      defrec.control_state = 1 (default) or 0 (deactivated).

     -) Setting/removing breakpoints from the browser (and via
      creation defrec?)

     -) Pause/resume/step from the browser.

     -) Let a node re-execute itself with its current request. Default
      is eternal loop. Allow the setting of a fixed nr of times if
      that is easy to do.

     -) Verbose mode with different levels. At the first level, each
      FAIL result causes a node to publish, and its color in the
      browser to change. At the second level, all nodes 

  2) (Before 22 nov) Flagging. I understand that flags are read and
     written from/to the MS, and set by the MeqZeroFlagger and
     MeqMergeFlags. The next step is to take them into account in
     vells-math and solvers etc.  (Eventually, we also need a way to
     visualise flags)

  3) (Before 29 nov) Robustness of canned C++ forests:

     -) MeqSpigots that cannot find their data issue a FAIL. This has
      to be processed graciously by all nodes.

     -) MeqSolvers have to use SVD to deal with missing info, and to
      report (somehow) when it does this.

     -) A scheme for nodes to get specific information from the MS.
     Example: station positions.

----------------------------------------------------------------------

  4) Issues related to sources outside the field centre:

     -) UVW/LMN nodes: perturbed values (NB: I am assuming that, as
      long as we do not try to solve for station/source positions,
      things already work..?) 


  5) Dimension generalisation issues:

     -) New request/result structure (NB: I am assuming that the
     current request still has the old structure...?):

     -) DFT nodes: dimension generalisation...?

     -) Thorough testing of all features

     -) FFT-node (RXA)

     -) Solving for beamshapes and ion.phase screens (RA,DEC)

     -) Solving for extended sources from residual images (RA,DEC) 


NB: We need a system for notification of Kernel changes

NB: OMS would like some more simulated data-sets from Haystack




                  ========================================




















