file: PSS/OMS.14oct2004

Oleg,

Here is a list of things that beg your consideration.


   -) RXA would like the condeq to calculate the rms as well as the
   mean (with flags taken into account, of course). I propose that you
   deliver the true rms as well as the 'rmsms', i.e. the rms around
   the mean:
  
           nv = max(1,len(vv))
         mean = sum(vv)/nv
       meansq = sum(vv*vv)/nv
          rms = sqrt(meansq)
        rmsms = sqrt(max(0,(meansq - mean*mean)));


   -) RXA has tries to solve for more unknowns than data-points. I
   would have expected the (SVD) solver to make the matrix invertible
   by inserting 'a priori' information of its own, and to report what
   it had done. Obviously, either Ger or Wim (or both) should be
   gently steered in the right direction here. In the meantime, we
   should expect at least the MeqSolver node to report that it has not
   produced a solution, and that the MeqParms have not been updated.


   -) In this context, we have vowed that the MeqKernel will always
   fail graciously, and will never leave people in the lurch in the
   way AIPS++ so often does. Could you review the node reporting rules
   at the next PSS5 meeting next wednesday?


--------------------------------------------------------------------------

   -) As we discussed yesterday, there are cases where the list of
   children of a node cannot be fixed at tree-design time. Examples
   are solvers and Tony's visualization nodes (both urgent). In both
   cases, the actual list of children depends on the available
   interferometers, which is only known when the forest is generated
   for a particular MS. I suggest offering the following features:

      1) An (optional) .parent field in the node creation defrec. At
      resolve-time, this would be used by the node to add its name to
      the list of children of the node(s) specified in this field.  


      2) A mechanism to modify the list of child-names of an existing
      node. This would require some methods like:

        mqsv.meq ('Node.Set.Children', 
                  [name=<nodename>, children=<nodename(s)>, resolve=T])
        mqsv.meq ('Node.Add.Children', 
                  [name=<nodename>, children=<nodename(s)>, resolve=T])
        mqsv.meq ('Node.Remove.Children', 
                  [name=<nodename>, children=<nodename(s)>])


   I suggest that we offer both. For solvers/visunodes I prefer the
   first one, because it does not require any extra Glish/Python code
   when generating spigot2sink forests. But the meq methods open the
   way to other desirable possibilities, like inserting nodes
   on-the-fly between a parent and one of its children. To facilitate
   the latter, we might consider offering:

        mqsv.meq ('Node.Insert', 
                  [defrec=defrec, parent=<nodename>, 
                   child=<nodename>, resolve=T])

   Of course, this is only for the simple case of a single node with
   single child. In a later stage we can extend this to inserting
   entire subtrees, and multiple-child nodes/trees.
 

--------------------------------------------------------------------------


   -) For completeness, we also need the following method (where
   index=T returns a vector of node-indices rather than names):

        mqsv.meq ('Node.Get.Children', [name=<nodename>, index=T])       

   Thinking about it, this might turn out to be a VERY convenient way
   to access groups of nodes for specific processing. For instance to
   obtain lists of MeqParm names that are to be set solvable together,
   etc.  In fact, I propose a MeqNodeGroup class that has no parent,
   but only children. In the browser they would appear as root nodes,
   which not only gives an instant overview of the important node
   groupings, but also a rapid way to find them.

   Altogether, I feel that we have hit upon a major new feature of our
   lovely system, which will make it much more user-friendly. On the
   one hand, the knowledgeable user can get at any node to do what he
   wants. On the other hand, the vast majority of less sophisticated
   users can click their way towards any number of views and other
   processes that the tree-desiger has predefined for them. These
   packaged processes are easy to find (by means of a MeqNodeGroup!) 
   and to get used to, and they do not burden the system when
   inactive.

                      =================================

