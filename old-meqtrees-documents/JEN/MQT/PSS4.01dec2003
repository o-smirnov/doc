file: ../MeqTrees/PSS4.01dec2003



         Reminder of what we were trying to achieve
	 ==========================================


  -) I got my meqRippleSubtract tree working, complete with dummy
  LSM. It will now be easy to make a meqRippleSimulate.

  -) Fill the DATA column of the MS with simulated data, using the
  dummy LSM. RequestSequence? Make a map of the result.

  -) Subtract the same LSM from it, and look at the result at various
  stages. This implies pausing/stepping, and getting (and displaying)
  the result from selected nodes. Make a map of the result.



         The actual status
	 =================

  -) Oleg has solved most of the problems that I detected. I do not
  dare to use his gui, because it hangs my computer.

  -) I have a number of tools to inspect the workings of the tree. 
  This includes an easy way to get (sets of) nodenames, and plotting
  of the state extracted from a node and its underlying tree, to a
  specified depth. Examples will be on display.

  -) I have applied all this to the meqRippleSimulate tree, which
  predicts three aribtrary sources and adds them together. Field
  centre, uvw-coord, spectral window, timeslots etc are dictated by
  a Haystack MS (test.ms).

  -) Somehow, I do not think that the results are correct. The culprit
  is probably the DFT. Let's look at it together.

  -) The predicted data are not yet written back into the MS, so that
  we cannot yet make a map. NB: I still need to add a last stage to
  the meqRipplePredict tree that shifts the phase centre back to the
  original position.

  -) I also have a meqRippleSubtract tree, which can be used on the
  simulated data (see above) as soon as the MeqSpigot works.



        =============
	Solving (GVD)
        =============

  
From: Ger van Diepen  <diepen@astron.nl>
Subject: Solving in PSS-4; first ideas
Date: Tue, 25 Nov 2003 13:15:04 +0100 (MET)

1. The solver will be a normal node.
   It is constructed with an init-record containing a vector of
   strings giving the solvable parm names. Furthermore it gets an
   integer niter.

2. A getResult on the solver will generate a solution using niter
   steps. To do that the solver will append a rider to the request
   record containing the names of its solvable parms. It will do
   that for the first iteration only; it will be removed for the next
   iterations.
   Because Wim's solver creates new values, those values have to be
   sent to the parm nodes. That can also be done as a rider in the
   request record of the 2nd and next iteration.
   It is the question how the last solution can be stored in the parm
   objects. It is also the question how it is specified if the solutions
   have to be stored in the parm table and who is responsible for it.
   Wim's solver needs the old values and makes new values, so in
   principle it needs the old values. However, I believe that you
   may as well start with 0 for the old values, so that the new values
   give the solution refinement.

3. The Node class will interpret the riders in the request record.
   If it finds a solvable field, it will look if its name is mentioned
   in the solvable list. If so, it tells the derived class to set its
   state to solvable, otherwise to unsolvable (using setState).
   Because many nodes are not parms, the constructor might give a hint
   to the base Node class that it does not need to look at the
   solvable field.

4. If a parm is solvable, it will calculate the perturbed value for
   all its coefficients which are not masked as unsolvable in the
   parm table.
   It will generate a spid for it by adding the coefficient sequence
   number to the parm sequence number. This means that all parms (or
   all nodes?) need to get a sequence number with steps of 100.
   In this way you'll always get unique spids and is a spid easily
   mappable to parmid.
   Each result has a vector of perturbed values and an equally long
   vector of spids. Somewhere there has to be a map of parmid to parm
   name; it can be part of the result or be part of the node repository.

5. An expression needs to calculate the perturbed value for all spids
   in the results it gets from its children. For this reason there
   is a mergeSpid function.
   Class Function is already prepared for it; it calls the evaluate
   function for all spids in its children.
   So the vectors of perturbed values and spids will grow as you
   get to the root of the expression tree.

6. The getResult of the Condeq class returns in its main value the
   difference of both children and in its perturbed values the
   derivatives calculated from the perturbed values in both children.

7. The solver forms an equation for each time/freq value in each
   child. Of course, a solver can only have a Condeq as child.
   It is the question what the getResult of solver should return;
   maybe nothing; maybe it can do a last iteration (with everything
   unsolvable) to get the final difference. That also solves the problem
   how to send the last solution to the parm objects. But it costs
   an extra (needless?) predict.
   The solution can be returned as a rider.




                               =================================
