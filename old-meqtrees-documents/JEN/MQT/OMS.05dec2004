file: PSS/OMS.05dec2004


  1) Nodes issue requests to their children, and wait for their
  results. I would like to be able to specify 'step_children', who get
  requests, but who are not expected to return results. This is useful
  for visualisation etc.  06dec2004: Agreed. They will be treated
  EXACTLY like children, except they are not expected to produce
  results. So: multiple step_children may be specified, as a record
  that contains either node-names (string) or defrec records. The
  latter can be hierarchical, so their children will be created. 

  2) MeqParm: solve-polcs are still not (always) reported properly in
  the browser. 
 
  3) MeqParm_fiddle(): Works fine, and even shows the correct values
  of solve_polc. However, if I then execute the solver again, it stops
  at a breakpoint in the condeq(!?), which is not visible on the
  browser, and which I have not set. 

  3a) Even worse, the solve_polc value does not change, so the solving
  does not seem to work. 06dec2004: The solving works, but the MeqParm
  state does not get updated. The MeqParm will be cleaned up in the
  sense that it will be stripped of old baggage, prior to handing it
  over to a new person who will be responsible for it.
   
  4) s2s_noMS_XXYY_V: result-plotter crashes the browser when trying
  to plot the cache_result of noMS_root. The latter looks normal.
  NB: This does not happen with a similar tree that has no visualiser
  in it.....? However: the problem seems to have gone away....

  5) I would like to be able to supply a field defrec.defer=T to some
  nodes in a hierarchical defrec. This would cause this node NOT to be
  created (yet): This will be done later by the Glish program, which
  still has to collect all its children or solvable_meqparms etc.
  However, the node-creation would then continue with the children of
  the deferred node. Is this possible/easy/baddesign? 06dec2004: This
  can also be achieved by allowing the children of a node to be
  changed at any time. We need this in any case in the future, to be
  able to reconfigure a tree dynamically. For the moment, I have ways
  to deal with deferred nodes.
  
  6) I propose to associate each solver with two dataCollector nodes:
  One to visualise its children (condeqs), and the other to visualise
  its solvable meqparms. I propose to connect all three to the same
  reqseq, in the order: dc_condeq, solver, dc_parm. So, after issuing
  the request to the condeqs, these will show the input to the solver.
  Then the solver will re-use the results in the condeq caches, and
  finally the MeqParms will be re-calculated AFTER they have been
  updated by the solver. This entire solver-unit can be de-activated
  by de-activating its reqseq node. But it is also possible to
  de-activate the dataCollectors separately. 06dec2004: This issue has
  uncovered subtle problems that need to be addressed. OMS claims that
  we have been acidentally saved by caching, so it is good design
  after all.... More thought is needed.

  7) MeqBenchMark_ab does not execute: The fail message in the
  cache-result of 'solver' is: "Can't convert string to data-record
  (context DMI)". Can this be caused by my defrec field 'parent'?
  06dec2004: Solution: Make solvable_list (done).







---------------------------------------------------------------------
---- OMS program
---------------------------------------------------------------------

As we discussed (on 15 nov), we have to set some priorities, and back
you up with exercition of the system.

  -) I want your involvement in the 25 nov demo to be minimal: just
  some small modifications, and of course bug fixes and keeping the
  system in the air.

  -) I can see the following priorities:

     -) FFT node: This tests the generalised domain, and helps in
     launching the WSRT crowd in the right direction. It can be tested
     by RXA, who is the chief interested party. He could also use it a
     s a template for other such nodes.

     -) Cat II prediction: It is clear what has to be done, and we
     need it for ANY serious high-dynamic range WSRT reduction.

     -) MeqParm operation: Still a bit of a mess, but needed for real
     reduction. Let us use the ADASS trip to think that through.

     -) Resampling: Not vital at this moment, but needed for
     efficiency as soon as actual reduction starts.

  -) I will ask RJN to team up with RXA to become 'creative users',
  i.e. to exercise the current system things with meqsolve.g. Michiel
  and I will look over their shoulders.




                      =================================

