file: PSS/OMS.15oct2004

Just some ideas, for discussion.



---------------------------------------------------------------------
---- Manual fiddling, while solving
---------------------------------------------------------------------

I would like to be able to halt the system (at a breakpoint), and then
re-execute a selected node with its current request, while I manually
fiddle the value of one or more MeqParms. For the moment we can just
re-execute once, but in the future we should offer automatic
repeating, possibly with a time-delay each time.

I have a particular experiment in mind, where I solve for dipole angle
errors and ellipticities, while fiddling the WSRT X/Y phase zero
difference (PZD). I have a hunch that it might be possible to solve
for these parameters with an unpolarised source. Whether this hunch is
true or not, the demo will blow them away, and they will be braying
for more.

The obvious candidate node for re-execution is a solver, of course,
but there is no reason why we should not offer this for all nodes.
It should be trivial to implement: Just allow Node.Execute without a
request. This will generate an error if the node does not have a
current request in its state. 

It should be possible to control this from the browser, just like
halt/resume/breakpoint etc. (What is the status here?). While we are
at it, we might implement the option of a time-delay of up to a second
between successive requests from the sink. We also need a request
monitor, which visualises the progress through time/freq land. 

The MeqParm value fiddler is a first step towards a full-scale MeqParm
visualiser and control tool. We can only think about the latter after
we have a better idea about MeqParm operation. What we need for this
experiment is a little widget that pops up when you click on a MeqParm
node in the browser, and that gives access to its 'current polc',
i.e. the one that it has in memory. For the moment, it should be
sufficient to only fiddle the value of its c00 coefficient.

It should be possible to fiddle the value of any MeqParm, irrespective
of whether they are solvable or not! 


---------------------------------------------------------------------
---- ignoring spigots/sinks that cannot be connected
---------------------------------------------------------------------

Ideally, an institutional user has a number of standard C++ forests in
files, to be invoked to operate on different observations. However, it
may happen that certain telescopes/stations are not available. There
are two problems here:

  1) How should a spigot/sink react if it cannot find its ifr in the
  MS?


  2) How does the solver react when it is trying to solve for
  parameters of stations that are not there?




---------------------------------------------------------------------
---- OMS program
---------------------------------------------------------------------

As we discussed today, we have to set some priorities, and back you up
with exercition of the system.

  -) I want your involvement in the 25 nov demo to be minimal: just
  some small modifications, and of course bug fixes and keeping the
  system in the air.

  -) I can see the following priorities:

     -) FFT node: This tests the generalised domain, and helps in
     launching the WSRT crowd in the right direction. It can be tested
     by RXA, who is the chief interested party. He could also use it a
     s a template for other such nodes.

     -) Cat II prediction: It is clear what has to be done, and we
     need it for ANY serious high-dynamic range WSRT reduction.

     -) MeqParm operation: Still a bit of a mess, but needed for real
     reduction. Let us use the ADASS trip to think that through.

     -) Resampling: Not vital at this moment, but needed for
     efficiency as soon as actual reduction starts.

  -) I will ask RJN to team up with RXA to become 'creative users',
  i.e. to exercise the current system things with meqsolve.g. Michiel
  and I will look over their shoulders.




                      =================================

