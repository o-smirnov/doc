file: AGW.24jan2005: visualisation rules.


        Overview of what we agreed on dataCollect/plotting rules


      -----------------------------
      Definitions and overall rules
      -----------------------------

Leaf       = dataCollect node that collects vells
Downstream = towards the root (i.e. down the tree): child -> parent
Upstream   = towards the leaves (i.e. up the tree): parent -> child

1) Attributes in downstream nodes override upstream attributes

2) The system ALWAYS plots something (i.e. we do not want to see
useless messages like "plot cannot be made"!)

3) EVERYTHING HAS CONTEXT-SENSITIVE DEFAULT VALUES
 




      ------------------------------------
      dataCollect nodes
      ------------------------------------

NB: Remember that a dataCollect node is more general than just for
collecting visualisation information. 

The defrec of a dataCollect node has a field 'visu', which is a record
with the following fields:

# visu.top_label := 'visu'
# visu.value := can be anything, including a nested record
# visu.flags := mapped on .value  (optional, of course)
# visu.label := mapped on .value  (if not specified: vector of child-names)
# visu.attrib := [tag=<string vector>, plot=[type=...]] 

A dataCollect node may have many children, but it usually only has one
vells, i.e. the unperturbed one. (Any perturbed vells may be stripped
off by a MeqStripper node in the dataCollect child-subtrees).

The visu.value field is a LIST of child result values. If the child is
a dataCollect node, this result value is its visu record. In all other
cases, it is the unperturbed vells, which can be a scalar, vector or
ND-array.

# .attrib.tag: Tags are string vectors, e.g:

  - visu.attrib.tag := "XX mean";
  - visu.attrib.tag := "XX stddev";



# .attrib.plot: Contains plot-instructons (NB: NOT the tag!)

  - visu.attrib.plot := [type='...', other fields specific to the plot.type]

# .plot.title: Can be specified at any level. The .plot.titles of
# multiple children are accumulated in a string vetor, which will be
# displayed in a popup screen when clicking on the title (combine with
# the legend popup?). The title that is always displayed on the plot
# is a 'sensible summary' of the accumulated titles...

  - visu.attrib.plot.title := <string>  

# .plot.color: Any of the allowed color strings (see list below). If
# not specified, a default color is used. At the moment this is a
# fixed default color, but I rather like the PGPlot scheme where
# different colors are assigned by default.

  - visu.attrib.plot.color := 'blue' (default)  

# .plot.legend: split into (few) strings that are always displayed on
# the plot and (more) strings that can be inspected in a popup window
# when clicking on the legend (or something):

  - visu.attrib.plot.legend := <record>     (accumulate downstream) 
    - legend.plot := <string vector>        (put in plot always)
    - legend.popup := <string vector>       (popup mechanism)


NB: It should be possible to specify in a downstream collect node
something like: "everything with tag='XX' should be light-blue. How is
that done?





      -------------------------
      default attrib.plot.type
      -------------------------

At this moment: If no attrib.plot.type specified, the default is
'standalone'. This is a realvsimag, with attrib.plot.circles=F

Alternatively, the system could react to the vells dimensionality

   - 0D vells: assume mean or stddev: use plot.type='realvsimag'
   - 1D vells: just plot staggered offset-plots ('spectra')
   - 2D vells: 2D plot with values as colors 
                 (e.g. Brentjens scheme for complex?)

In any case, the plot.type='standalone' does not seem to be very
useful. So let's ditch it.





      ------------------------------------
      visu.attrib.plot := [type='realvsimag']
      ------------------------------------

# visu.attrib.plot := [type='realvsimag', value_tag='mean', error_tag='stddev']
# visu.attrib.plot := [type='realvsimag', value_tag='mean']    (no errors)
# visu.attrib.plot := [type='realvsimag']                      (assume)


# NB: Any attributes in a downstream (parent) dataCollect override the
  upstream ones (if relevant): e.g. attrib.plot.circles=F
 
# We need a list of valid attributes for each plot.type, and their
    default values. Note that we may keep in adding to this list as
    long as Tony's script recognises them. 

# Attributes for plot.type='realvsimag':
  - attrib.plot.x_axis := 'real'   (default, of course)
  - attrib.plot.y_axis := 'imag'   (default, of course)
  - attrib.plot.symbol := 'dot' (default)  need list of allowed symbols
  - attrib.plot.symbol_size := 10 (default, pixels)
  - attrib.plot.mean_circle=T: dashed, centered on the origin, through the
    mean of visu.value.
  - attrib.plot.mean_arrow=T: from the origin to the mean of visu.value
  - attrib.plot.stddev_circle=T: dashed, centered on mean(visu.value)
  - 
  -
  -

# When clicking on a data-point, a popup window will give useful
  information about that point.





      ------------------------------------
      visu.attrib.plot := [type='spectra']
      ------------------------------------

# vells arrays (e.g. spectra) from one or more children
# visu.attrib.plot := [type='spectra', ...]
# visu.attrib.plot := [type='staggered', ...]
# visu.attrib.plot := [type='image', ...]
# visu.attrib.plot := [type='surface', ...]
# visu.attrib.plot := [type='wire_frame', ...]
# visu.attrib.plot := [type='contour', ...]

# NB: use separate node(s) to collapse the vells along
#     one or more axes. The dataCollect node does not
#     know anything about that, and just collects the
#     ND-vells from its children (which may be many)

# NB: plot.type='spectra' is just a specific version of the others.

# NB: AGW can figure out the axes info (time, freq) from
#     a global forest-state (OMS will provide)


# For the moment, we will concentrate on:

# visu.attrib.plot := [type='spectra', v_axis=-1]   implicit: h_axis='freq'
#   if v_axis='time', page through the children
#   if v_axis=-1, stack the children vertically
#   page through the remaining axes (e.g. time or children)

# Attributes for plot.type='spectra':
  - attrib.plot.line_style = 'solid' (default)
  -
  -
  -




      ------------------------------------
      some remaining questions
      ------------------------------------

  -) what does a collect node do that combines two conflicting
   plot.types (e.g. realvsimag and spectra). I will NOT accept some
   unhelpful message that 'it cannot be done'.

  -) how do we indicate flags?

  -) dataConcat nodes: what do they do?

  -) where do we collect info for 'multiple-request' plots? Everything
  we have discussed sofar is plotting the data generated as result of
  a single request (e.g. 10 sec).










==================================================================================

From: Tony Willis <Tony.Willis@nrc-cnrc.gc.ca>
To: noordam@astron.nl
Subject: colors and lines, etc
Date: Mon, 24 Jan 2005 05:13:41 -0800 (PST)

    color_table = {
        'none': None,
        'black': Qt.black,
        'blue': Qt.blue,
        'cyan': Qt.cyan,
        'gray': Qt.gray,
        'green': Qt.green,
        'magenta': Qt.magenta,
        'red': Qt.red,
        'white': Qt.white,
        'yellow': Qt.yellow,
        'darkBlue' : Qt.darkBlue,
        'darkCyan' : Qt.darkCyan,
        'darkGray' : Qt.darkGray,
        'darkGreen' : Qt.darkGreen,
        'darkMagenta' : Qt.darkMagenta,
        'darkRed' : Qt.darkRed,
        'darkYellow' : Qt.darkYellow,
        'lightGray' : Qt.lightGray,
        }

    symbol_table = {
        'none': QwtSymbol.None,
        'rectangle': QwtSymbol.Rect,
        'ellipse': QwtSymbol.Ellipse,
        'circle': QwtSymbol.Ellipse,
	'xcross': QwtSymbol.XCross,
	'cross': QwtSymbol.Cross,
	'triangle': QwtSymbol.Triangle,
	'diamond': QwtSymbol.Diamond,
        }

    qwt_line_style_table = {
        'none': QwtCurve.NoCurve,
        'lines' : QwtCurve.Lines,
        'steps' : QwtCurve.Steps,
        'stick' : QwtCurve.Sticks,
        'dots' : QwtCurve.Dots,
        }

    qt_line_style_table = {
        'none': Qt.NoPen,
        'SolidLine' : Qt.SolidLine,
        'DashLine' : Qt.DashLine,
        'DotLine' : Qt.DotLine,
        'DashDotLine' : Qt.DashDotLine,
        'DashDotDotLine' : Qt.DashDotDotLine,
        }

================================================================
