file: ../MeqTrees/PSS4.22sep2003


      ***********************************************************
      Input document for the PSS4 monday-morning meeting (10:30).
      ***********************************************************
      Monday 22 September 2003

---------------------------------------------------------------------
The monday-morning meeting is to report progress, and to DECIDE about
the items in this document. Therefore, the latter should be prepared
by making sure that they are thoroughly understood by the relevant
persons. Items can be submitted to me for inclusion. Preferably by
email, and thoughtfully formulated. I will distribute the last version
by email at least one hour before the meeting.  Decisions will be
enshrined in the MeqTree Handbook and other project documents.
---------------------------------------------------------------------

NB: Proposals should be expressed as much as possible in the usual
HandBook 'language' of Glish calls to the MeqNode interface object.

NB: I am toying with the idea of asking a short progress report (half
a page at most) from all group members by email on friday. For the
moment, we will just use the PSS4 target-list.


######################################################################
#######  Section 0: General  #########################################
######################################################################

         ========
         Progress
         ========


GVD has almost completed first versions for the basic objects:
MeqDomain, MeqCells, MeqVells, MeqPolc, MeqRequest, MeqResult.
He also has a first MeqExpr node. 

OMS has a MeqServer, and has installed the system for JEN. This allows
JEN to create the above node from Glish, and to interact with it. It
worked first time!


         ====================
         Emerging convergence
         ====================

The discussion last monday (15 sep) showed that we are still not
talking about the same thing in some areas. This is partly because we
modified some of the concepts between PSS1-2-3 and PSS4, but also
because the HandBook is not used as the primary source. This is partly
my fault for not updating it soon enough, but I cannot escape the
impression that it is not always read very carefully... Let us all
mend our ways. 

Som points that appeared to be unclear:

    1) A node only deals with ONE MeqRequest at a time. It does not
    rest before it has a MeqResult for that MeqRequest in its cache.


More points are implicitly dealt with in the items below.


	  ==============================
          What we are trying to achieve?
	  ==============================

The goal of PSS4 is to define and implement a MINIMAL, but COMPLETE
and CONSISTENT processing 'kernel', based on MeqTrees. We expect this
to be a powerful tool for tackling a huge range of very complex
problems, most of which we cannot foresee. In particular, we want
others to be able to use the kernel for their own applications,
without needing any help from the kernel implementers.

This is very different from building a processor that handles a
single, well-defined problem (like PSS3 was, really). Obviously we
must keep our own applications (selfcal, peeling, imaging, etc) in
mind while designing the system, and it must be tested on these
applications first.  However, when discussing a particular feature or
principle, we should ask ourselves first of all whether it makes the
overall design better, in the sense of simplicity, consistency,
elegance etc. We must have the attitude that, if a particular
application runs into problems, this should not be solved by
temporary kludges, but by reexamining our basic concepts.

I want us all to keep this in mind during our discussions.


        ===========================
        Local and global operations
        ===========================

OMS is a great champion of local operations, i.e. operations that can
be done by an individual node (or other object) while only interacting
with its nearest neighbours. I agree with this, but I insist that we
ALSO need the possibility of controlling each node from the scripting
layer. The combination of these two is very powerful.

So, local operations are the ones that do not need 'synchronous'
instructions from a MasterScript. Examples of local operations are:

   1) Any .getResult() call from parent to child.

   2) The 'look-ahead' capability of a node, in which it can start
   work on the next request as soon as all its parents have freed it.

   2a) A freed node may of course also just empty its cache, to
   minimize total cache volume. It is not clear to me how the node
decides to do what.

   3) Changing the state of particular nodes by means of 'riders'
   attached to MeqRequests. This includes setting MeqParms solvable.

   4) Associated MeqParms, where the update of one causes the update
   of another (e.g. delta_ionophase)

   5) Chained solvers, where one starts the next as soon as it has
   finished itself (rippling version of peeling selfcal).

   6) Condeqs that only generate equations for unflagged cells.
   Condeqs that can send equations to multiple solvers.

   7) A flagging node. An integrator node. A source subtraction node.

   8) A filter node that can decide to ignore a low-amplitude
   visibility for a selfcal solution.

   9) A MeqSink node that is associated with a MeqSpigot, and that can
   produce residual uv-data for a correlation all on its own.
  
It goes without saying that local operations make parallellization
easier.








######################################################################
#######  Section 1: Things that are ready for a decision  ############
######################################################################


  -) GVD feels that nodenames are sufficient to address nodes, and
  that indices are not needed. OMS disagrees. Since it is largely an
  efficiency issue, we have decided to use only names for the time
  being.







######################################################################
#####  Section 2: Things to think about (to be discussed later)  #####
######################################################################

We have had a lot of creative discussion again this week, in various
groups. I have endeavoured to boil all of this down to the following:


	=================================
	Order of peeling sources (cont'd)
	=================================

I had it slightly wrong last week, when I said that different
baselines would require different orders of peeling sources (at least
when solving), and that this order would change in time. This is
caused by the fact that the visibility of the same source can strongly
differ in amplitude, depending on baseline length and orientation, and
also on its position in the station beam sidelobes.

The correct statement is that the peeling order is the same for all
baselines, but that some baselines may be ignored when solving for
instrumental parameters in the direction of a particular source. Of
course the source will always be subtracted to minimise contamination,
so we always need its predicted visibility. This then leads to schemes
where a (condeq?) node may decide whether to include a given baseline
in a solution.


        ==================
        The MeqFilter node
        ==================

This is a specialisation of a MeqExpr node, because it has some
specific methods. It replaces the WSum, in the sense that it produces
a weighted sum of its children. However, there are two differences: it
has a better name (very important!), and in addition to a vector of
weights for each child, it now also has a vector of inhibition
switches. When set, it inhibits the calculation of perturbed MeqVells,
and passes on a MeqResult with onlu the unperturbed one. 

When asking a .getResult() from a child, the filter sets the
inhibition switch in the MeqRequest argument, which carries it
upwards. 

Note that, with this mechanism, we could set all MeqParms to solvable,
and select the ones for which we need derivatives. 

The MeqFilter above is only the simplest case. We could build special
ones that have some internal intelligence to set their own filter
weights etc. For instance, we could have a MeqFilter that can decide
locally that a predicted visibility does not have a high enough
amplitude to be included in the solution. It could do this by
calculating the unperturbed visibilities for all its children
(i.e. all peeling sources), and then compare them. Etc.


	======
	Riders
	======

OMS has suggested that MeqResults and MeqRequests should have an
optional 'rider', i.e. a record that is ignored by most nodes, but can
be used by specific nodes for control and other purposes. I have
been using this concept in Glish, and I am all in favour. Obviously,
it should cause minimal overhead.

Examples of the use of riders:

   1) To reconfigure the tree 'locally', by changing the state of
   certain nodes, e.g. WSum nodes.

   2) To set specific MeqParms to (un-)solvable via the MeqRequest.

However, it should still be possible to to these things from the 
scripting side by addressing a node directly. The combination of BOTH
these possibilities is very powerful.




	 ==========
         MeqResults
	 ==========

First of all, a point of nomenclature: When we decided (in PSS2) to
put simulation info in a MeqParm, we reserved the term 'perturbed' for
that, and started to use 'differenced' for the MeqVells that are used
to make derivatives.  This turned out to be cumbersome and confusing.
Now that the MeqParm no longer has this simulation info, I propose
that we go back to using the terms 'unperturbed' and 'perturbed' for
the MeqVells in a MeqResult. Assuming that nobody has problems with
that, I will use those terms in the following items. Please use the
correct language in your own modules and documentation. I will adapt
the HandBook.

A MeqResult can be either a 'regular' one, but also a MeqFail, a
MeqEOD, or a MeqEquSet (a set of equations from a condeq).

A 'regular' MeqResult contains: 

  -) At least one (unperturbed) MeqVells object. It also has a
  corresponding MeqCells object.

  -) Associated info per cell, like flags, weights etc.

  -) Zero or more perturbed MeqVells, with the same cell-structure as
  the unperturbed one. Each has associated spid-mapping info (see the
  MeqParm item) between MeqParm and solver(s).

  -) An End-Of-Data flag

  -) An optional 'rider' record. 

At this moment, I cannot see an application for a MeqResult rider, but
that does not mean that we should not have the possibility!




	 ==========
         MeqRequest
	 ==========

A MeqRequest contains the following:

     -) A MeqCells that specifies the domain, and its division into
     cells.

     -) An inhibition switch. If T, only an unperturbed MeqVells is
     required. (Note that this has repercussions on the request_id)
 
     -) An optional rider record. This may be used to reconfigure the
     tree, or to set MeqParms (un-)solvable.

     -) A unique request_id, which allows the rapid decision whether
     two MeqRequests are the same. It is somehow made up from the
     MeqCells, the inhibition switch, and the rider. 

MeqRequests are physically stored in some MeqRequest repository,
probably in the form of MeqRequestSequences (see below). A reference
is passed to a .getResult(*request) call. (Note that we do no longer
use the request_id in this call!)



         ==================
         MeqRequestSequence
         ==================

We have all taken the concept of a MeqRequestSequence on board. It
offers a 'local' look-ahead capability, which allows individual nodes
to start working on the (most likely) next request as soon as it is
free to do so. 

OMS has suggested that a MeqRequestSequence should not be stored in
each MeqLeaf, but in some central location. Each MeqNode then has a
reference to this sequence. So MeqRequest[Sequence]s are passed as
references.

 - MeqNode.setRequestSequence(*MeqRequestSequence)

Note that the *MeqRequestSequence is passed up the tree, so that all
nodes know which sequnece they belong to. We must devise rules for
clashes here (simply replace?)

 - MeqNode.getResult(*MeqRequest)

Note that we do no longer use the request_id in this call. 

There can be multiple MeqRequestSequences active at the same time
(e.g. for the same domain-sequence, but with different riders).
Each node should have a reference to the appropriate one.

NB: Note that the MeqRequestSequence must be 1D, because if it were 2D
or 3D a node would not know which is the next one for look-ahead.

NB: The .getResult(*MeqRequest) function can be called with ANY
MeqRequest at any time. Even out of order, end even outside the
specified sequence.  However, the result can be a MeqFail if any of
the nodes (e.g. a MeqSpigot) cannot cope with this.




	 ========
         MeqParms
	 ========

MeqParms can be set (un-)solvable in two ways: from a script, and via (a
rider in) a MeqRequest. Both ways use the MeqParm.setSolvable(..)
method.

When a MeqParm gets a .getResult() call, it of course produces an
unperturbed MeqVells for the requested MeqCElls. In addition, it
decides whether or not to include any perturbed MeqVells in its
MeqResult. Of course this will depend on whether this MeqParm has been
set solvable, but also on the requested domain(!). It can also be
inhibited by the MeqRequest.

Each perturbed MeqVells in a MeqResult will be associated with
'mapping' information, which links the relevant pol.coeff with one
or more solvers: 
 - Its 'spid' identifier, 
 - MeqParm name, 
 - polc_id,
 - position in the polc, 
 - Solver name(s), 
 - the position(s) in the vector(s) of unknowns of these solver(s). 

The solver-related info is provided to the MeqParm when the MeqParm is
set solvable. It then travels down the tree in the MeqResult, and is
used by condeq/constreq nodes to send equations to the correct
solver(s). It is eventually passed to the MeqSolution, which allows it
to update the right pol.coeff in the right polc of the right MeqParm.



	 =======
         MeqExpr
	 =======

We call them MeqExpr nodes because we thought that they would only
evaluate math expressions of its children. However, such a node may
also do things like flagging or integration (over cells). Such a node
may require some settable parameters, which should be reflected in the
defrec/staterec.

Nomenclature: Because we should name things properly, I still propose
to change the name MeqExpr to MeqModifier, or MeqMod. In fact, I am
close to insisting on it, because precise names are VERY important,
and changing does not (yet) involve a lot of work.

NB: Note that, in our new scheme, perturbed MeqVells will just be
appended to a MeqResult in the order in which they become available
during its journey down a tree. This order will generally be different
for different children of a MeqExpr node. Therefore, when evaluating
its expression, such a node will have to match MeqVells from its child
MeqResults by matching their associated spids. The latter is 
the generic part

GVD has suggested that the user who creates a MeqExpr should have some
indication of the order in which its children are expected. This can
be done by means of the defrec. Remember that there are TWO routines
in a MeqExpr that have policy:  

 - MeqExpr.getDefrec(classname)
 - MeqExpr.getVells(v[1][spid], v[2][spid], v[3][spid], ....)

The field-names childname-record of the defrec are descriptive,
e.g. spectral_index.  This determines their ORDER, so that the generic
part of the MeqExpr only deals with that. 

The .getVells() method deals with 'matched' MeqVells, i.e. MeqVells
that are associated with the same spid. (For the unperturbed MeqVells,
[spid=0] of course). The first index refers to the position of the
child in the child-order defined by the defrec. The user-defined
specific routine does the loop over cells, but the generic part of the
MeqExpr does the spid-matching and calls .getVells() one or more
times.

NB: The MeqCells in a MeqRequest and its MeqResult may be different.
In general, a MeqExpr node ignores them both, and just expects the
MeqVells form its children to have the same dimensions. The only
exception we know at the moment is the 'integrate' MeqExpr, which
requires both MeqCells.


	==========
	MeqSolvers
	==========

First af all, I will emphasize again that a solver is much more
limited in scope than it used to be in PSS3. It has a solution matrix,
which it can initialize for a subset of M.E. parameters, it can obtain
condition equations from condeq/constreq nodes, and it can invert its
matrix to produce a MeqSolution. The definition of the subset of
M.E. parameters, and the command to start asking equations from
condeqs, are obtained fom outside.

However, a solver can do a number of local operations:

  1) It can set MeqParms (un)solvable via the tree.

  2) It can do multiple iterations on its own.

  3) It can pass a .start() command to the next solver in a chain,
  after it has finished itself.

The main (and indeed defining) function of a MeqNode is the method
.getResult(*MeqRequest). The node then does whatever is required to
return a MeqResult for that MeqRequest. Therefore, a MeqSolver is NOT
a MeqNode!!


	 ========================
         Examples of MasterScript
	 ========================

Even though we try to make the nodes do many things locally, a
MasterScript remains necessary to define a process and to set it in
motion, and to do some occoasional control by talking to nodes
directly. I agree with OMS that such scripts should not become
'choke-points'.


  -------------------------------------------------- 
  Case: Generation of uv-residuals for facet imaging.
  -------------------------------------------------- 

This is controlled by MeqSinks. They are at the end of a tree, which
has a corresponding MeqSpigot at the other side, which consists of a
chain of subtract-trees for all relevant Cat I/II sources . 

Define a subset of MeqSinks (i.e. baselines/correlations), and the
overall domain (t,f) to be imaged. 

Specify facets (centres positions and sizes). We will assume that all
sources are to be subtracted from the uv-data, after which 


I WILL FINISH THIS NEXT WEEK. NOW I AM GOING HOME TO BED, BECAUSE I
FEEL TERRIBLE. PLEASE READ ALL THIS STUFF CAREFULLY BEFORE MONDAY.


  ----------------------------------------
  Case: Peeling selfcal, rippling approach.
  ----------------------------------------


  ---------------------------------------------- 
  Case: Peeling selfcal, filter('wsum') approach.
  ---------------------------------------------- 


#########################################################################
#########################################################################
 
    

