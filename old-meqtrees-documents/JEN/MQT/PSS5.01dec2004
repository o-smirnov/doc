file: ../PSS/PSS5.01dec2004


      ====================================================
      Input for PSS5 meeting, wednesday 01 dec 2004, 15:00     <---!!
      ====================================================

Participants:
  - RXA: Rob Assendorp
  - GVD: Ger van Diepen
  - RJN: Ronald Nijboer 
  - JEN: Jan Noordam
  - TAO: Tom Oosterloo
  - OMS: Oleg Smirnov
  - AGW: Tony Willis

For information:
  - MAB: Michiel Brentjens
  - AGB: Ger de Bruyn
  - MVH: Michiel van Haarlem
  - HAH: Hanno Holties
  - KVS: Kjeld van der Schaaf
  - CMV: Marco de Vos



           Meeting schedule
	   ================

Wednesday 15:00, Multi-Media Room.

Please prepare by reading this thoroughly.


	   ======================
           The fruits of nov 25th
	   ======================

The 'LOFAR calibration meeting' with people from Leiden and Groningen
on nov 25th was a success:

    -) AGB's summary of LFFE results provides a focus for our efforts.

    -) There was a good discussion about the availablity of calibrator
    sources, and firm intentions to do something more. However, this
    will be strongly influeneced by the next point.

    -) I have been thinking for some time about an ionosphere model
    with less parameters than the independent 2D phase-screens for
    each station. Basically, a generalisation of the phase-gradient
    over the WSRT array for which AGB solves if there are no bright
    sources in the field. The discussion triggered me to write down
    such a model over the weekend, which depends on station positions,
    RA and DEC, zenith angle and TID velocity. The purpose is to
    minimise the number of independent parameters.

    -) Huub Rottgering gave a good description of the AIPS method for
    reducing VLA74MHz and LFFE data.

    -) My exhausting overview of the status of PSS5, together with the
    thick but unfinished document, seemed to go down very well. 

    -) The demo by AGW/OMS, in all its simplicity, had them at the
    edge of their seats.

In sum, we all made progress. both in substance and in 'atmospherics'.
An important critic like Peter Katgert felt that things are getting
much more concrete. Let us continue this trend at the next meeting, in
January.


	   ===================================
	   A better name for the P[I]SS system
	   ===================================

I offer a bottle of Good Stuff for the winner of our new-name
competition. 

  - RXA: Jones Equation Nodes (JEN)               (rejected, of course)
  - RXA: Arbitrary Measurement Equation Nodes (AMEN)
  - RXA: Flexible Measurement Equation Solver (FlexMeqs)
  - RXA: Fleqs or Meqs
  - RXA: A logo, which my mailer could not reproduce.
  - RJN: SElfcal module for Solving Arbitrary M.E. (SESAME)
  - OMS: SecSy: Selfcal System 

Anyone else? I want to change by January 1st 2005.



	   =============================
           System Interdependence Issues
	   =============================

The PSS system makes use of various aspects of the LCS system
(e.g. sockets, arrays, build system, namespace etc) and the AIPS++
system (fitting, imaging, glish, tables etc). Since the BBS team is
not planning to use any of the PSS software directly, and we plan to
export the PSS system to Westerbork, Penticton and other places, we
have to consider the pros and cons of these interdependencies. OMS
will make a proposal in the next few weeks, which will then be
discussed.



	   ===================
           Short-term emphasis
	   ===================

Three points:

    -) Robustness of the Kernel: Exercise, exercise, exercise...!
    NB: OMS will start a kernel bug/feature reporting system.

    -) Canned trees (without LSM, for the moment). See below.

    -) Water-hole. See below.


I want these three things to be in a workable state BEFORE the
Christmas holidays. This will allow me to generate and test most of
the canned forests for our focus program over Christmas, so that we
can start on real data (3c343) in the new year.



	   =============================
           Visualisation: Work-plan AGW:
	   =============================

Just before Tony left, we agreed on the following:

- Switch to Qwt (freeze Hippo development)
- Visualise the 80% polarized pulsar data from AGB
- Put it into the water hole, with scripts
- Make visualisation plan
  - MeqParm polcs, via browser 
  - Solver metrics
  - MS, via Master Sink?
  - new plot_types? apart from spectra and realvsimag
- Put LAR target into the work plan (hidden)

Tony has sent a demo. Let us try to run it at the videocon.      



           ================
           Water-hole (RXA)
           ================


RXA will unfold his plans, and will run some demos.


For reference: The following (evolving) repositories are needed:

   -) RXA: A range of (short) calibrator observations (various
   frequencies, some polarised)

      - e.g. 10406700_S0_T0  (3c147, 21cm, 30 min)

      - and a simular one for 3c286 (21cm): polarised


   -) TAO: Some suitable 'science' MS's (e.g. spectral line). These
   could be pre-flagged.

   -) JEN: A range of canned C++ forests, in files.

   -) RJN: LSM's for specific objects.

In a later stage, a GSM could be added to this system.






          ==========================================
          Canned forests (CF): step-wise development
	  ==========================================


Reminder: A canned forest is a binary file of C++ nodes. Ideally, the
user selects a suitable CF form the available collection, i.e. a CF
that will perform the desired operation(s) on a particular MS. He then
loads the CH into the kernel, tells it the name of the MS, and pushes
the START button. In practice, he may also have to specify a LSM, and
perhaps some MeqParm tables with calibrator information.



Generating complex trees will be an advanced topic for some time to
come. Moreover, the generation of a large forest from Glish or Python
will be slow. Therefore, we will offer the user a range of 'canned'
C++ forests for specific applications, which can be quickly loaded
from a file. A canned forest has the following properties:

   -) It will adapt itself to a given MS. In the case of the WSRT, it
   will be designed for the nominal number of stations (14) and
   correlations (4, linear):

      -) Check whether the forest represents a suitable M.E. for the
      observation?

      -) Non-available ifrs: If a spigot cannot find its data, it
      returns a FAIL, wich should be handled gracefully, e.g. by a
      solver.

      -) If a solver is asked to solve for MeqParm(s) for which there
      is not enough information (e.g. in case of a missing antenna),
      it should handle this gracefully by solving for the others
      (e.g. by SVD), and not updating the relevant MeqParms.

         GVD: A solvable parameter coefficient will only be added to
         the solver if the solver gets perturbed data for it. So it
         will never appear in the solver if there is no data for it
         (e.g. if a station is not part of the MS).

      -) Connection to MS info, e.g. station positions (for DFT and
      redundancy calibration) etc. Such info should be made available
      to the tree in regular nodes. How is that done? OMS suggestion:
      send up the data-stream header in the request rider via the
      sink, and let the relevant nodes look for their own information,
      using a field-specification (defrec.header_field_id = hiid).
      This is elegant, because it allows for time-variable info.

   -) The generation/filling of the MeqParm table needed for the given
   MS and tree has to become part of the canned forest adaptation.

      -) If MeqParm tables of calibrator observations exist, these
      must be copied as initial values for the new MeqParm table.
      This gives naming problems, of couse.

   -) It will adapt itself to a given LSM. For the moment this means
   that it will have a sufficient number of 'connection nodes' to
   which prediction trees for either Cat I sources or Cat II patches
   can be attached. 

      -) Fortunately, is appears to be sufficient to get away with 6
      connection nodes with standard names per source/patch:
       
         - StokesI[q={q}]
         - StokesQ[q={q}]
         - StokesU[q={q}]
         - StokesV[q={q}]
         - RA[q={q}]
         - Dec[q={q}]

      -) Attach source prediction trees from the LSM to the successive
      peeling units. These are different for Cat I/II. Unused peeling
      units are shunted out, or even deleted. Qualifiers [q={q}] in
      the node-names of the peeling-units must be modified [q=xyz].

         -) Eventually, a C++ forest-building unit should be able to
         take a canned (and unqualified) 'peeling-unit' subforest, and
         string this together for the correct nr of peeling sources
         and Cat II patches.

      -) NB: Ultimately, it should be possible to extract a suitable
      LSM for a particular observation (FOV) from the GSM.

      -) Something similar must be done for non-peeling trees.
       
      -) Check whether the LSM and the MS overlap in the sky....


   -) It is possible to replace specific nodes/subtrees of a canned
   forest with other nodes/subtrees. This allows people like Sanjay to
   experiment with their own Cat II prediction node, without having to
   generate a complex tree himself.

   -) etc



                    =====================================






















