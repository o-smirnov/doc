file: ../MeqTrees/PSS4.05oct2004


      ==================================================
      Input for PSS4 meeting, tuesday 5 oct 2004, 15:00     <---!!
      ==================================================


           Meeting schedule
	   ================

Because of the participation of AGW, we will move the weekly PSS
meeting to 15:00 in the afternoon (06:00 in Penticton, this is a
pre-war level of dedication to duty, an example to us all!)

Because tuesday is a busy day in Westerbork, we have identified
wednesday (15:00) as the best slot for our meeting.

The venue of our meeting from next week (wednesday 13 oct) onwards
will be the Multi-Media room.

Finally: Note that this week (5 0ct) the meeting starts at 15:00!! 



           Post-Mortem of the PSS Open Day
	   ===============================

It was a great success, I think. In any case, all PSS/RSW team members
have performed beautifully. We will do it again soon, i.e. in the last
two weeks of November, during AGW's next period in Dwingeloo.

Obviously, people were a bit overwhelmed by the technical jargon of
OMS, but they got the message that some serious thinking has gone into
PSS. The word 'elegant' was used.

The policy of having astronomers talking about PSS in the context of
real astronomical reduction was very effective.

A VERY important side-effect of this exercise was the rapid and
intense learning process during the preparation of their talks for the
new members of the PSS team (RJN, AWG). This by itself made it
worthwhile already. 


	   Computing power.
	   ================

Last week, we discussed the kind of machine the we need for PSS/WSRT
processing in the short (data inspection), medium (solving, 3c84) and
longer term (LFFE). Obviously we need more real data about number of
nodes and memory use, but we can safely say that we will rapidly grow
out of our present machines. We have a 3-stage approach:

   1) Get more memory of the current PSS machines lofar9 and lofar10.
   OMS is the system manager. Kjeld will teach him how to fill in a
   form, which Marco will then sign. Should be done in two weeks...

   2) Discuss the possibility of a more powerful machine from RSW.
   Where, when, for how long...

   3) IMplement PSS on the RSW cluster. This is probably inevitable
   for LFFE reduction. Who will do this, and when?



	   Generalisation of domain dimensions (OMS)
	   =========================================

OMS has been stressing the need to generalize away from our present
2D (time/freq) domains before we go much further. The main arguments
are:

  -) Most importantly, it will block all possibilities for building in
  implicit assumptions about the domain dimensions in the generic node
  code.

  -) Interpolation of gridded uv-data for Cat II prediction. (I am not
  so sure about this one...)

  -) The new MeqAccumulator class, where we might want to collapse the
  vells along one or more axes. For example, we would like to keep the
  freq channels separate, but combine all times in a snippet.

  -) Update of extended sources from residual images.  The dimensions
  are (time, freq, RA, DEC).

  -) Estimation and use of beamshape and ionospheric phase screen. The
  dimensions are (time, freq, RA, DEC).

  -) The UVW/DFT classes (they do not use the frequency dimension).


I have been hesitating because of the potential deluge of new bugs,
which might take some time to subside. However, if we need it in any
case, we might as well get it over with now, because it can only get
worse. We will decide at this meeting.

Guidelines: Our present choice (2D, freq/time) is not accidental.  I
expect that it will remain the most common use by far. Therefore, its
should be the default setup, and the generalisation should be hidden
from the casual user.



            Flagging in the short and medium term
	    =====================================


As part of the domain generalization operation, OMS is considering
integrating the flags into the vells(ets). Flags would then
automatically be taken into account with all Vells math operations.
(The problem is to distinguish between unperturbed and perturbed
vells).

In the short term, flags are NOT taken into account in Vells math (but
they are carried into the MS).  The WSRT inspection pipeline may will
have to limit itself until after the generalization. We can still have
one flagger.


NB: At this moment, data weights are attached to the result in the
same way as the flags. Since these weights are only applied in
specific nodes, it seems better to supply them via a separate child to
those nodes. A weights array may be obtained from the MeqSpigot with
its own MeqSelector node, just like the 4 correlations. Updating
such weights is still possible, by making an updatedWeights node that
has both the original weights as the weighted data node as children.




	   Towards a WSRT data inspection pipeline
	   =======================================

During the last few days, the idea has emerged to field-test PSS in
the form of a uv-data inspection pipeline. The advantages are:

   -) Test some of the basic aspects (data-access, effeciency) without
   the complexity of MeqSolver, MeqParms, GSM/LSM, imaging, etc.

   -) Provide functionality that the WSRT group really needs (and has 
   already started to develop it in the context of AIPS++)

   -) The total number of nodes is small enough to get away with a
   standard Linux machine.

   -) The trees involved are simple enough to be generated with a
   one-page GLish script along the lines of meqsolve.g.

   -) It is the most effective (and painless) way to bring the RSW
   group up to speed in PSS matters:

   -) It is a good test of how easy it is for an institutional user to
   generate new trees, possibly with his own customized nodes.

   -) It allows the first steps towards an operational PSS system,
   with repositories of trees, scripts and nodes.

   -) It will generate the first example of a user interface offered
   by an institutional user.

   -) It will keep the RSW group occupied, learning and focussed while
   the PSS group implement the more advanced features that are needed
   for the next stage (GSM/LSM, residual images, Cat II prediction).



PSS is ready for it (see example tree in Appendix):

   -) MeqSpigot/MeqSink interface with MS. Needs exercising (speed)

   -) Visualisation (AGW: HippoDraw, ROOT). 

   -) Flagger (see below)

   -) Accumulator, i.e. collect data statistics...

   -) Bandpass determination

   -) More...?



NB: One of the areas where AIPS++ REALLY screwed up was in neglecting
the kind of uv-data handling that users spend most of their time on:
visualisation, flagging, etc.  Very little functionality was
available, and even that was never exercised adequately. So it
remained clunky and slow for years, and virtually no prospective users
had the stamina to cross the 'swamp' via the famous 'thin path' to get
to the killer applications downstream.

In retrospect, it would have been much more effective to offer very
powerful and fast uv-data handling functionality first, so that users
would use AIPS++ to do that, and THEN go to other packages for further
reduction. They would have then have absorbed the calibration and
imaging functions as they would come available.

This is EXACTLY what we propose to do with PSS. Even better, the
institutional user will not have to wait for new functionality to
become available, but can generate his own stuff at his pleasure.




============================================================================
============================================================================
============================================================================


           Appendix: Program for Tony Willis
	   =================================

Tony has gone back to Penticton. He has exceeded our expectations in
commitment and usefullness. He will be back for the last two weeks of
November (and again in jan/feb). We have agreed the following list of
items on which he will work in the intervening weeks (all very much
aimed towards a 'WSRT inspection pipeline'):


  1) HippoDraw: Light but limited, easy to influence. AWG will change
  the present setup to put only one HD plot per browser panel. In
  addition, he will allow the user to launch a canvas in a separate
  window, for more detailed inspection (Inspector), and printing
  etc. This will require some interface act by OMS.

  2) Root: CERN visualisation package, huge, very complete, very well
  debugged because of large user base. Allow the user to launch a
  separate Root window, as an alternative to an HippoDraw window.

     2a) All this visualisation stuff will be made available in
     Dwingeloo as soon as AGW has implemented and tested it.

     2b) AWG will write a manual for writing MeqBrowser plugins as
     soon as the plugin interface has settled down.

  3) Installing PSS in Penticton: This is a development version for
  the time being. (A regular PSS distribution system will evolve..)

     3a) AGW will ask GVD for the LOFAR build document.

  4) Trans-Atlantic project meetings: We will move our tuesday
  meetings to 15:00 (06:00 in Penticton), and to the mult-media room,
  so that AGW can participate from home. He will take the initiative
  for a test around 7 oct, so we can start on tuesday 12 oct. JEN will
  book the MM-room via Groupwise.

  5) AGW will continue to update his 'MeqTrees for Dummies' document.
  He will solicit comments from the PSS Open DAy participants.

  6) We will organise a second PSS Open Day in November, halfway AGW's
  second stay. By that time there should be a lot of new stuff to look
  at.

  7) AGW and JEN will exchange ideas for 'benchmark trees'. Everyone
  is encouraged to make his own collection....

  8) AGW will experiment with more complicated trees by cannibalizing
  the OMS meqsolve.g scripts, and introducing loops in them to cater
  for multiple ifrs.

  9) In order to keep things self-propelled, we aim at having a system
  that can work with DRAO interferometer data as soon as possible.

     9a) AGW will make sure that DRAO uv-data can be read into a MS,
     and that he can make a map etc.

     9b) JEN will generate a (simple) DRAO reduction tree in his own
     system, and send the C++ binary representation to Penticton. In
     this way, we do not have to copy the specialised .h/.cc files.
     NB: At ~1 kB per node, a 100.000 node MeqForest will be 100 Mb. 

     9c) Does DRAO have a machine that can handle 100.000 nodes?

  10) AGW will develop a 'condeq-watcher', which collects the cache
  results from all the children (MeqXCondeq's) of a particular solver.
  The upper limit is 20.000 children. Two things are needed:

      10a) The rms and mean of all condeq vells for a single iteration
      in a single plot. We are looking for deviations from zero. The
      user should be able to inspect a particular condeq (e.g. one
      that sticks out) by clicking on this plot.

      10b) The convergence to zero (rms and mean) in successive solver
      iterations. This requires the keeping of the results of earlier
      iterations...

      10c) OMS suggested that the condeq-watcher functionality could
      be incorporated in the solver, to avoid the extra traffic. A
      good idea, but AGW will first experiment by accessing the condeq
      nodes, either directly of by suscription.

  11) Another useful (and policy-free) tool would be one that
  interpretes the solver metrics (available in the MeqSolver result,
  described in the WNB fitting module in AIPS++), and perhaps warns
  the user that the results are less reliable.
 
  12) AGW has access to the C++ code, so he can take any node class as
  a template, and write another one himself. Suggestion: a node that
  adds gaussian noise to the vells of its child. I am very keen to get
  to a situation where people are writing custom node classes all over
  the place. We then need a system of organising these nodes, so that
  they can be selected and exchanged....


I trust that this program will keep Tony busy for the first few weeks
in Penticton.




============================================================================
============================================================================
============================================================================


          Appendix: Basic tree for WSRT inspection pipeline
	  =================================================

As an illustration, here is a simple inspection tree for a single
interferometer between stations (s1,s2), and a single correlation
(XX). The data are read from the MS by the MeqSpigot, and put back
into (a different column of) the same MS by the MeqSink. It is easy to
extend this to 4 polarisations, and to duplicate it for all available
interferometers. This should be the first experiment, where we can
measure the data-access speed and visualize the uv-data from selected
ifrs by subsribing to the relevant node(s).

The next step is to insert a flagger (as done below), which flags all
data-points that deviate more than 7 sigma from the mean (over the
cells of a snippet domain). The generated flags are carried back into
the MS via the MeqSink. Note that the tree contains standard MeqKernel
nodes only (class=MeqSomething), except for the one that generates the
flagger-condition. The C++ .cc/.h files of this user-defined class is
generated automatically form its math expression. 

After that, we can insert other functions.



  **********************
  @ ** Record: defrec :  ( <MeqSubTree>:  inspection: )
  @   - <class>name         :  string[1] = '<MeqComposer>   : meqsink[s1={s1}][s2={s2}]'
  @   - aux                 :  record[3]
  @     - datatype            :  string[1] = 'complex'
  @     - expr                :  string[1] = '{#1}'
  @     - family              :  record[2]
  @       - its_parent          :  boolean[1] = F
  @       - its_child{#1}       :  string[1] = '<MeqMergeFlags> : mergeFlags[s1={s1}][s2={s2}][c=XX]'
  @   - children            :  record[1]
  @     - #1                  :  record[3]
  @ . .   - <class>name         :  string[1] = '<MeqMergeFlags> : mergeFlags[s1={s1}][s2={s2}][c=XX]'
  @ . .   - aux                 :  record[3]
  @         - datatype            :  string[1] = 'complex'
  @         - expr                :  string[1] = '{#1} {#2}'
  @         - family              :  record[3]
  @           - its_parent          :  string[1] = '<MeqComposer> : meqsink[s1={s1}][s2={s2}]'
  @           - its_child{#1}       :  string[1] = '<MeqSelector> : spigot[s1={s1}][s2={s2}][c=XX]'
  @           - its_child{#2}       :  string[1] = '<MeqZeroFlagger> : flagger[s1={s1}][s2={s2}][c=XX]'
  @ . .   - children            :  record[2]
  @         - #1                  :  record[4]
  @ . . . .   - <class>name         :  string[1] = '<MeqSelector>   : spigot[s1={s1}][s2={s2}][c=XX]'
  @ . . . .   - index               :  integer[1] = 1
  @ . . . .   - aux                 :  record[3]
  @             - datatype            :  string[1] = 'complex'
  @             - expr                :  string[1] = '{#1}'
  @             - family              :  record[2]
  @               - its_parent          :  string[1] = '<MeqMergeFlags> : mergeFlags[s1={s1}][s2={s2}][c=XX]'
  @               - its_child{#1}       :  string[1] = '<MeqSpigot> : meqspigot[s1={s1}][s2={s2}]'
  @ . . . .   - children            :  record[1]
  @             - #1                  :  record[6]
  @ . . . . . .   - <class>name         :  string[1] = '<MeqSpigot>     : meqspigot[s1={s1}][s2={s2}]'
  @ . . . . . .   - aux                 :  record[3]
  @                 - datatype            :  string[1] = 'complex'
  @                 - expr                :  boolean[1] = F
  @                 - family              :  string[1] = 'no children, its_parent = <MeqSelector> : spigot[s1={s1}][s2={s2}][c=XX]'
  @ . . . . . .   - input_col           :  string[1] = 'DATA'
  @ . . . . . .   - station_1_index     :  string[1] = '{s1}'
  @ . . . . . .   - station_2_index     :  string[1] = '{s2}'
  @ . . . . . .   - default             :  complex[1] = 1+0i
  @         - #2                  :  record[3]
  @ . . . .   - <class>name         :  string[1] = '<MeqZeroFlagger> : flagger[s1={s1}][s2={s2}][c=XX]'
  @ . . . .   - aux                 :  record[3]
  @             - datatype            :  string[1] = 'complex'
  @             - expr                :  string[1] = '{#1}'
  @             - family              :  record[2]
  @               - its_parent          :  string[1] = '<MeqMergeFlags> : mergeFlags[s1={s1}][s2={s2}][c=XX]'
  @               - its_child{#1}       :  string[1] = '<jen_flagcond> : flagcond[s1={s1}][s2={s2}][c=XX]'
  @ . . . .   - children            :  record[1]
  @             - #1                  :  record[3]
  @ . . . . . .   - <class>name         :  string[1] = '<jen_flagcond>  : flagcond[s1={s1}][s2={s2}][c=XX]'
  @ . . . . . .   - aux                 :  record[3]
  @                 - datatype            :  string[1] = 'complex'
  @                 - expr                :  string[1] = '(multi-term): ..  expr =
  ..   abs( {#1} - mean( {#1} ))
  ..   - 7  * sqrt(abs( mean(sqr( {#1} )) - sqr((mean( {#1} ))) ))'
  @                 - family              :  record[2]
  @                   - its_parent          :  string[1] = '<MeqZeroFlagger> : flagger[s1={s1}][s2={s2}][c=XX]'
  @                   - its_child{#1}       :  string[1] = '<MeqSelector> : spigot[s1={s1}][s2={s2}][c=XX]'
  @ . . . . . .   - children            :  record[1]
  @                 - #1                  :  string[1] = '1 : see above: spigot[s1={s1}][s2={s2}][c=XX]'

  **********************




  **********************
  @ ** Record: .analyse() :  ( <MeqSubTree>:  inspection :  )
  @   - MeqParm             :  record[0]
  @   - MeqKernel           :  record[5]
  @     - MeqComposer         :  integer[1] = 1
  @     - MeqMergeFlags       :  integer[1] = 1
  @     - MeqSelector         :  integer[1] = 2
  @     - MeqSpigot           :  integer[1] = 2
  @     - MeqZeroFlagger      :  integer[1] = 1
  @   - MeqUser             :  record[1]
  @     - jen_flagcond        :  integer[1] = 1
  @   - external            :  record[0]
  @   - real                :  record[0]
  @   - complex             :  record[6]
  @     - meqsink[s1={s1}][s2={s2}]:  boolean[1] = T
  @     - mergeFlags[s1={s1}][s2={s2}][c=XX]:  boolean[1] = T
  @     - spigot[s1={s1}][s2={s2}][c=XX]:  boolean[1] = T
  @     - meqspigot[s1={s1}][s2={s2}]:  boolean[1] = T
  @     - flagger[s1={s1}][s2={s2}][c=XX]:  boolean[1] = T
  @     - flagcond[s1={s1}][s2={s2}][c=XX]:  boolean[1] = T
  @   - notarecord          :  record[0]
  @   - qualifier           :  record[3]
  @     - s1                  :  string[1] = '{s1}'
  @     - s2                  :  string[1] = '{s2}'
  @     - c                   :  string[1] = 'XX'
  @   - qualified           :  record[1]
  @     - c                   :  integer[1] = 5
  @   - unqualified         :  record[2]
  @     - s1                  :  integer[1] = 8
  @     - s2                  :  integer[1] = 8
  @   - error               :  record[0]
  @   - warning             :  record[1]
  @     - *1048               :  string[1] = 'unqualified qualifier(s): s1 s2'
  @   - count               :  record[12]
  @     - MeqParm             :  integer[1] = 0
  @     - MeqKernel           :  integer[1] = 5
  @     - MeqUser             :  integer[1] = 1
  @     - external            :  integer[1] = 0
  @     - real                :  integer[1] = 0
  @     - complex             :  integer[1] = 6
  @     - notarecord          :  integer[1] = 0
  @     - qualifier           :  integer[1] = 3
  @     - qualified           :  integer[1] = 1
  @     - unqualified         :  integer[1] = 2
  @     - error               :  integer[1] = 0
  @     - warning             :  integer[1] = 1

  **********************


** .spigot2sink(): finished **






                      ==================================




























