file: ../MeqTrees/PSS4.30mar2004



         MeqForest execution (OMS)
	 =========================

  -) clear all publishing (OMS will supply this function)

  -) flush MeqParms (memory)


         MeqDomain/MeqCells (OMS)
	 ========================

  -) OMS will put the new definition in the document, with a picture
  to illustrate the essentials.
         

         MeqSolver (GVD)
	 ===============

  -) GVD has 'broken open' the solver, in the sense that the various
  operations (clearing, accumulating, inverting) can now be done more
  or less separately. GVD and OMS have written down the new commands,
  and they will add them to the 'kernel manual'.

  -) JEN has tested the new solver, and it reproduces the behaviour
  that it had before. It will be exercised more vigorously in the next
  few days.

  -) JEN has requested two additional features: The possibility of
  specifying equation weights, and the possibility to specify an
  'update-gain-factor' smaller than unity.


         Growing domains (JEN)
	 =====================

  -) The concept of growing domains is CENTRAL: It will be the default
  mode of oparation (see below). Therefore, I want to get it right
  before we move to the next stage.

  -) To recapitulate the idea:

     -) We want to process small parcels/packets/snippets of data
     (e.g. 10 sec) at a time, for two reasons:

        1) In order to follow rapid variations of a MeqParm, we have
        to solve often.

        2) To minimize the total amount of data that is held in the
        caches of the (potentially large number of) MeqNodes.

     -) However, we want to maximise the signal/noise ratio of the
     solution by solving for polcs that have domains that are as large
     as possible. (The assumption is that MeqParms vary smoothly in
     time and freq).

     -) In addition, we want to use the 'memory' of the MeqParm to
     predict its value over the next 10 sec as well as possible.
     
     -) Hence the idea to use consecutive 10sec snippets to solve for
     polcs that are valid for increasingly large domains.

  -) I thought to achieve this by not clearing the solution matrix
  after each snippet solution, but to continue accumulating equations
  in it. The matrix would only inverted to update the MeqParms at
  'suitable' intervals, depending on the conditions. My hope was that
  the errors due to having 'pre-update (and thus 'wrong') equations in
  the matrix would average out as the domain grew.

  -) My experiments show that the latter assumption may be too
  optimistic (there are pictures to illustrate this). It is possible
  that it is still more or less valid in many practical cases, but it
  seems better to look for another solution. 

  -) Fortunately, there seems to be an alternative that is fully local
  to the MeqParm, and which retains the properties that we are looking
  for:

     -) A solver makes a separate solution for each 10sec snippet.
     This means that its matrix is cleared and inverted each time, and
     the relevant MeqParms are updated. This is all it does.

     -) When solvable, a MeqParm maintains a 'grow-polc' (gpolc) and a
     'snippet-polc' (spolc). 
     (NB: There is also the 'predict-polc' for intermediate requests,
     of course).

     -) The spolc will usually have a relatively low polynomial degree
     (e.g. fdeg=1-2, tdeg=1-2). The gpolc will usually have a higher
     degree (e.g. tdeg=3-4).

     -) The gpolc is initiated when the MeqParm is set solvable. It
     can either be a new one, or the continuation of an existing
     one. If new, it has the domain of the first snippet, and its
     starting values are obtained from the available polcs in the
     usual way.

     -) When a gpolc is 'terminated', it is stored in the meptable as
     a 'regular' polc for its MeqParm. If it is a continuation of an
     existing polc, it should replace this.
     
     -) If the MeqParm deems it necessary, it may terminate (and
     store) its current gpolc, and start a new one. For instance when
     it detects a discontinuity (phase jump), or decides that the
     values vary too wildly for its pol.degr.  (NB: In the latter
     case, it also has the option to increase its polynomial degree,
     of course...).

     -) At each request from the solver, the spolc is predicted for
     the requested snippet domain with the help of the current gpolc.
     The spolc is then used to calculate the vellset. 

     -) The incremental update solution that is returned from the
     solver is added to the spolc coefficients. The latter is then
     used to calculate a suitable number of fiducial points, which are
     added to the collection (fiduc) of fiducial points that define
     the gpolc.

     -) After each addition, fiduc is used to solve for the updated
     coeff of the gpolc, which is then valid for the domain that is
     the envelope of its original domain and the snippet domain.

     -) It is necessary to re-solve for gpolc each time, because so
     the best possible gpolc is needed to predict values for the next
     snippet. (NB: It is not really necessary to keep the entire
     fiduc, since it is sufficient to accumulate the equations from
     the new fiduc.points into the 'standing' gpolc solution matrix.
     However, this would make it impossible for the MeqParm to change
     its own polynomial degree if necessary...).

  -) Note that, since the solver deals in independent snippets, the
  MeqParms can terminate their gpolcs independently from each other.

  -) How to deal with discontinuities in MeqParm values? OMS has
  suggested that we keep the possibility to have more than one
  solve-polc at the same time. This is messy, and I feel that, in the
  new scheme, the MeqParm can just start a new gpolc when it detects
  such a discontinuity.



         MeqFiduc (JEN/OMS)
	 ==================

  -) We need a new object that contains a list of fiducial points,
  i.e. (t,f) points that are used to fit a polc to. At this moment, it
  would contain the vectors: freq, time, value, wgt.

  -) Its two main uses are to define the gpolc (see above), and to
  estimate a new polc from an arbitrary set of existing MeqParm
  polcs, for an arbitrary domain. Other uses may emerge.

  -) By encapsulating things in an object, it will be easier to
  generalise to arbitrary domain dimensions later.

  -) I have implemented MeqFiduc in Glish, for experimentation. 

  -) NB: I feel that we are getting close to having a complete picture
  for MeqParm. That means that we should start thinking about
  implementing the elements in C++ (MeqFiduc, fitpolc, etc). Make a
  list...



         Control: Request sequences (all)
	 ================================
  
  -) Now that we have put the solver in its place, we do no longer
  need an overall control structure. The control sequence for the two
  main operating modes becomes very simple:

     Mode 1) Predict/Subtract: Used for subtracting Cat I and Cat II
     sources from the uv-data, before producing residual images. This
     can be controlled by the MeqSink issuing a long stream of snippet
     requests to the node that subtracts the last (faintest) peeling
     source. This will pull the data from the associated MeqSpigots,
     and through all peeling stages.

     Mode 2) Predict/Solve: Used to solve for M.E. parameters
     associated with Cat I sources. This may also be controlled by the
     MeqSink, which now issues its stream of snippet requests to the
     solver associated with the last (faintest) peeling source. Each
     solver will issue requests to their MeqCondeqs, which will pull
     the data from the associated MeqSpigots, and through all peeling
     stages. Note that the result that the MeqSink gets back is
     meaningless, and should NOT be stored in the datasource.
     
  -) NB: The node that issues the requests 'pulls' the system. The
  MeqSpigots do not 'push' the system, but they do exert a sort of
  'data-pressure' that fills any processing 'holes'.

  -) The snippet requests specify the lower (t,f) cells resolution
  that is needed for predicting. This will be ignored by all nodes,
  except the MeqResampler ones (see below).



         MeqDFT (GVD)
	 ============

  -) At this moment, a peeling source is predicted for its own flux
  centre, i.e. we assume that the uv-data has been shifted to this
  point.

  -) However, if we wish to take a few other (contaminating) sources
  into account, we have to shift their predictions to the position of
  the peeling source. (NB: we can still predict them at low (f,t)
  resolution, because we only need them approximately)

  -) GVD points out that, when we solve for the position of a peeling
  source, we do not want to shift the uv-data after each solution.
  Instead, we should have a small MeqDFT of the peeling source.
 
  -) Concluding, I propose that we ALWAYS have a MeqDFT node in the
  source predict branch, but that it should be intelligent enough to
  decide that it should do nothing (except passing on the result) if
  the position-shift is zero.
    

         MeqZeroFlagger (OMS)
	 ====================

  -) Every MeqNode already has the property that it merges (OR) the
  flags (and later the weights) of its children.

  -) MeqZeroFlagger flags any cell whose value is negative. Other
  nodes are supposed to condition its input, e.g. by taking the
  absolute value and subtracting by 7 sigma.

  -) The MeqZeroFlagger and its conditioning tree are a placed in
  parallel to the data-path. The two paths are reunited by a
  MeqIdentity node, which merges the flags of its children (like all
  nodes), but passes on the vells of its first child.

  -) The MeqIdentity node can have any number of children. It may have
  other uses...

  -) After we gained some experience, we may make some specialist
  nodes that combine the MeqZeroFlagger and a standard conditioning
  tree.


         MeqResampler (OMS)
	 ==================

  -) NB: Another name for a vellset is a 'sampling'. 

  -) Most MeqNodes ignore the cells in the request, except the
  MeqResampler, which makes sure that its output is sampled as the
  request specifies. It works in either direction.

  -) Cell flags are taken into account when resampling. Various rules
  may be specified for this. (elaborate).

  -) Cell weights will be taken into account in the future.

  -) The integrated cells should cover the entire domain, even if that
  means that they are of different size. The reason is that any
  remaining full-resolution cells might be missed when flagging or
  subtracting.

  -) When resampling to full resolution, the low-resolution cells
  should be linearly interpolated. We assume that the low-resolution
  cells are small enough so that anything of interest (i.e. the
  visibility function of the peeling source) is linear over it.

  -) In that context: the MeqParm should calculate values for the cell
  centres, and then multiply with the cell size (just like the
  measured uv-data themselves). This should be taken into account when
  resampling.

 
         
 



         GSM/LSM (OMS)
	 =============

  -) We should put outselves into a position to convert and use
  NEWSTAR source model (.MDL) files.

  -) AGB tells me that most of the sources for 3c84/300MHz are so
  extended that he uses CLEAN components. How are we going to deal
  with that? 

     -) Combine a group of CLEAN components into an extended
     Cat I component, and solve for its parameters?
 
     -) The Cat II prediction process: Combine all fainter components
     (CLEAN or otherwise) of a small region into a small map, anf FFT
     them together.
 
  -) In any case, most of the 3c84 sources are extended, while we can
  only deal with point sources. We should start thinking about trees
  that can handle slightly extended sources. Perhaps we can get away
  for the moment with the assumtion that the instrumental parameters
  are constant over the source.

  -) We will approach this in a step-wise fashion:

     -) OMS will convert MDL tables into Glish structure.

     -) OMS will convert the regular components into GSM/LSM
     components

     -) JEN will atempt to derive parametrised components from CLEAN
     components.

  -) Finding and updating GSM/LSM sources from residual maps has a
  lower priority for the moment. But 'closing the loop' remains an
  important goal.


----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------


         Some strategic points
         =====================

  -) GVD will keep the MeqSolver, and write specialised classes
        like MeqDFT and MeqUVW.


  -) The following is roughly in order of priority:

     - Domain/cells (OMS)
     - MeqParm functional description (JEN)
     - MeqParm implementation (OMS)
     - Growing-domains experiment (JEN)

     - MeqSink(?) request sequences 

     - PSS3 emulation.   (May)
       - Larger trees.

     - MeqDFT/MeqUVW (GVD)
     - MeqZeroSubtract/MeqIdentity (OMS)
     - MeqResampler (OMS)
     - MeqWSum (OMS)

     - MDL -> Glish (OMS)
     - CLEAN comp -> extended sources (JEN)
     - Predicting extended sources.
     - Deriving secondary MeqParms (beamshape, ion.screen)
     - Predicting and subtracting Cat II sources.
     - WSRT M.E.

     - Closing the loop:
       - GSM/LSM organisation (VO interaction)
       - Residual imaging (facets)
       - Updating the GSM from residual images (trees also) 
     - Writing our article...

  -) If we want a Python interface to the kernel in september, we
  should start relatively soon, because it will take some time for
  errors to die down. However, we want someone from outside our group
  to be the main user (and tester!) of this interface. A desirable 
  first application would be a tree browser (Nijmegen...?)

  -) JEN will ask WNB about further options for the AIPS++ solver.
  (adding/subtracting matrices etc). 




                               =================================
