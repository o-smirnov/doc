file: ../MeqTrees/PSS4.29sep2003


      ***********************************************************
      Input document for the PSS4 monday-morning meeting (10:30).
      ***********************************************************
      Monday 29 September 2003

---------------------------------------------------------------------
The monday-morning meeting is to report progress, and to DECIDE about
the items in this document. Therefore, the latter should be prepared
by making sure that they are thoroughly understood by the relevant
persons. Items can be submitted to me for inclusion. Preferably by
email, and thoughtfully formulated. I will distribute the last version
by email at least one hour before the meeting.  Decisions will be
enshrined in the MeqTree Handbook and other project documents.
---------------------------------------------------------------------

NB: Proposals should be expressed as much as possible in the usual
HandBook 'language' of Glish calls to the MeqNode interface object.

NB: I am toying with the idea of asking a short progress report (half
a page at most) from all group members by email on friday. For the
moment, we will just use the PSS4 target-list.



######################################################################
#######  Section 0: General  #########################################
######################################################################


NB: I do not want to discuss too much next monday. Most of this stuff
is just for the record. Let us just get on with things.


         ========
         Progress
         ========

Lots of discussion, mainly. Pretty exasperating at times, but probably
a phase we have to go through. I am keen to give you guys lots of room
to exercise your creativity, and make you self-propelled. I am sure
that, once we have working examples of some of the main applications,
all discussions will be much easier. That is why we should strive to
get to that situation as soon as possible.

OMS has finished the notification mechanism.

GVD has continued work on the supporting objects.



         ==============
         Some decisions
         ==============

  1) MeqExpr will be renamed MeqFunction.

  2) MeqWSum will keep its name ('filter' is too general)

  3) The spid vector is back into the MeqRequest, so there is less
  need for an inhibtion switch, certainly not per child.



         ===============
         Some principles
         ===============

  -) Local operations are a Good Thing.

  -) We should strive for as little 'state' as possible in the nodes.
  (does this contradict locality?)

  -) The 'near-total' access to nodes via the scripting layer is a
  FEATURE of the system, not a whim.

  -) A MeqRequest can be regarded as a local job-description. It can
  change then state of any node. Their riders do this using the same
  methods as from outside.

  -) Solvers (etc) communicate with their MeqParms via the tree, and
  not directly. This is better for eventual parallelisation. However,
  it remains ALWAYS possible to access any node by name from the
  scripting layer (rare, and not time-critical).

  -) During solving loops, the solver calls the shots (see below).




          =======
          Solving
          =======


A solver exists for a specific subset of MeqParms, for a specific
domain. Thus, a solver will be created in the follwoing way:

- MeqSolver.create(solvername, MeqParms, domain)
  - The solver can be accessed by this name (simlar to a node)
  - The MeqParms argument is a list of node names
  - The domain(t,f) is its 'start-domain' (it may grow)

Obviously, there is a relation between a MeqSolver and specific domains
in its subset of MeqParms.

IMHO, the solver should tell its MeqParms that each should create a
special polc for the given start-domain, and to return spids for its
coefficients. Of course the new polc is initialised with the best
coeff.values gleaned from any existing polcs. This approach has two
advantages:
 
  1) The solver has a complete spid-vector, which can be used to
  intialise its matrix, and to ask its condeqs for equations in the
  correct spid order.

  2) When a solvable MeqParm gets a request from (one of) its
  solver(s), it knows which of its polcs to use. This implies of
  course that the MeqParm (and its relevant polc!) must be mentioned
  in the MeqRequest.
  
Note that, when a MeqParm is not solvable (or rather when it gets a
MeqRequest in which it is not mentioned), it does not create a ne
polc, but tries to give the best possible values for the requested
MeqCells form one or more of its existing polcs.


Multiple solvers will exist at any time. For example:

  -) For the M.E. parameters in the direction of each peeling source.

  -) For different subsets of the above (e.g. phase and gain) 

  -) For different domains(t,f) of the same MeqParms.

Solvers ask 'their' condeq/constr nodes for equations. Each equation
is treated in isolation (i.e. the solver does not group equations from
different condeqs, or even from the same condeq). Therefore, the
coefficients (derivatives) of each equation must be in the correct
(spid) order expected by the solution matrix. The latter may exist for
much longer than a single MeqRequest.

The solver issues a MeqRequestSequence to its condeq nodes. After
that, it issues MeqRequests in that sequence, and gets equations in
return. 

From time to time the solver inverts the matrix, and feeds a
MeqSolution to its MeqParms. This can be done in two ways:

   1) using a generic node method .applySolution(MeqSolution)

   2) by attaching the MeqSolution as a rider to a MeqRequest. 

Both are needed! Since we are updating the MeqParms via the trees, we
need a mechanism to make sure that a MeqParms only gets updated once.

NB: It is possible at any time to pause the system, and to interrogate
any node. This includes issuing a .getResult() to it with a different
MeqRequest. When the paused process resumes, the node will be back on
its original course after the first .getResult() from a parent.




######################################################################
#######  Section 1: Things that are ready for a decision  ############
######################################################################






######################################################################
#####  Section 2: Things to think about (to be discussed later)  #####
######################################################################


         =============
         Scope of PSS4
         =============

There is an apparent contradiction between the need to "demonstrate
LOFAR calibration algorithms", and a PSS4 system that can be used to
reduce WSRT data. Here are some good reasons:

   -) We are still feeling our way, so we need a good experimentation
   tool. A minimum kernel, and strict policy-barriers, maximize the
   flexibility for building different applications (quickly). It also
   allows more people to do different experiments in parallel (in
   contrast, adapting PSS3 for different experiments would be a serial
   process).

   -) We need PSS4 for the next big step for LOFAR: ionospheric
   phase-tracking and phase-locking.

   -) Even when LOFAR exists, it will take years before we really know
   how to get the most out of the data. This means that the LOFAR
   system should at least have some of the flexibility of PSS4.
   
   -) We need the expertise of active astronomers to shake out the
   system. They are only interested if they can work on their own
   data. As a byproduct, it trains astronomers (especially the next
   generation!) in the use of M.E.-based data reduction.

   -) The new 150 MHz Low Frequency Front Ends (LFFE) for the WSRT are
   an important pilot project for LOFAR. They need PSS4+. The same
   goes for GMRT data, and VLA 75MHz, and the combination of the VLA
   with NRL LOFAR test station.

   -) Reducing real data (better than other packages) gives a lot of
   credibility. 

   -) For the implementation of the final LOFAR system, we should have
   a fully working (and tested!) prototype to start from. It is by far
   the most effective way of specifying requirements for the CTI
   professionals. 

There are probably more reasons. However, it is very important that we
have a working kernel as soon as possible (few weeks?). Actually using
it will make our discussions much more focussed and to the point, and
will quickly show up the strengths and weaknesses. After taking care
of those, I envisage that we will only need a rather low level of
kernel 'maintenance', while we concentrate on other things.


         

         ==========
         Node names
	 ==========

I have made huge strides in node-name handling and tree generation.
I will give a demonstration sometime next week. Hopefully, some of our
discussions will be easier then.





#########################################################################
#########################################################################
 
    

