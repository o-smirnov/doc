file: ../MeqTrees/PSS4.02mar2004


.....Starts at 13:30, due to meeting GVD in Westerbork....


         General
	 =======

  -) We are spending a lot of time on MeqParm issues, because I think
  it is crucial to get it right, and that we all view it the same way.
  This is only possible by means of demonstrations and visualisation.

  -) During a discussion with Kjeld, it became apparent that we have
  not talked in sufficient detail for too long. 
 

         meqDFT (GVD/JEN)
	 ================

  -) The u,v,w coordinates are calculated per station. They are
  functions of time and freq.

  -) Source positions can be functions of time (and possibly of freq).

  -) The u,v,w, coordinates depend on source position (at least for 2D
  arrays, not for E-W WSRT). When calculating the 'DFT' phase-shift
  from one sky position to another, we use the initial position for
  calculating the u,v,w coordinates. 

  -) JEN has adapted his tree-building to reflect all this. GVD is
  working on meqDFT.



         MeqParm stuff (OMS) 
         ===================

  -) We have firmly established that:

     -) A MeqParm may have any number of polcs, and their domains may
     overlap. Upon request, it has an algorithm that uses the existing
     polcs (or the default value) to generate a vellset for a target
     domain. We how have at least two such algorithms (see below).

     -) When a MeqParm is solvable, it maintains one (or more!) polcs,
     whose coeff are to be solved for. Multiple polcs are be needed to
     deal with phase-jumps etc, or in the case of multiple solvers
     (see below).

     -) When a MeqParm is set solvable, it just sets a flag. Its
     solvable polc is only constructed when a target domain is
     available from the first request from the relevant solver.

     -) Since a MeqParm can be connected to more than one tree, it
     should ALWAYS be able to respond to any request, even when it is
     solvable. An 'odd' request should NOT affect its solvable
     polc(s). The hierarchical request_id allows the MeqParm to
     recognise whether the request pertains to the solution or not...

     -) When the 'grow_domain' flag is set for a solvable polc, the
     polc domain is modified to the ENVELOPE of the existing one and
     the target dmain. Even when these overlap, or are non-contiguous.
     Of course a vellset is returned for the target domain only.

     -) Eventually the updated polc(s) is/are written back into the
     meptable, either in a new row, or overwriting an existing row.
     (We need tools to 'clean up' MeqParms that have bedcome too
     fragmented, i.e. that have too many polcs).

     -) In principle, a MeqParm can be solvable for multiple solvers
     at the same time. This can be implemented either by maintaining
     multiple solvable polcs (which would each be explicitly
     associated with a solver), or by multiple instantiations. The
     latter scheme has naming implications. OMS is thinking.

     -) OMS is thinking about a general scheme in which a node can
     'clone' itself if it notices that it is part of clashing request
     streams. This is an interesting concept, all the more so since it
     is local.

  -) Remarks on OMS scripts:

     -) Some Glish 'rules':

        -) I would like a blank line between the comment and the code.

        -) No global functions (meq)

        -) all args have a default: check inside (invisible fail...)

        -) last arg is: trace=F: prints if T

        -) attributes like polc::name 
           (e.g. xxx[][]_#3, i.e. 3rd polc of MeqParm xxx[][])
  

     -) s := me.summary(trace=F) 
        always return string s, and print if trace=T

     -) .... we will deal with this orally ....


          MeqParm stuff (JEN)
          ===================

  -) I have implemented my scheme for deriving a polc from existing
  ones, for an arbitrary domain, and for specified fdeg/tdeg.  It is
  based on the idea of fiducial points, and uses the simplest possible
  weighting scheme: exp(-df*df)*exp(dt*dt), in which df and dt are the
  distance of a fiducial point to the centre of the target domain.

  -) I have developed a few tools to visualise the quality of a polc
  that has been estimated from existing polcs. They work both for the
  OMS algorithm and my own (see above).

  -) I have bypassed the table bug (discussed last week) by the .reset
  function: This removes all the polcs (rows) of a given parameter
  from the meptable. THisnis less brutal than re-creating the table.
  However, I think the bug should be fixed (After using create=T, it
  thinks that the meptable is still open after .done(). Message: 'in
  table cache'. The problem does not occur if create=F.)


         Growing domains (OMS/GVD/JEN)
	 =============================

  -) I would like to test (and demonstrate!) the growing-domain
  concept, on the simples possible tree. This requires:
     -) a request sequence of 10 sec (say) increments. 
     -) adaptations to the solver. It must be possible to keep 
        adding equations for the the solution matrix.
     -) visualisation of the process (JEN).



         Flagging (OMS)
	 ==============
 
  -) Peeling offers a very simple hierarchical flagging mechanism,
  which can be purely LOCAL.  We need a special version of the
  MeqSubtract class, which takes the difference between its two
  children (usually: measured minus predicted, centered on the peeling
  source), and flags each vell value that exceeds 5(7?) sigma of the
  values over the vellset.

  -) The MeqFlagDiff node replaces the MeqSubtract node in the ripple
  tree. Obviously it operates on the full cells resolution, i.e. not
  on the integrated cells that the Condeq works with.

  -) OMS is thinking about what to do with the flags that are
  generated in this way, i.e. how they get back into the MS.

  -) We should also develop a strategy about how to use flags in
  general. How to ignore flagged data when integrating over cells, and
  how to calculate weights for condeq equations, etc...




         GSM/LSM (OMS)
	 =============

  -) We should put outselves into a position to convert and use
  NEWSTAR source model (.MDL) files.

  -) AGB tells me that most of the sources for 3c84/300MHz are so
  extended that he uses CLEAN components. How are we going to deal
  with that? 

     -) Combine a group of CLEAN components into an extended
     Cat I component, and solve for its parameters?
 
     -) The Cat II prediction process: Combine all fainter components
     (CLEAN or otherwise) of a small region into a small map, anf FFT
     them together.
 
  -) In any case, msot of the 3c84 sources are extended, while we can
  only deal with point sources. We should start thinking about trees
  that can handle slightly extended sources. Perhaps we can get away
  for the moment with the assumtion that the instrumental parameters
  are constant over the source.

  -) In practice, we will generate ripple trees for a certain number
  of peeling sources, which will then be hooked up to specific
  sources from the GSM/LSM. For the moment, we will hook them up in
  order of descending NOMINAL flux, irrespective of their actual
  visibility at different baselines. 

  -) Note that a peeling source can be either a Cat I source, or a
  group of Cat II sources. They are always subtracted, but we only
  solve for Cat I parameters, of course.

  -) If the RELATIVE visibility (w.r.t. the contaminating sources) of
  a peeling source is too low for a particular ifr, we need a LOCAL
  mechanism for the condeq to decide whether to include it in the
  solution. If not, it is just subtracted.

  -) NB: The visibility of a source is affected by:

     -) its position in the primary beam (attenuation)

     -) the combination of baseline length and source size

     -) polarisation (e.g. XY/YX for the WSRT) 

  -) NB: Obviously, it would be better if the peeling sources were in
  order of decreasing visibility for each ifr. This is not possible if
  the rippling chain is controlled by a sequence of solvers that start
  each other. But it IS possible if the rippling chain is controlled
  by the condeqs. This would require the condeqs to know which solver
  to send their equaltions to....

  -) Finding and updating GSM/LSM sources from residual maps has a
  lower priority for the moment. But 'closing the loop' remains an
  important goal.


----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------


         Some strategic points
         =====================

  -) GVD will keep the MeqSolver, and write specialised classes
        like MeqDFT and MeqUVW.


  -) The following is roughly in order of priority:
     - PSS3 emulation.
       - Larger trees.
     - Chained solvers (ripple-peeling).
     - Predicting extended sources.
     - Deriving secondary MeqParms (beamshape, ion.screen)
     - Predicting and subtracting Cat II sources.
     - WSRT M.E.
     - Processing strategies (scripts)
     - Closing the loop:
       - GSM/LSM organisation (VO interaction)
       - Residual imaging (facets)
       - Updating the GSM from residual images (trees also) 
     - Writing our article...

  -) If we want a Python interface to the kernel in september, we
  should start relatively soon, because it will take some time for
  errors to die down. However, we want someone from outside our group
  to be the main user (and tester!) of this interface. A desirable 
  first application would be a tree browser (Nijmegen...?)

  -) JEN will ask WNB about further options for the AIPS++ solver.
  (adding/subtracting matrices etc). 




                               =================================
