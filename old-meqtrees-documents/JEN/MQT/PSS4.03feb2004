file: ../MeqTrees/PSS4.03feb2004

After all the stimulating discussions of today, here is the next
version. I have been thinking about it for a day, and I think I now
have virtually the complete set of rules for MeqParm behaviour.


         General 
         =======

  -) There have been a few changes in the PSS4 project:

     -) OMS will take over the MeqParm from GVD.
     -) Priorities are:
        - publish/subscribe from Glish
        - hierarchical request identifier (hiid)
        - MeqParm (see below)
        - double-derivatives
     -) GVD will keep the MeqSolver, and write specialised classes
        like MeqDFT and MeqUVW.


  -) The following is roughly in order of priority:
     - PSS3 emulation.
       - Larger trees.
     - Chained solvers (ripple-peeling).
     - Predicting extended sources.
     - Deriving secondary MeqParms (beamshape, ion.screen)
     - Predicting and subtracting Cat II sources.
     - WSRT M.E.
     - Processing strategies (scripts)
     - Closing the loop:
       - GSM/LSM organisation (VO interaction)
       - Residual imaging (facets)
       - Updating the GSM from residual images (trees also) 
     - Writing our article...

  -) If we want a Python interface to the kernel in september, we
  should start relatively soon, because it will take some time for
  errors to die down. However, we want someone from outside our group
  to be the main user (and tester!) of this interface. A desirable 
  first application would be a tree browser (Nijmegen...?)

  -) JEN will ask WNB about further options for the AIPS++ solver.
  (adding/subtracting matrices etc). 

444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444

         MEP tables (GVD)
	 ================

  -) We will stick to the current system of a main table with one row
  per polc, and a DEFAULTVALUES subtable. 

  -) The columns of the main table are:

     - NAME           any string
     - STARTTIME      domain (MJDsec)  
     - ENDTIME        domain (MJDsec) 
     - STARTFREQ      domain (Hz)      
     - ENDFREQ        domain (Hz)   
     - TIME0          normalization constant
     - FREQ0          normalization constant 
     - TIMESCALE      normalization constant
     - FREQSCALE      normalization constant
     - VALUES         polc(t,f)
     - PERTURBATION   absolute, scalar

  -) The subtable will have the following columns:
 
     - NAME             string
     - DEFAULT_VALUES   (see below)
     
  -) The DEFAULT_VALUES are specified in the form of a 2D array, which
  is assumed to be UN-NORMALIZED. The dimensions of the array indicate
  the default polynomial degree in two directions. Usually, only the
  c00 coeff will be non-zero. Bfor testing purposes to is useful to
  be able to specify some other coeff.

  -) NB: While it is possible to build in physical constraints like
  freq dependence by setting certain polc coeff to constant, it is
  easier to do this via an extra MeqNode.

  -) The DIFF_REL column will be dropped, and the DIFF column has been
  renamed PERTURBATION (again). It contains a single number, usually
  about 1e-6. Depending on the normalization scheme, the higher-degree
  coefficients will be perturbed by larger or smaller numbers...

  -) For double derivatives, the same PERTURBATION will be used in
  both directions.

  -) We have dropped the SOLVABLE/MASK column. It might be revived if
  we decide that we want to set some polc coeff to unsolvable, but we
  do not know yet how to do that for normalized coeff.

  -) We have dropped the NORMALIZED column in favour of 4 new columns
  TIME0, FREQ0, TIMESCALE, FREQSCALE. These define a 'suitable'
  normalisation that is less closely coupled to specific domains. This
  makes it easier to deal with dynamic domains (see below).



         MeqParm behaviour (OMS)
	 =======================

  -) The available values for a MeqParm are stored in the form of zero
  or more polcs, each valid for its own domain. Most of these polcs
  will be the result of a selfcal solution, but some of them may 
  represent external information (e.g. GPS ionospheric phases). 

  -) A MeqParm also has a (user-specified) default polc, which is used
  if there are no suitable polcs available. A default polc is a 2D
  array, the shape of which specifies the default dimensionality.
  Usually, only the c00 coefficient is non-zero, which makes it valid
  for any domain. If other coefficients are non-zero (which is useful
  for testing), the default polc is assumed to be normalised.

  -) The domains of the MeqParm polcs may have arbitrary shapes (as
  long as they are rectangles in freq-time space), and they may
  overlap! 

  -) The main purpose of a MeqParm is to provide a vellset for the
  cells of a specific domain. There are two possibilities:

     1) If the MeqParm is NOT solvable, it uses all its available
     information (polcs) to return the best possible vellset for the
     requested domain. A 'policy-free' scheme (PFS) is outlined below.

     2) If the MeqParm is SOLVABLE, the request deals exclusively with
     one (existing) polc. This Solvable Polc (SOPO) is 'dynamic', in
     the sense that its domain may change (grow, usually, see below).

  -) When a MeqParm is SET to solvable, a specific polc is assigned to
  this solution. This is the polc whose coefficients will be updated
  by the solver. Usually, a new polc will be created for an initial
  domain, using all available information. But it is also possible to
  continue with an existing polc. In either case, it is possible to
  specify the dimensionality of this polc. If the polc already exists,
  it will be recalculated for the new coefficients.

  -) Growing domains: If a MeqParm is solvable, the domain of its SOPO
  is automatically enlarged to include the requested domain. No
  re-normalisation is needed, since the reference point and scale are
  not changed. The prediction is done only for (the cells of) the
  requested domain, of course.

  -) Just for completeness, I mention the concept of Associated
  MeqParms, which we will need for ionospheric phases (for instance).
  The idea is, that a Meqparm may have another MeqParm, which solves
  for incremental values, while adding the results to the polcs of the
  'main' MeqParm. To be elaborated.


         Policy-Free Scheme (PFS)
	 ========================

  -) Here is a 'policy-free' scheme (PFS) to combine the information
  from all the available polcs. It is based on ALWAYS estimating an
  intermediate polc (IP), with the requested dimensionality, and for
  the requested (target) domain. This polc can then either be stored,
  or used to calculate a vellset.

  -) The dimensionality (IPdim) of the IP may be derived from the
  existing polcs, or specified explicitly by the request. Its domain
  must be explicitly specified.

  -) The coefficients of the IP are obtained by means of a
  least-squares fit. 
  
     1) Step one: From the domains of the existing polcs, collect
     suitable (t,f)-points, with associated weights. 

     2) Step two: Use the (t,f)-points with the highest weights to
     generate (weighted) linear equations for the solution matrix:
 
         y(t,f) = a00 + a01*t + a10*f + a11*tf + ...
                = p00 + p01*t + p10*f + p11*tf + p02*(t^2) + ....

     The a's are the coefficients of an existing polc, and the p's are
     the (unknown) coeff of the target polc.

  -) The weights of the (t,f)-points depend on their position
  w.r.t. the target domain, using the following rules:

     -) If there is any overlap with the target domain, use a regular
     grid of 3x3 (t,f)-points that span the overlap rectangle (see
     fig). The weights are the inverse distances between a (t,f)-point
     and the centre of the EXISTING domain. The assumption is that
     points closer to the edge of a domain are less reliable because
     there may be edge effects.

     -) If there is no overlap with the target domain, use only the
     (t,f)-points at the corners (or the centre?) of the existing
     polc. Their weights are inversely proportional to their distances
     from the centre of the TARGET domain. The idea is to give points
     from faraway polcs a very low weight, but make sure that they are
     used if there is no better information available.
 
  -) If there are too few (t,f)-points (i.e. equations) to make the
  matrix invert, generate some extra constraint equations that set the
  highest order IP coefficients to zero. This has the salutary effect
  of smoothing the IP if there is not enough information available.

  -) NB: The least-squares fit (LSF) is NOT a very expensive
  operation, since the matrices are quite small (typically 9x9). In
  addition, it is not needed very frequently:

     -) If the MeqParm is solvable, the LSF is only needed at the
     beginning, when/if a new polc is created.

     -) If the MeqParm is not solvable, the LSF is only needed once
     for each new domain (because of the cache).

  -) Note that this scheme is also suitable to smooth edge
  discontinuities between adjacetn domains, and to clean up a
  fragmented MeqParm by merging polcs.





                               =================================
