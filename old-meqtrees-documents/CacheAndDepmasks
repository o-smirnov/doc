
Some notes on caching and depmasks.

1. Depmask.

The depmask is an int describing the dependencies of a Result on dataset,
domain, iteration, etc. A depmask is returned in the lower 16 bits of 
Node::execute()'s return value. 

  NB: perhaps move depmasks into Result itself?

There is a 1-1 mapping between the bits in a depmask and the indices comprising
a RequestId. The meaning of each bit/index is given by a vector of ''symdeps''
(symbolic dependencies) and can be set up globally via the forest.

  NB: currently this info is duplicated within Nodes, perhaps this should be
  deprecated and forest settings used instead? Is there any value in having
  different symdeps in different parts of the tree?

For example, the default symdeps vector is
[Iteration,State,Resolution,Domain,DataSet]. Thus, "Iteration" is bit 0 of the
depmask / index 0 of the rqid, and "DataSet" is bit 4 / index 4.

Initial depmasks are computed at leaf nodes based on their result's known
dependencies. For example, a non-solvable Parm will have dependencies on
Dataset, Domain and Resolution (returning a depmask of 11100); a solvable Parm
additionally depends on Iteration (11101). The dependencies of a parent node are
generally the union of its children's dependencies, hence the depmask of a
parent is usually computed via a simple bitwise-OR. Stepchildren's dependencies
are ignored.


2. Using the depmask for caching.

The depmask of a result is retained in the cache, along with the rqid. It
is then used as follows:

2.1. If the node has a result cached, the new and the cached rqids are compared.
Only indices corresponding to set bits in the depmask are taken into account. If
the rqids completely match within the mask, the cached result is returned.

2.2. If a request contains a next-rqid hint, it can be used for "smart caching"
(if enabled). The rqid and the next-rqid are compared within the mask as above,
and the decision to cache is only taken if there's a match. (Of course this is
only done after the last parent has collected the result; the cache is
unconditionally retained until then (tThis may be overridden by the
cache_num_parents field, and may be necessary for efficient caching in the
presense of ReqSeq nodes.)


3. Meaning of symdeps.

Leaf nodes specify their dependencies in terms of vectors of symdeps, which are
then converted into a depmask based on the symdep assignments in the forest.
Hence, when we say "node X sets/returns symdep Y", what we mean is that the
depmask returned by node X has 1 at the bit position corresponding to symdep Y.

  NB: at the moment the mapping between symdeps and depmask is done somewhat
  haphazardly; the information is duplicated within nodes. I need to clean 
  this up. Nodes should use Node::computeDependMask(symdeps) to compute the
  depmasks.
  
Here is the meaning of the standard symdeps and the corresponding rqid indices.
In fact, it is easier to describe this in terms of rqid indices, since these
indicate what has changed in a request:

DataSet: this index is incremented in the Sinks whenever a new dataset header is
received.

Domain: this is incremented in the Sinks whenever a new domain snippet is
requested.

Resolution: this is incremented or changed in ModRes to indicate a change of
resolution.

Iteration: this is incremented by the Solver for each subsequent iteration,
indicating that solvable parameters are being updated.

State: this is incremented by ReqSeqs to indicate that different branches are
being executed. Currently, this dependency is explicitly reverse-propagated to
all parents.


4. Why ReqSeqs are such a pain in the neck.

Without reqseqs, everything is easy since we know that a node will be polled
by all its parents with the same request, before a new request arrives. With
a ReqSeq in place -- say a standard solve-correct tree -- some nodes in the
predict subtrees will be repeatedly polled from the "solve" side, before
being re-polled from the "correct" side after the solver returns. This plays
hell with caching -- and I have introduced the "cache_num_parents" field as a
kludge around this.

Even more insidiously, ReqSeqs have always caused us trouble with incorrect
reuse of cache. For example, pre-executing a predict tree before a solver fires
will fill its caches, then when the solver tries to set parms to solvable, the
cached results were returned, instead of executing the request. The root cause
of the problem is that returning a depmask with a result only works for "active"
parents that receive the same result. "Inactive" parents that will only be fired
later via a reqseq somewhere down the tree then have no way of knowing that the
dependencies of the node may have changed. 

I have introduced the "service_flag" field in a Request to get around this. I
have also made ReqSeqs increment the "State" dependency for each child; having
this dependency explicitly propagated down the tree whenever a node's state
changes (as is the case for MeqParm), from child to parents, then ensures that
after a final update from the solver, Parm-related branches are re-executed.

All this seems terribly unclean and will probably cause more pain during
parallelization. Sounds like it's time for an overhaul. Here are some
preliminary ideas:

1. During "resolve", explicitly identify reqseq topology by having reqseqs
resolve their children with a "sequence index". Store this sequence index in
each node. Nodes that have parents with different sequence indices can then make
caching decisions as described below.

2. The current parent should be passed into execute() as an optional parameter.
This way we always know the sequence number of our parent.

3. Explicitly propagate depmasks up the tree (a-la markStateDependency() right
now) as follows:

  2.1. There is no need to propagate to the calling parent, since it will
  receive a depmask as part of the Result.
  
  2.2. Similarly, no need to propagate to other parents with the same sequence
  index, since they'll be calling us for the same result anyway and will receive
  the depmask this way.
  
  2.3. Only parents with a different sequence number (if any) need to be
  notified of our depmask. Call markDependency(depmask) on these parents. The
  markDependency() method should work as follows:
  
    * if the depmask is already present in the currently cached depmask
    (depmask&cache_.retcode == depmask), do nothing.
    * add the depmask to the currently cached depmask.
    * call markDependency() on all parents.
    
  If we implement this, we can probably omit the "State" dependency from Parms,
  since they will propagate an "Iteration" dependency whenever something
  changes, and the iteration index is different. Need to think this particular
  bit through though!
  
4. This eliminates the need for the cache_num_parents kludge. Instead, we know
exactly how many parents to hold the cache for -- as many as there are with the
same sequence index as the calling parent. 

