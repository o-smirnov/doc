    Europython 2006 Conference Report
    
1. Numarray seems to be on the way out, everybody's moving to the numpy/scipy
libraries. http://www.scipy.org

Impact as far as we're concerned:

  * The python interface is mostly compatible, here's a summary of changes:
    http://www.scipy.org/Converting_from_numarray

  * "cd LOFAR/Timba; grep numarray `find . -name "*py"` | wc" shows 
    214(!!!) instances of the word "numarray" in our scripts, although 
    over half of them are just "from numarray import *" statements. Still, 
    it's going to be a lot of work converting over...
    
  * I'm thinking of providing a "Timba.array" wrapper package to hide the 
    difference between numarray and numpy.
    
  * There's no big rush since numarray will be maintained for a while (though
  probably not actively developed); on the other hand if we need to make a
  transition like this, then the sooner the better...
    
On the plus side, scipy seems to have a lot of numerical modules, everything 
from ffts to solving, so I think we can develop a lot of stuff with it,
especially on the cleaning/imaging/source extraction side.

2. The Enthought people seem to have a very nice visualization/data analysis
framework. http://code.enthought.com/. Pervertedly enough, they're
Windows-oriented, but their Python libs are claimed to be fully
Linux-compatible. I was especially impressed by the interactive plotting and
visualization capabilities here: http://code.enthought.com/chaco/, might be a
good base for a standalone ParmPlotter.

3. These guys: 
http://indico.cern.ch/contributionDisplay.py?contribId=94&sessionId=50&confId=44
showed something called PyTable, a module for working with HDF5 tables. They had
some very impressive benchmarks demonstrating better query speeds than with a
PostgresSQL database containing the same data. They also support building table
indices on arbitrary expressions. Might be useful for the GSM and potentially
for the LOFAR KSGs, since there was talk of HDF5 there.

4. On the other hand, there's lots of Python support for PostgresSQL:
http://indico.cern.ch/contributionDisplay.py?contribId=0&sessionId=41&confId=44
which makes it another candidate for GSM/LSM and the Parm database.

5. The ROOT people have been working on a Python interface to ROOT (PyROOT), and
they seem to have developed a general framework called Reflex/PyROOT for making
Python bindings for any C++ library. This talk describes how someone else
used it to create Python bindings to another big toolkit:
http://indico.cern.ch/contributionDisplay.py?contribId=118&sessionId=50&confId=44
As far as we're concerned, this may be a low-effort way to get basic AIPS++
bindings in Python, rather than waiting for the casa guys to get their stuff
together...

6. There's a new module called ctypes that makes it trivial to import and call
any C libraries from Python.

7. It's probably time to move to Python 2.4 (we're still on 2.3 for now). Code
impact should be minimal, and there's some nice new features (i.e. function
decorators) that may be very useful for developing TDL code.

